--******************************************************--
-- This SQL Statements is used for the St. Paul			--
-- 		University UMS									--
--Programmed by: Judyll Mark T. Agan					--
--Date created: April 01, 2007							--
--SERVER SOLUTIONS [ 8 ] TRIGGERS AND PROCEDURES		--
-- DEPENDENT TO OTHER TABLES							--
--******************************************************--

USE db_umsdev_03_30_2007
GO

-- ###########################################TABLE CONSTRAINTS OBJECTS##############################################################


--verifies if the Person_Information_Life_Status_Code_FK constraint exists--
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_information
	DROP CONSTRAINT Person_Information_Life_Status_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Gender_Code_FK constraint exists--
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_information
	DROP CONSTRAINT Person_Information_Gender_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Marital_Status_Code_FK constraint exists--
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_information
	DROP CONSTRAINT Person_Information_Marital_Status_Code_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Created_By_FK constraint exists--
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_information
	DROP CONSTRAINT Person_Information_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_information
	DROP CONSTRAINT Person_Information_Edited_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Image_SysID_Person_FK constraint exists--
IF OBJECT_ID('ums.person_image', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_image
	DROP CONSTRAINT Person_Image_SysID_Person_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Image_Created_By_FK constraint exists--
IF OBJECT_ID('ums.person_image', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_image
	DROP CONSTRAINT Person_Image_Created_By_FK
END
GO
-----------------------------------------------------	

--verifies if the Person_Image_Edited_By_FK constraint exists--
IF OBJECT_ID('ums.person_image', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_image
	DROP CONSTRAINT Person_Image_Edited_By_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Relationship_Information_SysID_Person_FK constraint exists--
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_relationship_information
	DROP CONSTRAINT Person_Relationship_Information_SysID_Person_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Relationship_Information_In_Relationship_With_SysID_Person_FK constraint exists--
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_relationship_information
	DROP CONSTRAINT Person_Relationship_Information_In_Relationship_With_SysID_Person_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Relationship_Information_Relationship_Type_ID_FK constraint exists--
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_relationship_information
	DROP CONSTRAINT Person_Relationship_Information_Relationship_Type_ID_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Relationship_Information_Created_By_FK constraint exists--
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_relationship_information
	DROP CONSTRAINT Person_Relationship_Information_Created_By_FK
END
GO
-----------------------------------------------------

--verifies if the Person_Relationship_Information_Edited_By_FK constraint exists--
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
BEGIN
	ALTER TABLE ums.person_relationship_information
	DROP CONSTRAINT Person_Relationship_Information_Edited_By_FK
END
GO
-----------------------------------------------------

-- ###########################################END TABLE CONSTRAINTS OBJECTS##############################################################





-- ########################################DROP DEPENDENT TABLE CONSTRAINTS ##############################################################

--verifies if the System_User_Info_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.system_user_info', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE ums.system_user_info
	DROP CONSTRAINT System_User_Info_SysID_Person_FK
END
GO
------------------------------------------------------

--verifies if the Employee_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.employee_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'employee_information'))
BEGIN
	ALTER TABLE ums.employee_information
	DROP CONSTRAINT Employee_Information_SysID_Person_FK
END
GO
-------------------------------------------------------

--verifies if the Employee_Information_SysID_Person_UQ constraint exists
IF (OBJECT_ID('ums.employee_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'employee_information'))
BEGIN
	ALTER TABLE ums.employee_information
	DROP CONSTRAINT Employee_Information_SysID_Person_UQ
END
GO
-------------------------------------------------------

--verifies if the Student_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.student_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'student_information'))
BEGIN
	ALTER TABLE ums.student_information
	DROP CONSTRAINT Student_Information_SysID_Person_FK
END
GO
-------------------------------------------------------

--verifies if the Student_Information_SysID_Person_UQ constraint exists
IF (OBJECT_ID('ums.student_information', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'student_information'))
BEGIN
	ALTER TABLE ums.student_information
	DROP CONSTRAINT Student_Information_SysID_Person_UQ
END
GO
-------------------------------------------------------

--verifies if the Campus_Access_Details_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.campus_access_details', 'U') IS NOT NULL) AND
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'campus_access_details'))
BEGIN
	ALTER TABLE ums.campus_access_details
	DROP CONSTRAINT Campus_Access_Details_SysID_Person_FK
END
GO
-------------------------------------------------------

-- ########################################END DROP DEPENDENT TABLE CONSTRAINTS ##############################################################





-- ################################################TABLE "person_information" OBJECTS######################################################
-- verifies if the person_information table exists
IF OBJECT_ID('ums.person_information', 'U') IS NOT NULL
	DROP TABLE ums.person_information
GO

CREATE TABLE ums.person_information 			
(
	sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Information_SysID_Person_PK PRIMARY KEY (sysid_person)
		CONSTRAINT Person_Information_SysID_Person_CK CHECK (sysid_person LIKE 'SYSPER%'),
	e_code varchar (50) NULL,
	last_name varchar (50) NOT NULL,
	first_name varchar (50) NOT NULL,
	middle_name varchar (50) NULL DEFAULT (''),
	life_status_code varchar (50) NULL
		CONSTRAINT Person_Information_Life_Status_Code_FK FOREIGN KEY REFERENCES ums.code_reference(code_reference_id) ON UPDATE NO ACTION,
	gender_code varchar (50) NULL
		CONSTRAINT Person_Information_Gender_Code_FK FOREIGN KEY REFERENCES ums.code_reference(code_reference_id) ON UPDATE NO ACTION,
	birthdate datetime NULL,
	place_birth varchar (500) NULL,
	email_address varchar (100) NULL,
	present_address varchar (500) NULL,
	present_phone_nos varchar (100) NULL,
	home_address varchar (500) NULL,
	home_phone_nos varchar (100) NULL,
	citizenship varchar (100) NULL,
	nationality varchar (100) NULL,
	religion varchar (100) NULL,
	marital_status_code varchar (50) NULL
		CONSTRAINT Person_Information_Marital_Status_Code_FK FOREIGN KEY REFERENCES ums.code_reference(code_reference_id) ON UPDATE NO ACTION,
	marriage_date datetime NULL,
	other_person_information varchar (MAX) NULL,

	for_employee bit NOT NULL DEFAULT (0),
	for_student bit NOT NULL DEFAULT (0),
	for_login bit NOT NULL DEFAULT (0),

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Information_Created_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,
	
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Information_Edited_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
--------------------------------------------------------

-- create an index of the person_information table 
CREATE INDEX Person_Information_SysID_Person_Index
	ON ums.person_information (sysid_person ASC)
GO
------------------------------------------------------------------

-- ##############################################END TABLE "person_information" OBJECTS######################################################




-- ######################################RESTORE DEPENDENT TABLE CONSTRAINTS#############################################################


--verifies if the System_User_Info_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.system_user_info', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE ums.system_user_info
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('ums.system_user_info', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
BEGIN
	ALTER TABLE ums.system_user_info WITH NOCHECK
	ADD CONSTRAINT System_User_Info_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

-----------------------------CANNOT ADD A UNIQUE CONSTRAINT FOR THE SYSTEM USER INFO BECAUSE OF THE DEFAULT USERS---------------------------
--IF (OBJECT_ID('ums.system_user_info', 'U') IS NOT NULL) AND 
--	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'system_user_info'))
--BEGIN
--	ALTER TABLE ums.system_user_info WITH NOCHECK
--	ADD CONSTRAINT System_User_Info_SysID_Person_UQ UNIQUE (sysid_person)
--END
--GO
-----------------------------------------------------

--verifies if the Employee_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.employee_information', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'employee_information'))
BEGIN
	ALTER TABLE ums.employee_information
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('ums.employee_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'employee_information'))
BEGIN
	ALTER TABLE ums.employee_information WITH NOCHECK
	ADD CONSTRAINT Employee_Information_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

IF (OBJECT_ID('ums.employee_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'employee_information'))
BEGIN
	ALTER TABLE ums.employee_information WITH NOCHECK
	ADD CONSTRAINT Employee_Information_SysID_Person_UQ UNIQUE (sysid_person)
END
GO
-----------------------------------------------------

--verifies if the Student_Information_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.student_information', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'student_information'))
BEGIN
	ALTER TABLE ums.student_information
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('ums.student_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'student_information'))
BEGIN
	ALTER TABLE ums.student_information WITH NOCHECK
	ADD CONSTRAINT Student_Information_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
END
GO

IF (OBJECT_ID('ums.student_information', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'student_information'))
BEGIN
	ALTER TABLE ums.student_information WITH NOCHECK
	ADD CONSTRAINT Student_Information_SysID_Person_UQ UNIQUE (sysid_person)
END
GO
-----------------------------------------------------

--verifies if the Campus_Access_Details_SysID_Person_FK constraint exists
IF (OBJECT_ID('ums.campus_access_details', 'U') IS NOT NULL) AND 
	(NOT EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'campus_access_details'))
BEGIN
	ALTER TABLE ums.campus_access_details
	ADD sysid_person varchar (50) NOT NULL DEFAULT ('')
END
GO

IF (OBJECT_ID('ums.campus_access_details', 'U') IS NOT NULL) AND 
	(EXISTS (SELECT * FROM information_schema.columns WHERE column_name = 'sysid_person' AND table_name = 'campus_access_details'))
BEGIN
	ALTER TABLE ums.campus_access_details WITH NOCHECK
	ADD CONSTRAINT Campus_Access_Details_SysID_Person_FK FOREIGN KEY (sysid_person) REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
END
GO
-----------------------------------------------------

-- ######################################END RESTORE DEPENDENT TABLE CONSTRAINTS#############################################################







-- ################################################TABLE "person_information" OBJECTS######################################################

/*verifies that the trigger "Person_Information_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Person_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Information_Trigger_Insert
GO

CREATE TRIGGER ums.Person_Information_Trigger_Insert
	ON  ums.person_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @e_code varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @other_person_information varchar (MAX)

	DECLARE @for_employee bit
	DECLARE @for_student bit
	DECLARE @for_login bit

	DECLARE @created_on datetime
	DECLARE @created_by varchar (50)
	
	SELECT 
		@sysid_person = i.sysid_person,
		@e_code = i.e_code,
		@last_name = i.last_name,
		@first_name = i.first_name,
		@middle_name = i.middle_name,
		@life_status_code = i.life_status_code,
		@gender_code = i.gender_code,
		@birthdate = i.birthdate,
		@place_birth = i.place_birth,
		@email_address = i.email_address,
		@present_address = i.present_address,
		@present_phone_nos = i.present_phone_nos,
		@home_address = i.home_address,
		@home_phone_nos = i.home_phone_nos,
		@citizenship = i.citizenship,
		@nationality = i.nationality,
		@religion = i.religion,
		@marital_status_code = i.marital_status_code,
		@marriage_date = i.marriage_date,
		@other_person_information = i.other_person_information,

		@for_employee = i.for_employee,
		@for_student = i.for_student,
		@for_login = i.for_login,
		
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@for_employee = 0) AND (@for_student = 0) AND (@for_login = 0)
	BEGIN

		SET @transaction_done = 'CREATED a new person information ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') +
								'][E-Code: ' + ISNULL(@e_code, '') +
								'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
								'][Life Status: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	ums.code_reference AS crf
																WHERE
																	crf.code_reference_id = @life_status_code), '') +
								'][Gender: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	ums.code_reference AS crf
																WHERE
																	crf.code_reference_id = @gender_code), '') +
								'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
								'][Place of Birth: ' + ISNULL(@place_birth, '') +
								'][Email Address: ' + ISNULL(@email_address, '') +
								'][Present Address: ' + ISNULL(@present_address, '') +
								'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
								'][Home Address: ' + ISNULL(@home_address, '') +
								'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
								'][Citizenship: ' + ISNULL(@citizenship, '') +
								'][Nationality: ' + ISNULL(@nationality, '') +
								'][Religion: ' + ISNULL(@religion, '') +
								'][Marital Status: ' + ISNULL((SELECT
																	crf.code_description
																FROM
																	ums.code_reference AS crf
																WHERE
																	crf.code_reference_id = @marital_status_code), '') +
								'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
								'][Other Person Information: ' + ISNULL(@other_person_information, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

	END

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Person_Information_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Person_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Person_Information_Trigger_Instead_Update
	ON  ums.person_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @e_code varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @other_person_information varchar (MAX)

	DECLARE @for_employee bit
	DECLARE @for_student bit
	DECLARE @for_login bit

	DECLARE @edited_by varchar (50)

	DECLARE @e_code_b varchar (50)
	DECLARE @last_name_b varchar (50)
	DECLARE @first_name_b varchar (50)
	DECLARE @middle_name_b varchar (50)
	DECLARE @life_status_code_b varchar (50)
	DECLARE @gender_code_b varchar (50)
	DECLARE @birthdate_b datetime
	DECLARE @place_birth_b varchar (500)
	DECLARE @email_address_b varchar (100)
	DECLARE @present_address_b varchar (500)
	DECLARE @present_phone_nos_b varchar (100)
	DECLARE @home_address_b varchar (500)
	DECLARE @home_phone_nos_b varchar (100)
	DECLARE @citizenship_b varchar (100)
	DECLARE @nationality_b varchar (100)
	DECLARE @religion_b varchar (100)
	DECLARE @marital_status_code_b varchar (50)
	DECLARE @marriage_date_b datetime
	DECLARE @other_person_information_b varchar (MAX)

	DECLARE @has_update bit

	DECLARE person_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_person , i.e_code, i.last_name, i.first_name, i.middle_name, i.life_status_code, i.gender_code,
				i.birthdate, i.place_birth, i.email_address, i.present_address, i.present_phone_nos, i.home_address, i.home_phone_nos,
				i.citizenship, i.nationality, i.religion, i.marital_status_code, i.marriage_date, i.other_person_information, 
				i.for_employee, i.for_student, i.for_login, i.edited_by
			FROM INSERTED AS i

	OPEN person_information_update_cursor

	FETCH NEXT FROM person_information_update_cursor
		INTO @sysid_person , @e_code, @last_name, @first_name, @middle_name, @life_status_code, @gender_code,
				@birthdate, @place_birth, @email_address, @present_address, @present_phone_nos, @home_address, @home_phone_nos,
				@citizenship, @nationality, @religion, @marital_status_code, @marriage_date, @other_person_information, 
				@for_employee, @for_student, @for_login, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@e_code_b = pri.e_code,
			@last_name_b = pri.last_name,
			@first_name_b = pri.first_name,
			@middle_name_b = pri.middle_name,
			@life_status_code_b = pri.life_status_code,
			@gender_code_b = pri.gender_code,
			@birthdate_b = pri.birthdate,
			@place_birth_b = pri.place_birth,
			@email_address_b = pri.email_address,
			@present_address_b = pri.present_address,
			@present_phone_nos_b = pri.present_phone_nos,
			@home_address_b = pri.home_address,
			@home_phone_nos_b = pri.home_phone_nos,
			@citizenship_b = pri.citizenship,
			@nationality_b = pri.nationality,
			@religion_b = pri.religion,
			@marital_status_code_b = pri.marital_status_code,
			@marriage_date_b = pri.marriage_date,
			@other_person_information_b = pri.other_person_information
		FROM 
			ums.person_information AS pri
		WHERE
			pri.sysid_person = @sysid_person

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@e_code COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@e_code_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[E-Code Before: ' + ISNULL(@e_code_b, '') + ']' +
														'[E-Code After: ' + ISNULL(@e_code, '') + ']'
			SET @has_update = 1
		END
		
		IF (NOT ISNULL(@first_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@first_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@middle_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@middle_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@last_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@last_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Name Before: ' + @last_name_b + ', ' + @first_name_b + ' ' + ISNULL(@middle_name_b, '') + ']' +
														'[Name After: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') + ']'
		END

		IF (NOT ISNULL(@life_status_code, '') = ISNULL(@life_status_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Life Status Before: ' + ISNULL((SELECT
																						crf.code_description
																					FROM
																						ums.code_reference AS crf
																					WHERE
																						crf.code_reference_id = @life_status_code_b), '') + ']' +
														'[Life Status After: ' + ISNULL((SELECT
																						crf.code_description
																					FROM
																						ums.code_reference AS crf
																					WHERE
																						crf.code_reference_id = @life_status_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@gender_code, '') = ISNULL(@gender_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Gender Before: ' + ISNULL((SELECT
																							crf.code_description
																						FROM
																							ums.code_reference AS crf
																						WHERE
																							crf.code_reference_id = @gender_code_b), '') + ']' +
														'[Gender After: ' + ISNULL((SELECT
																							crf.code_description
																						FROM
																							ums.code_reference AS crf
																						WHERE
																							crf.code_reference_id = @gender_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @birthdate, 101), '') = ISNULL(CONVERT(varchar, @birthdate_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Birthdate Before: ' + ISNULL(CONVERT(varchar, @birthdate_b, 101), '') + ']' +
														'[Birthdate After: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@place_birth COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@place_birth_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Place of Birth Before: ' + ISNULL(@place_birth_b, '') + ']' +
														'[Place of Birth After: ' + ISNULL(@place_birth, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@email_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@email_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Email Address Before: ' + ISNULL(@email_address_b, '') + ']' +
														'[Email Address After: ' + ISNULL(@email_address, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@present_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@present_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Present Address Before: ' + ISNULL(@present_address_b, '') + ']' +
														'[Present Address After: ' + ISNULL(@present_address, '') + ']'
			SET @has_update = 1
		END
		
		IF (NOT ISNULL(@present_phone_nos COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@present_phone_nos_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Present Phone Nos. Before: ' + ISNULL(@present_phone_nos_b, '') + ']' +
														'[Present Phone Nos. After: ' + ISNULL(@present_phone_nos, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@home_address COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@home_address_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Home Address Before: ' + ISNULL(@home_address_b, '') + ']' +
														'[Home Address After: ' + ISNULL(@home_address, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@home_phone_nos COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@home_phone_nos_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Home Phone Nos. Before: ' + ISNULL(@home_phone_nos_b, '') + ']' +
														'[Home Phone Nos. After: ' + ISNULL(@home_phone_nos, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@citizenship COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@citizenship_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Citizenship Before: ' + ISNULL(@citizenship_b, '') + ']' +
														'[Citizenship After: ' + ISNULL(@citizenship, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@nationality COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@nationality_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Nationality Before: ' + ISNULL(@nationality_b, '') + ']' +
														'[Nationality After: ' + ISNULL(@nationality, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@religion COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@religion_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Religion Before: ' + ISNULL(@religion_b, '') + ']' +
														'[Religion After: ' + ISNULL(@religion, '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@marital_status_code, '') = ISNULL(@marital_status_code_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Marital Status Before: ' + ISNULL((SELECT
																									crf.code_description
																								FROM
																									ums.code_reference AS crf
																								WHERE
																									crf.code_reference_id = @marital_status_code_b), '') + ']' +
														'[Marital Status After: ' + ISNULL((SELECT
																									crf.code_description
																								FROM
																									ums.code_reference AS crf
																								WHERE
																									crf.code_reference_id = @marital_status_code), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(CONVERT(varchar, @marriage_date, 101), '') = ISNULL(CONVERT(varchar, @marriage_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Marriage Date Before: ' + ISNULL(CONVERT(varchar, @marriage_date_b, 101), '') + ']' +
														'[Marriage Date After: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF (NOT ISNULL(@other_person_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_person_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Other Person Information Before: ' + ISNULL(@other_person_information_b, '') + ']' +
														'[Other Person Information After: ' + ISNULL(@other_person_information, '') + ']'
			SET @has_update = 1
		END

		IF (@has_update = 1)
		BEGIN

			UPDATE ums.person_information SET
				e_code = @e_code,
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,
				life_status_code = @life_status_code,
				gender_code = @gender_code,
				birthdate = @birthdate,
				place_birth = @place_birth,
				email_address = @email_address,
				present_address = @present_address,
				present_phone_nos = @present_phone_nos,
				home_address = @home_address,
				home_phone_nos = @home_phone_nos,
				citizenship = @citizenship,
				nationality = @nationality,
				religion = @religion,
				marital_status_code = @marital_status_code,
				marriage_date = @marriage_date,
				other_person_information = @other_person_information,

				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				sysid_person = @sysid_person

			IF (@for_employee = 1) AND
				(EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED an employee personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information WHERE sysid_person = @sysid_person), '') + 						
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_student = 1) AND
				(EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a student personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										'][Student ID: ' + ISNULL((SELECT student_id FROM ums.student_information WHERE sysid_person = @sysid_person), '') +
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE IF (@for_login = 1) AND
				(EXISTS (SELECT system_user_id FROM ums.system_user_info WHERE sysid_person = @sysid_person))
			BEGIN

				SET @transaction_done = 'UPDATED a system user personal information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END
			ELSE
			BEGIN

				SET @transaction_done = 'UPDATED a person information ' + 
										'[Person System ID: ' + ISNULL(@sysid_person, '') + 
										']' + @transaction_done

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

			END

		END
		ELSE
		BEGIN

			UPDATE ums.person_information SET
				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login
			WHERE
				sysid_person = @sysid_person

		END

		FETCH NEXT FROM person_information_update_cursor
			INTO @sysid_person , @e_code, @last_name, @first_name, @middle_name, @life_status_code, @gender_code,
					@birthdate, @place_birth, @email_address, @present_address, @present_phone_nos, @home_address, @home_phone_nos,
					@citizenship, @nationality, @religion, @marital_status_code, @marriage_date, @other_person_information, 
					@for_employee, @for_student, @for_login, @edited_by

	END

	CLOSE person_information_update_cursor
	DEALLOCATE person_information_update_cursor

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Person_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Person_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Person_Information_Trigger_Instead_Delete
	ON  ums.person_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a person information', 'Person Information'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertUpdatePersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertUpdatePersonInformation')
   DROP PROCEDURE ums.InsertUpdatePersonInformation
GO

CREATE PROCEDURE ums.InsertUpdatePersonInformation
	
	@sysid_person varchar (50) = '',
	@e_code varchar (50) = '',
	@last_name varchar (50) = '',
	@first_name varchar (50) = '',
	@middle_name varchar (50) = '',
	@life_status_code varchar (50) = '',
	@gender_code varchar (50) = '',
	@birthdate datetime,
	@place_birth varchar (500) = '',
	@email_address varchar (100) = '',
	@present_address varchar (500) = '',
	@present_phone_nos varchar (100) = '',
	@home_address varchar (500) = '',
	@home_phone_nos varchar (100) = '',
	@citizenship varchar (100) = '',
	@nationality varchar (100) = '',
	@religion varchar (100) = '',
	@marital_status_code varchar (50) = '',
	@marriage_date datetime,
	@other_person_information varchar (MAX) = '',

	@for_employee bit = 0,
	@for_student bit = 0,
	@for_login bit = 0,

	@network_information varchar (MAX) = '',
	@system_user_id varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		IF (@for_employee = 1)
		BEGIN
			SET @for_student = 0
			SET @for_login = 0
		END
		ELSE IF (@for_student = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_login = 0
		END
		ELSE IF (@for_login = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_student = 0
		END

		IF (NOT EXISTS (SELECT sysid_person FROM ums.person_information WHERE (sysid_person = @sysid_person)))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			INSERT INTO ums.person_information
			(
				sysid_person,
				e_code,
				last_name,
				first_name,
				middle_name,
				life_status_code,
				gender_code,
				birthdate,
				place_birth,
				email_address,
				present_address,
				present_phone_nos,
				home_address,
				home_phone_nos,
				citizenship,
				nationality,
				religion,
				marital_status_code,
				marriage_date,
				other_person_information,

				for_employee,
				for_student,
				for_login,

				created_by
			)
			VALUES
			(
				@sysid_person,
				@e_code,
				@last_name,
				@first_name,
				@middle_name,
				@life_status_code,
				@gender_code,
				@birthdate,
				@place_birth,
				@email_address,
				@present_address,
				@present_phone_nos,
				@home_address,
				@home_phone_nos,
				@citizenship,
				@nationality,
				@religion,
				@marital_status_code,
				@marriage_date,
				@other_person_information,

				@for_employee,
				@for_student,
				@for_login,

				@system_user_id
			)

		END
		ELSE
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			UPDATE ums.person_information SET
				e_code = @e_code,
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,
				life_status_code = @life_status_code,
				gender_code = @gender_code,
				birthdate = @birthdate,
				place_birth = @place_birth,
				email_address = @email_address,
				present_address = @present_address,
				present_phone_nos = @present_phone_nos,
				home_address = @home_address,
				home_phone_nos = @home_phone_nos,
				citizenship = @citizenship,
				nationality = @nationality,
				religion = @religion,
				marital_status_code = @marital_status_code,
				marriage_date = @marriage_date,
				other_person_information = @other_person_information,

				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login,

				edited_by = @system_user_id
			WHERE
				(sysid_person = @sysid_person)

		END

	END	
	ELSE IF (ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)
	BEGIN

		IF (@for_employee = 1)
		BEGIN
			SET @for_student = 0
			SET @for_login = 0
		END
		ELSE IF (@for_student = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_login = 0
		END
		ELSE IF (@for_login = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_student = 0
		END

		IF (NOT EXISTS (SELECT sysid_person FROM ums.person_information WHERE (sysid_person = @sysid_person)))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			INSERT INTO ums.person_information
			(
				sysid_person,
				last_name,
				first_name,
				middle_name,
				life_status_code,
				gender_code,
				birthdate,
				place_birth,
				email_address,
				present_address,
				present_phone_nos,
				home_address,
				home_phone_nos,
				citizenship,
				nationality,
				religion,
				marital_status_code,
				marriage_date,
				other_person_information,

				for_employee,
				for_student,
				for_login,

				created_by
			)
			VALUES
			(
				@sysid_person,
				@last_name,
				@first_name,
				@middle_name,
				@life_status_code,
				@gender_code,
				@birthdate,
				@place_birth,
				@email_address,
				@present_address,
				@present_phone_nos,
				@home_address,
				@home_phone_nos,
				@citizenship,
				@nationality,
				@religion,
				@marital_status_code,
				@marriage_date,
				@other_person_information,

				@for_employee,
				@for_student,
				@for_login,

				@system_user_id
			)

		END
		ELSE
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			UPDATE ums.person_information SET
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,
				life_status_code = @life_status_code,
				gender_code = @gender_code,
				birthdate = @birthdate,
				place_birth = @place_birth,
				email_address = @email_address,
				present_address = @present_address,
				present_phone_nos = @present_phone_nos,
				home_address = @home_address,
				home_phone_nos = @home_phone_nos,
				citizenship = @citizenship,
				nationality = @nationality,
				religion = @religion,
				marital_status_code = @marital_status_code,
				marriage_date = @marriage_date,
				other_person_information = @other_person_information,

				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login,

				edited_by = @system_user_id
			WHERE
				(sysid_person = @sysid_person)

		END

	END	
	ELSE IF (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		IF (@for_employee = 1)
		BEGIN
			SET @for_student = 0
			SET @for_login = 0
		END
		ELSE IF (@for_student = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_login = 0
		END
		ELSE IF (@for_login = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_student = 0
		END

		IF (NOT EXISTS (SELECT sysid_person FROM ums.person_information WHERE (sysid_person = @sysid_person)))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			INSERT INTO ums.person_information
			(
				sysid_person,
				last_name,
				first_name,
				middle_name,

				for_employee,
				for_student,
				for_login,

				created_by
			)
			VALUES
			(
				@sysid_person,
				@last_name,
				@first_name,
				@middle_name,

				@for_employee,
				@for_student,
				@for_login,

				@system_user_id
			)

		END
		ELSE
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			UPDATE ums.person_information SET
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,

				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login,

				edited_by = @system_user_id
			WHERE
				(sysid_person = @sysid_person)

		END
	
	END		
	ELSE IF (ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1)
	BEGIN

		IF (@for_employee = 1)
		BEGIN
			SET @for_student = 0
			SET @for_login = 0
		END
		ELSE IF (@for_student = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_login = 0
		END
		ELSE IF (@for_login = 1)
		BEGIN
			SET @for_employee = 0
			SET @for_student = 0
		END

		IF (EXISTS (SELECT sysid_person FROM ums.person_information WHERE (sysid_person = @sysid_person)))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

			UPDATE ums.person_information SET
				last_name = @last_name,
				first_name = @first_name,
				middle_name = @middle_name,

				for_employee = @for_employee,
				for_student = @for_student,
				for_login = @for_login,

				edited_by = @system_user_id
			WHERE
				(sysid_person = @sysid_person)

		END


	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Insert/Update a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertUpdatePersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectPersonInformation')
   DROP PROCEDURE ums.SelectPersonInformation
GO

CREATE PROCEDURE ums.SelectPersonInformation
	
	@query_string varchar (50) = '',
	@last_name varchar (50) = '',
	@first_name varchar (50) = '',
	@sysid_person_exclude_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''

AS

	--	A - query_string NOT IS NULL
	--	B - query_string '*'
	--	C - last name and first name
	--	D - exclude this sysid_person_exclude_list

	--	A	B	C	D
	--	==============
	--	0	0	0	0	NOT INCLUDED
	--	0	0	0	1	NOT INCLUDED
	--	0	0	1	0
	--	0	0	1	1
	--	0	1	0	0	NOT INCLUDED
	--	0	1	0	1	NOT INCLUDED
	--	0	1	1	0	NOT INCLUDED
	--	0	1	1	1	NOT INCLUDED
	--	1	0	0	0
	--	1	0	0	1
	--	1	0	1	0	NOT INCLUDED
	--	1	0	1	1	NOT INCLUDED
	--	1	1	0	0
	--	1	1	0	1
	--	1	1	1	0	NOT INCLUDED
	--	1	1	1	1	NOT INCLUDED
	
	

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT @query_string = '%' + RTRIM(LTRIM(ISNULL(@query_string, ''))) + '%'
		SELECT @last_name = '%' + RTRIM(LTRIM(REPLACE(REPLACE(@last_name, '.', ''), ' ', ''))) + '%'
		SELECT @first_name = '%' + RTRIM(LTRIM(REPLACE(REPLACE(@first_name, '.', ''), ' ', ''))) + '%'

		IF (@query_string = '%%') AND																--0010
			((NOT ISNULL(@last_name, '') = '') AND (NOT ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.last_name, '.', ''), ' ', ''))) LIKE @last_name) AND 
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.first_name, '.', ''), ' ', ''))) LIKE @first_name)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (@query_string = '%%') AND																--0011
			((NOT ISNULL(@last_name, '') = '') AND (NOT ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN ums.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.last_name, '.', ''), ' ', ''))) LIKE @last_name) AND 
				(RTRIM(LTRIM(REPLACE(REPLACE(pri.first_name, '.', ''), ' ', ''))) LIKE @first_name) AND
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (NOT ISNULL(@query_string, '') = '%*%') AND				--1000
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			WHERE
				(pri.last_name LIKE @query_string) OR (pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (NOT ISNULL(@query_string, '') = '%*%') AND				--1001
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN ums.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				((pri.last_name LIKE @query_string) OR (pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string)  OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (ISNULL(@query_string, '') = '%*%') AND					--1100
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			ORDER BY
				last_name, first_name, middle_name ASC

		END
		ELSE IF (NOT @query_string = '%%') AND (ISNULL(@query_string, '') = '%*%') AND					--1101
			((ISNULL(@last_name, '') = '') AND (ISNULL(@first_name, '') = '')) AND
			(NOT ISNULL(@sysid_person_exclude_list, '') = '')
		BEGIN

			SELECT
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.birthdate AS birthdate,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,				

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description
				
			FROM
				ums.person_information AS pri
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
			LEFT JOIN ums.IterateListToTable (@sysid_person_exclude_list, ',') AS spel_list ON spel_list.var_str = pri.sysid_person
			WHERE
				(spel_list.var_str IS NULL)
			ORDER BY
				last_name, first_name, middle_name ASC

		END

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectPersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDPersonInformation')
   DROP PROCEDURE ums.SelectBySysIDPersonInformation
GO

CREATE PROCEDURE ums.SelectBySysIDPersonInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT			
			pri.sysid_person AS sysid_person,
			pri.e_code AS e_code,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.place_birth AS place_birth,
			pri.email_address AS email_address,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,
			pri.citizenship AS citizenship,
			pri.nationality AS nationality,
			pri.religion AS religion,			
			pri.marriage_date AS marriage_date,
			pri.other_person_information AS other_person_information,
			pmg.original_name AS original_name,
			
--			pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

--			pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

--			pri.marital_status_code
			crf_marital_status_code.code_reference_id AS marital_status_code_code_reference_id,
			crf_marital_status_code.code_entity_id AS marital_status_code_code_entity_id,
			crf_marital_status_code.reference_code AS marital_status_code_reference_code,
			crf_marital_status_code.code_description AS marital_status_code_code_description

		FROM
			ums.person_information AS pri				
		LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = pri.sysid_person		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		LEFT JOIN ums.code_reference AS crf_marital_status_code ON crf_marital_status_code.code_reference_id = pri.marital_status_code
		WHERE
			(pri.sysid_person = @sysid_person)

	END
	ELSE IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT			
			pri.sysid_person AS sysid_person,
			NULL AS e_code,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.place_birth AS place_birth,
			pri.email_address AS email_address,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,
			pri.citizenship AS citizenship,
			pri.nationality AS nationality,
			pri.religion AS religion,			
			pri.marriage_date AS marriage_date,
			pri.other_person_information AS other_person_information,
			pmg.original_name AS original_name,
			
--			pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

--			pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

--			pri.marital_status_code
			crf_marital_status_code.code_reference_id AS marital_status_code_code_reference_id,
			crf_marital_status_code.code_entity_id AS marital_status_code_code_entity_id,
			crf_marital_status_code.reference_code AS marital_status_code_reference_code,
			crf_marital_status_code.code_description AS marital_status_code_code_description

		FROM
			ums.person_information AS pri				
		LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = pri.sysid_person		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		LEFT JOIN ums.code_reference AS crf_marital_status_code ON crf_marital_status_code.code_reference_id = pri.marital_status_code
		WHERE
			(pri.sysid_person = @sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query person information', 'Person Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDPersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectCountPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectCountPersonInformation')
   DROP PROCEDURE ums.SelectCountPersonInformation
GO

CREATE PROCEDURE ums.SelectCountPersonInformation

	@system_user_id varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT 
			COUNT(pri.sysid_person) 
		FROM 
			ums.person_information AS pri

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectCountPersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsSysIDPersonInformation')
   DROP PROCEDURE ums.IsExistsSysIDPersonInformation
GO

CREATE PROCEDURE ums.IsExistsSysIDPersonInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT ums.IsExistsSysIDPersonInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsSysIDPersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonStudentEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsSysIDPersonStudentEmployeeInformation')
   DROP PROCEDURE ums.IsExistsSysIDPersonStudentEmployeeInformation
GO

CREATE PROCEDURE ums.IsExistsSysIDPersonStudentEmployeeInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT ums.IsExistsSysIDPersonStudentEmployeeInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsSysIDPersonStudentEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDPersonEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsSysIDPersonEmployeeInformation')
   DROP PROCEDURE ums.IsExistsSysIDPersonEmployeeInformation
GO

CREATE PROCEDURE ums.IsExistsSysIDPersonEmployeeInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT ums.IsExistsSysIDPersonEmployeeInfo(@sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsSysIDPersonEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsSysIDPersonInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsSysIDPersonInfo
GO

CREATE FUNCTION ums.IsExistsSysIDPersonInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_person FROM ums.person_information WHERE sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonStudentEmployeeInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsSysIDPersonStudentEmployeeInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsSysIDPersonStudentEmployeeInfo
GO

CREATE FUNCTION ums.IsExistsSysIDPersonStudentEmployeeInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT 
					sysid_person 
				FROM 
					ums.employee_information 
				WHERE 
					sysid_person = @sysid_person
				UNION ALL
				SELECT 
					sysid_person 
				FROM 
					ums.student_information 
				WHERE 
					sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsSysIDPersonEmployeeInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsSysIDPersonEmployeeInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsSysIDPersonEmployeeInfo
GO

CREATE FUNCTION ums.IsExistsSysIDPersonEmployeeInfo
(	
	@sysid_person varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT 
					sysid_person 
				FROM 
					ums.employee_information 
				WHERE 
					sysid_person = @sysid_person)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- ################################################END TABLE "person_information" OBJECTS######################################################




-- ##########################################TABLE "person_image" OBJECTS########################################################

-- verifies if the person_image table exists
IF OBJECT_ID('ums.person_image', 'U') IS NOT NULL
	DROP TABLE ums.person_image
GO

CREATE TABLE ums.person_image 			
(
	image_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Image_Image_ID_PK PRIMARY KEY (image_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Image_SysID_Person_FK FOREIGN KEY REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Image_SysID_Person_UQ UNIQUE (sysid_person),
	
	file_data varbinary (MAX) NULL,
	original_name varchar (255) NULL
		CONSTRAINT Person_Image_Original_Name_UQ UNIQUE (original_name),

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Image_Created_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Image_Edited_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Image_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_image table 
CREATE INDEX Person_Image_Image_ID_Index
	ON ums.person_image (image_id ASC)
GO
------------------------------------------------------------------

/*verifies that the trigger "Person_Image_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Person_Image_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Image_Trigger_Insert
GO

CREATE TRIGGER ums.Person_Image_Trigger_Insert
	ON  ums.person_image
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @image_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @original_name varchar (255)

	DECLARE @created_on datetime
	DECLARE @created_by varchar (50)

	DECLARE @for_employee bit
	DECLARE @for_student bit
	DECLARE @for_login bit
	
	SELECT 
		@image_id = i.image_id,
		@sysid_person = i.sysid_person,
		@original_name = i.original_name,

		@for_employee = pri.for_employee,
		@for_student = pri.for_student,
		@for_login = pri.for_login,

		@created_on = i.created_on,
		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.person_information AS pri ON pri.sysid_person = i.sysid_person

	IF (@for_employee = 1) AND
		(EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED an employee image ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Person Image ID: ' + ISNULL(CONVERT(varchar, @image_id), '') +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information WHERE sysid_person = @sysid_person), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Image Original FileName: ' + ISNULL(@original_name, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE IF (@for_student = 1) AND
		(EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED a student image ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Person Image ID: ' + ISNULL(CONVERT(varchar, @image_id), '') +
								'][Student ID: ' + ISNULL((SELECT student_id FROM ums.student_information WHERE sysid_person = @sysid_person), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Image Original FileName: ' + ISNULL(@original_name, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE IF (@for_login = 1) AND
		(EXISTS (SELECT system_user_id FROM ums.system_user_info WHERE sysid_person = @sysid_person))
	BEGIN

		SET @transaction_done = 'CREATED a system user image ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Person Image ID: ' + ISNULL(CONVERT(varchar, @image_id), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Image Original FileName: ' + ISNULL(@original_name, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

	END
	ELSE
	BEGIN

		SET @transaction_done = 'CREATED a person image ' + 
								'[Person System ID: ' + ISNULL(@sysid_person, '') + 
								'][Person Image ID: ' + ISNULL(CONVERT(varchar, @image_id), '') +
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE 
															pri.sysid_person = @sysid_person), '') +
								'][Image Original FileName: ' + ISNULL(@original_name, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

	END

GO
/*-----------------------------------------------------------------*/

-- verifies if the procedure "InsertUpdatePersonImage" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertUpdatePersonImage')
   DROP PROCEDURE ums.InsertUpdatePersonImage
GO

CREATE PROCEDURE ums.InsertUpdatePersonImage
	
	@sysid_person varchar (50) = '',

	@file_data varbinary (MAX),
	@original_name varchar (255) = '',

	@network_information varchar (MAX) = '',
	@system_user_id varchar (50) = ''

AS

	DECLARE @transaction_done varchar(MAX)

	DECLARE @image_id bigint

	DECLARE @for_employee bit
	DECLARE @for_student bit
	DECLARE @for_login bit

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsIDMakerSystemUserInfo(@system_user_id) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @system_user_id, @network_information

		IF (NOT EXISTS (SELECT image_id FROM ums.person_image WHERE (sysid_person = @sysid_person)))
		BEGIN

			INSERT INTO ums.person_image
			(
				sysid_person,

				file_data,
				original_name,

				created_by
			)
			VALUES
			(
				@sysid_person,

				@file_data,
				@original_name,

				@system_user_id
			)

		END
		ELSE
		BEGIN

			SELECT 
				@for_employee = pri.for_employee,
				@for_student = pri.for_student,
				@for_login = pri.for_login
			FROM
				ums.person_information AS pri
			WHERE 
				pri.sysid_person = @sysid_person			

			IF (NOT @file_data = (SELECT file_data FROM ums.person_image WHERE sysid_person = @sysid_person))
			BEGIN

				UPDATE ums.person_image SET
					file_data = @file_data,
					original_name = @original_name,

					edited_on = GETDATE(),
					edited_by = @system_user_id
				WHERE
					(sysid_person = @sysid_person)
							
				IF (@for_employee = 1) AND
					(EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_person = @sysid_person))
				BEGIN

					SET @transaction_done = 'UPDATED an employee image ' + 
											'[Person System ID: ' + ISNULL(@sysid_person, '') + 
											'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information WHERE sysid_person = @sysid_person), '') + 
											'][Name: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE 
																		pri.sysid_person = @sysid_person), '') +						
											']'

					IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
					BEGIN
						SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
					END
							
					EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done

				END
				ELSE IF (@for_student = 1) AND
					(EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_person = @sysid_person))
				BEGIN

					SET @transaction_done = 'UPDATED a student image ' + 
											'[Person System ID: ' + ISNULL(@sysid_person, '') + 
											'][Student ID: ' + ISNULL((SELECT student_id FROM ums.student_information WHERE sysid_person = @sysid_person), '') +
											'][Name: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE 
																		pri.sysid_person = @sysid_person), '') +
											']'

					IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
					BEGIN
						SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
					END
							
					EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done

				END
				ELSE IF (@for_login = 1) AND
					(EXISTS (SELECT system_user_id FROM ums.system_user_info WHERE sysid_person = @sysid_person))
				BEGIN

					SET @transaction_done = 'UPDATED a system user image ' + 
											'[Person System ID: ' + ISNULL(@sysid_person, '') + 
											'][Name: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE 
																		pri.sysid_person = @sysid_person), '') +
											']'

					IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
					BEGIN
						SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
					END
							
					EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done

				END
				ELSE
				BEGIN

					SET @transaction_done = 'UPDATED a person image ' + 
											'[Person System ID: ' + ISNULL(@sysid_person, '') + 
											'][Name: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE 
																		pri.sysid_person = @sysid_person), '') +
											']'

					IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
					BEGIN
						SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
					END
							
					EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done

				END

			END

		END

	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Insert/Update a person image', 'Person Image'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertUpdatePersonImage TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectPersonImagesPersonInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectPersonImagesPersonInformation')
   DROP PROCEDURE ums.SelectPersonImagesPersonInformation
GO

CREATE PROCEDURE ums.SelectPersonImagesPersonInformation

	@sysid_person_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''

AS

	IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT 
			pmg.sysid_person AS sysid_person,
			pmg.file_data AS file_data,
			pmg.original_name AS original_name
		FROM 
			ums.person_image AS pmg
		INNER JOIN ums.IterateListToTable (@sysid_person_list, ',') AS sp_list ON sp_list.var_str = pmg.sysid_person
		WHERE
			(NOT pmg.file_data IS NULL) AND
			(NOT pmg.original_name IS NULL)
		ORDER BY
			pmg.sysid_person ASC

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a person information', 'Person Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectPersonImagesPersonInformation TO db_umsusers
GO
-------------------------------------------------------------

-- ##########################################END TABLE "person_image" OBJECTS########################################################






-- ################################################TABLE "relationship_type" OBJECTS######################################################
-- verifies if the relationship_type table existss
IF OBJECT_ID('ums.relationship_type', 'U') IS NOT NULL
	DROP TABLE ums.relationship_type
GO

CREATE TABLE ums.relationship_type 			
(
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Relationship_Type_Relationship_Type_ID_PK PRIMARY KEY (relationship_type_id)
		CONSTRAINT Relationship_Type_Relationship_Type_ID_CK CHECK (relationship_type_id LIKE 'RTID%'),
	relationship_description varchar (100) NOT NULL
		CONSTRAINT Relationship_Type_Relationship_Description_UQ UNIQUE (relationship_description),
	
	is_parent bit NOT NULL DEFAULT (0),
	is_spouse bit NOT NULL DEFAULT (0),
	is_sibling bit NOT NULL DEFAULT (0),
	is_in_law bit NOT NULL DEFAULT (0),
	is_blood_line bit NOT NULL DEFAULT (0),
	is_friend bit NOT NULL DEFAULT (0),

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Relationship_Type_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
--------------------------------------------------------

-- create an index of the relationship_type table 
CREATE INDEX Relationship_Type_Relationship_Type_ID_Index
	ON ums.relationship_type (relationship_type_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Relationship_Type_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Relationship_Type_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Relationship_Type_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Relationship_Type_Trigger_Instead_Update
	ON  ums.relationship_type
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Update a relationship type', 'Relationship Type'
	
GO
-------------------------------------------------------------------------

-- verifies that the trigger "Relationship_Type_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Relationship_Type_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Relationship_Type_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Relationship_Type_Trigger_Instead_Delete
	ON  ums.relationship_type
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a relationship type', 'Relationship Type'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "SelectRelationshipType" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectRelationshipType')
   DROP PROCEDURE ums.SelectRelationshipType
GO

CREATE PROCEDURE ums.SelectRelationshipType
	
	@system_user_id varchar(50) = ''
	
AS

	IF ums.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN
		
		SELECT
			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend			
		FROM
			ums.relationship_type AS rpt
		ORDER BY
			relationship_description ASC

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a relationship type', 'Relationship Type'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectRelationshipType TO db_umsusers
GO
-------------------------------------------------------------

-- ################################################END TABLE "relationship_type" OBJECTS###################################################






-- ##########################################TABLE "person_relationship_information" OBJECTS########################################################

-- verifies if the person_relationship_information table exists
IF OBJECT_ID('ums.person_relationship_information', 'U') IS NOT NULL
	DROP TABLE ums.person_relationship_information
GO

CREATE TABLE ums.person_relationship_information 			
(
	relationship_id bigint NOT NULL IDENTITY (1, 1) NOT FOR REPLICATION
		CONSTRAINT Person_Relationship_Information_Relationship_ID_PK PRIMARY KEY (relationship_id),
	sysid_person varchar (50) NOT NULL 
		CONSTRAINT Person_Relationship_Information_SysID_Person_FK FOREIGN KEY REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Relationship_Information_SysID_Person_UQ UNIQUE (sysid_person, in_relationship_with_sysid_person),
	in_relationship_with_sysid_person varchar (50) NOT NULL
		CONSTRAINT Person_Relationship_Information_In_Relationship_With_SysID_Person_FK FOREIGN KEY REFERENCES ums.person_information(sysid_person) ON UPDATE NO ACTION
		CONSTRAINT Person_Relationship_Information_In_Relationship_With_SysID_Person_UQ UNIQUE (in_relationship_with_sysid_person, sysid_person),
	relationship_type_id varchar (50) NOT NULL
		CONSTRAINT Person_Relationship_Information_Relationship_Type_ID_FK FOREIGN KEY REFERENCES ums.relationship_type(relationship_type_id) ON UPDATE NO ACTION,

	is_emergency_contact bit NOT NULL DEFAULT (0),	

	created_on datetime NOT NULL DEFAULT (GETDATE()),
	created_by varchar (50) NOT NULL
		CONSTRAINT Person_Relationship_Information_Created_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,
	edited_on datetime NULL,
	edited_by varchar (50) NULL	
		CONSTRAINT Person_Relationship_Information_Edited_By_FK FOREIGN KEY REFERENCES ums.system_user_info(system_user_id) ON UPDATE NO ACTION,

	unique_id uniqueidentifier ROWGUIDCOL NOT NULL DEFAULT NEWSEQUENTIALID()
		CONSTRAINT Person_Relationship_Information_Unique_ID_UQ UNIQUE (unique_id)
	
) ON [PRIMARY]
GO
------------------------------------------------------------------

-- create an index of the person_relationship_information table 
CREATE INDEX Person_Relationship_Information_Relationship_ID_Index
	ON ums.person_relationship_information (relationship_id ASC)
GO
------------------------------------------------------------------

-- verifies that the trigger "Person_Relationship_Information_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Person_Relationship_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Relationship_Information_Trigger_Insert
GO
		
CREATE TRIGGER ums.Person_Relationship_Information_Trigger_Insert
	ON  ums.person_relationship_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @relationship_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_emergency_contact bit
	
	DECLARE @created_by varchar (50)
	
	DECLARE @emergency_contact varchar (20)
	
	SELECT 
		@relationship_id = i.relationship_id,
		@sysid_person = i.sysid_person,
		@in_relationship_with_sysid_person = i.in_relationship_with_sysid_person,
		@relationship_type_id = i.relationship_type_id,
		@is_emergency_contact = i.is_emergency_contact,

		@created_by = i.created_by		
	FROM INSERTED AS i

	IF (@is_emergency_contact = 1)
	BEGIN
		SET @emergency_contact = 'YES'
	END
	ELSE
	BEGIN
		SET @emergency_contact = 'NO'
	END

	SET @transaction_done = 'CREATED a person relationship information ' +		
							'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
							'][Student ID: ' + ISNULL((SELECT
															sti.student_id
														FROM
															ums.student_information AS sti
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															epi.employee_id
														FROM
															ums.employee_information AS epi
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Person Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') + 
							'][In Relationship With: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE
																		(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
							'][Relationship Type: ' + ISNULL((SELECT
																	rpt.relationship_description
																FROM
																	ums.relationship_type AS rpt
																WHERE
																	(rpt.relationship_type_id = @relationship_type_id)), '') +
							'][Is Emergency Contact: ' + ISNULL(@emergency_contact, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "Person_Relationship_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Person_Relationship_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Relationship_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Person_Relationship_Information_Trigger_Instead_Update
	ON  ums.person_relationship_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @relationship_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_emergency_contact bit

	DECLARE @edited_by varchar(50)

	DECLARE @relationship_type_id_b varchar (50)
	DECLARE @is_emergency_contact_b bit
	
	DECLARE @emergency_contact varchar(20)
	DECLARE @emergency_contact_b varchar(20)

	DECLARE @has_update bit

	DECLARE person_relationship_information_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.relationship_id, i.sysid_person, i.in_relationship_with_sysid_person, i.relationship_type_id,
					i.is_emergency_contact, i.edited_by
				FROM INSERTED AS i

	OPEN person_relationship_information_update_cursor

	FETCH NEXT FROM person_relationship_information_update_cursor
		INTO @relationship_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
				@is_emergency_contact, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@relationship_type_id_b = ppi.relationship_type_id,
			@is_emergency_contact_b = ppi.is_emergency_contact
		FROM 
			ums.person_relationship_information AS ppi
		WHERE
			ppi.relationship_id = @relationship_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@relationship_type_id, '') = ISNULL(@relationship_type_id_b, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type Before: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									ums.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id_b)), '') + ']' +
														'[Relationship Type After: ' + ISNULL((SELECT
																									rpt.relationship_description
																								FROM
																									ums.relationship_type AS rpt
																								WHERE
																									(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Relationship Type: ' + ISNULL((SELECT
																								rpt.relationship_description
																							FROM
																								ums.relationship_type AS rpt
																							WHERE
																								(rpt.relationship_type_id = @relationship_type_id)), '') + ']'
		END

		IF (NOT @is_emergency_contact = @is_emergency_contact_b)
		BEGIN

			IF (@is_emergency_contact_b = 1)
			BEGIN
				SET @emergency_contact_b = 'YES'
			END
			ELSE
			BEGIN
				SET @emergency_contact_b = 'NO'
			END

			IF (@is_emergency_contact = 1)
			BEGIN
				SET @emergency_contact = 'YES'
			END
			ELSE
			BEGIN
				SET @emergency_contact = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Emergency Contact Before: ' + ISNULL(@emergency_contact_b, '') + ']' +
														'[Is Emergency Contact After: ' + ISNULL(@emergency_contact, '') + ']'
			SET @has_update = 1

		END

		IF (@has_update = 1)
		BEGIN

			UPDATE ums.person_relationship_information SET
				relationship_type_id = @relationship_type_id,
				is_emergency_contact = @is_emergency_contact,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				relationship_id = @relationship_id

			SET @transaction_done = 'UPDATED a person relationship information ' +
									'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
									'][Student ID: ' + ISNULL((SELECT
																	sti.student_id
																FROM
																	ums.student_information AS sti
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Employee ID: ' + ISNULL((SELECT
																	epi.employee_id
																FROM
																	ums.employee_information AS epi
																WHERE
																	(sysid_person = @sysid_person)), '') +
									'][Person Name: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	ums.person_information AS pri
																WHERE
																	(pri.sysid_person = @sysid_person)), '') + 
									'][In Relationship With: ' + ISNULL((SELECT
																				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																			FROM
																				ums.person_information AS pri
																			WHERE
																				(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END

			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.person_relationship_information SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				(relationship_id = @relationship_id)

		END
		
		FETCH NEXT FROM person_relationship_information_update_cursor
			INTO @relationship_id, @sysid_person, @in_relationship_with_sysid_person, @relationship_type_id,
					@is_emergency_contact, @edited_by

	END

	CLOSE person_relationship_information_update_cursor
	DEALLOCATE person_relationship_information_update_cursor

GO
---------------------------------------------------------------------

--verifies that the trigger "Person_Relationship_Information_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Person_Relationship_Information_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Person_Relationship_Information_Trigger_Delete
GO

CREATE TRIGGER ums.Person_Relationship_Information_Trigger_Delete
	ON  ums.person_relationship_information
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @relationship_id bigint
	DECLARE @sysid_person varchar (50)
	DECLARE @in_relationship_with_sysid_person varchar (50)
	DECLARE @relationship_type_id varchar (50)
	DECLARE @is_emergency_contact bit

	DECLARE @deleted_by varchar (50)

	DECLARE @emergency_contact varchar (20)

	SELECT 
		@relationship_id = d.relationship_id,
		@sysid_person = d.sysid_person,
		@in_relationship_with_sysid_person = d.in_relationship_with_sysid_person,
		@relationship_type_id = d.relationship_type_id,
		@is_emergency_contact = d.is_emergency_contact,

		@deleted_by = d.created_by		
	FROM DELETED AS d

	IF (@is_emergency_contact = 1)
	BEGIN
		SET @emergency_contact = 'YES'
	END
	ELSE
	BEGIN
		SET @emergency_contact = 'NO'
	END

	SET @transaction_done = 'DELETED a person relationship information ' +		
							'[Relationship ID: ' + ISNULL(CONVERT(varchar, @relationship_id), '') +	
							'][Student ID: ' + ISNULL((SELECT
															sti.student_id
														FROM
															ums.student_information AS sti
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Employee ID: ' + ISNULL((SELECT
															epi.employee_id
														FROM
															ums.employee_information AS epi
														WHERE
															(sysid_person = @sysid_person)), '') +
							'][Person Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') + 
							'][In Relationship With: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	WHERE
																		(pri.sysid_person = @in_relationship_with_sysid_person)), '') + 
							'][Relationship Type: ' + ISNULL((SELECT
																	rpt.relationship_description
																FROM
																	ums.relationship_type AS rpt
																WHERE
																	(rpt.relationship_type_id = @relationship_type_id)), '') +
							'][Is Emergency Contact: ' + ISNULL(@emergency_contact, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END

	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done

GO
-----------------------------------------------------------------

-- verifies if the procedure "InsertPersonRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertPersonRelationshipInformation')
   DROP PROCEDURE ums.InsertPersonRelationshipInformation
GO

CREATE PROCEDURE ums.InsertPersonRelationshipInformation
	
	@sysid_person varchar (50) = '',
	@in_relationship_with_sysid_person varchar (50) = '',
	@relationship_type_id varchar (50) = '',
	@is_emergency_contact bit = 0,

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@created_by) = 1) OR
		(ums.IsCashierSystemUserInfo(@created_by) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@created_by) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@created_by) = 1) OR	 --does not include the verification if the person is a student or an employee
		(ums.IsPayrollMasterSystemUserInfo(@created_by) = 1)			 --because in the client side, the inserting of a new student or employee
	BEGIN																 --is done after the person relationship is inserted.			

		EXECUTE ums.CreateTemporaryTable @created_by, @network_information

		IF (@is_emergency_contact = 1)
		BEGIN

			UPDATE ums.person_relationship_information SET 
				is_emergency_contact = 0, 
				edited_by = @created_by
			WHERE
				sysid_person = @sysid_person

		END

		INSERT INTO ums.person_relationship_information
		(
			sysid_person,
			in_relationship_with_sysid_person,
			relationship_type_id,
			is_emergency_contact,

			created_by
		)
		VALUES
		(
			@sysid_person,
			@in_relationship_with_sysid_person,
			@relationship_type_id,
			@is_emergency_contact,

			@created_by
		)

	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Insert a person relationship information', 'Person Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertPersonRelationshipInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdatePersonRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdatePersonRelationshipInformation')
   DROP PROCEDURE ums.UpdatePersonRelationshipInformation
GO

CREATE PROCEDURE ums.UpdatePersonRelationshipInformation
	
	@relationship_id bigint = 0,
	@relationship_type_id varchar (50) = '',
	@is_emergency_contact bit = 0,

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(ums.IsCashierSystemUserInfo(@edited_by) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@edited_by) = 1) OR
		((ums.IsStudentDataControllerSystemUserInfo(@edited_by) = 1) AND 
		(EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_person = 
			(SELECT sysid_person FROM ums.person_relationship_information WHERE relationship_id = @relationship_id)))) OR
		((ums.IsPayrollMasterSystemUserInfo(@edited_by) = 1) AND
		(EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_person = 
			(SELECT sysid_person FROM ums.person_relationship_information WHERE relationship_id = @relationship_id))))
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		IF (@is_emergency_contact = 1)
		BEGIN

			UPDATE ums.person_relationship_information SET 
				is_emergency_contact = 0, 
				edited_by = @edited_by
			WHERE
				(sysid_person = (SELECT sysid_person FROM ums.person_relationship_information WHERE relationship_id = @relationship_id)) AND
				(NOT relationship_id = @relationship_id)

		END
		
		UPDATE ums.person_relationship_information SET
			relationship_type_id = @relationship_type_id,
			is_emergency_contact = @is_emergency_contact,

			edited_by = @edited_by
		WHERE
			(relationship_id = @relationship_id)

	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Update a person relationship information', 'Person Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdatePersonRelationshipInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "DeletePersonRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'DeletePersonRelationshipInformation')
   DROP PROCEDURE ums.DeletePersonRelationshipInformation
GO

CREATE PROCEDURE ums.DeletePersonRelationshipInformation
	
	@relationship_id bigint = 0,

	@network_information varchar (MAX) = '',
	@deleted_by varchar (50) = ''

AS

	IF (ums.IsSystemAdminSystemUserInfo(@deleted_by) = 1) OR
		(ums.IsCashierSystemUserInfo(@deleted_by) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@deleted_by) = 1) OR
		((ums.IsStudentDataControllerSystemUserInfo(@deleted_by) = 1) AND 
		(EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_person = 
			(SELECT sysid_person FROM ums.person_relationship_information WHERE relationship_id = @relationship_id)))) OR
		((ums.IsPayrollMasterSystemUserInfo(@deleted_by) = 1) AND
		(EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_person = 
			(SELECT sysid_person FROM ums.person_relationship_information WHERE relationship_id = @relationship_id))))
	BEGIN

		IF EXISTS (SELECT relationship_id FROM ums.person_relationship_information WHERE relationship_id = @relationship_id)
		BEGIN

			EXECUTE ums.CreateTemporaryTable @deleted_by, @network_information

			UPDATE ums.person_relationship_information SET
				edited_by = @deleted_by
			WHERE
				relationship_id = @relationship_id

			DELETE FROM ums.person_relationship_information WHERE relationship_id = @relationship_id

		END

	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Delete a person relationship information', 'Person Relationship Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.DeletePersonRelationshipInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonRelationshipInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDPersonRelationshipInformation')
   DROP PROCEDURE ums.SelectBySysIDPersonRelationshipInformation
GO

CREATE PROCEDURE ums.SelectBySysIDPersonRelationshipInformation
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.birthdate AS birthdate,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,				

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			ppi.relationship_id AS relationship_id,
			ppi.is_emergency_contact AS is_emergency_contact,

			rpt.relationship_type_id AS relationship_type_id,
			rpt.relationship_description AS relationship_description,
			rpt.is_parent AS is_parent,
			rpt.is_spouse AS is_spouse,
			rpt.is_sibling AS is_sibling,
			rpt.is_in_law AS is_in_law,
			rpt.is_blood_line AS is_blood_line,
			rpt.is_friend AS is_friend
			
		FROM
			ums.person_relationship_information AS ppi
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ppi.in_relationship_with_sysid_person
		INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		WHERE
			(ppi.sysid_person = @sysid_person)
		ORDER BY
			last_name, first_name, middle_name ASC

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query person relationship information', 'Person Relationship Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDPersonRelationshipInformation TO db_umsusers
GO
-------------------------------------------------------------


-- ##########################################END TABLE "person_relationship_information" OBJECTS########################################################







-- ################################################TABLE "system_user_info" OBJECTS######################################################

-- verifies that the trigger "System_User_Info_Trigger_Insert" already exist
IF OBJECT_ID ('ums.System_User_Info_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.System_User_Info_Trigger_Insert
GO
		
CREATE TRIGGER ums.System_User_Info_Trigger_Insert
	ON  ums.system_user_info
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @e_code varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @other_person_information varchar (MAX)

	DECLARE @system_user_id varchar (50)
	DECLARE @system_user_name varchar (50)
	DECLARE @system_user_password varchar (50)
	DECLARE @system_user_status bit	
	
	DECLARE @created_by varchar (50)
	
	DECLARE @status varchar (20)
	
	SELECT 
		@sysid_person = pri.sysid_person,
		@e_code = pri.e_code,
		@last_name = pri.last_name,
		@first_name = pri.first_name,
		@middle_name = pri.middle_name,
		@life_status_code = pri.life_status_code,
		@gender_code = pri.gender_code,
		@birthdate = pri.birthdate,
		@place_birth = pri.place_birth,
		@email_address = pri.email_address,
		@present_address = pri.present_address,
		@present_phone_nos = pri.present_phone_nos,
		@home_address = pri.home_address,
		@home_phone_nos = pri.home_phone_nos,
		@citizenship = pri.citizenship,
		@nationality = pri.nationality,
		@religion = pri.religion,
		@marital_status_code = pri.marital_status_code,
		@marriage_date = pri.marriage_date,
		@other_person_information = pri.other_person_information,

		@system_user_id = i.system_user_id,
		@system_user_name = i.system_user_name,
		@system_user_password = i.system_user_password,
		@system_user_status = i.system_user_status,

		@created_by = i.created_by		
	FROM INSERTED AS i
	INNER JOIN ums.person_information AS pri ON pri.sysid_person = i.sysid_person

	IF (@system_user_status = 1)
	BEGIN
		SET @status = 'ACCESS GRANT'
	END
	ELSE
	BEGIN
		SET @status = 'ACCESS DENIED'
	END

	SET @transaction_done = 'CREATED a system user information ' +		
							'[System User ID: ' + ISNULL(@system_user_id, '') +				
							'][Person System ID: ' + ISNULL(@sysid_person, '') +
							'][E-Code: ' + ISNULL(@e_code, '') +
							'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
							'][Life Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @life_status_code), '') +
							'][Gender: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @gender_code), '') +
							'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
							'][Place of Birth: ' + ISNULL(@place_birth, '') +
							'][Email Address: ' + ISNULL(@email_address, '') +
							'][Present Address: ' + ISNULL(@present_address, '') +
							'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
							'][Home Address: ' + ISNULL(@home_address, '') +
							'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
							'][Citizenship: ' + ISNULL(@citizenship, '') +
							'][Nationality: ' + ISNULL(@nationality, '') +
							'][Religion: ' + ISNULL(@religion, '') +
							'][Marital Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @marital_status_code), '') +
							'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
							'][Other Person Information: ' + ISNULL(@other_person_information, '') +
							'][User Name: ' + ISNULL(@system_user_name, '') + 
							'][Password: ' + ISNULL(@system_user_password, '') +
							'][Status: ' + ISNULL(@status, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- verifies that the trigger "System_User_Info_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.System_User_Info_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.System_User_Info_Trigger_Instead_Update
GO

CREATE TRIGGER ums.System_User_Info_Trigger_Instead_Update
	ON  ums.system_user_info
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @system_user_id varchar (50)
	DECLARE @system_user_name varchar (50)
	DECLARE @system_user_password varchar (50)
	DECLARE @system_user_status bit
	DECLARE @sysid_person varchar (50)

	DECLARE @edited_by varchar(50)

	DECLARE @system_user_name_b varchar (50)
	DECLARE @system_user_password_b varchar (50)
	DECLARE @system_user_status_b bit
	
	DECLARE @status varchar(20)
	DECLARE @status_b varchar(20)

	DECLARE @has_update bit
	
	SELECT 
		@system_user_id = i.system_user_id,
		@system_user_name = i.system_user_name,
		@system_user_password = i.system_user_password,
		@system_user_status = i.system_user_status,
		@sysid_person = i.sysid_person,
		@edited_by = i.edited_by		
	FROM INSERTED AS i

	SELECT 
		@system_user_name_b = sui.system_user_name,
		@system_user_password_b = sui.system_user_password,
		@system_user_status_b = sui.system_user_status
	FROM 
		ums.system_user_info AS sui
	WHERE
		sui.system_user_id = @system_user_id

	SET @transaction_done = ''
	SET @has_update = 0

	IF (NOT ISNULL(@system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@system_user_name_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[User Name Before: ' + ISNULL(@system_user_name_b, '') + ']' +
													'[User Name After: ' + ISNULL(@system_user_name, '') + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[User Name: ' + ISNULL(@system_user_name, '') + ']'
	END

	IF (NOT ISNULL(@system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@system_user_password_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[Password Before: ' + ISNULL(@system_user_password_b, '') + ']' +
													'[Password After: ' + ISNULL(@system_user_password, '') + ']'
		SET @has_update = 1
	END

	IF (NOT @system_user_status = @system_user_status_b)
	BEGIN

		IF (@system_user_status_b = 1)
		BEGIN
			SET @status_b = 'ACCESS GRANT'
		END
		ELSE
		BEGIN
			SET @status_b = 'ACCESS DENIED'
		END

		IF (@system_user_status = 1)
		BEGIN
			SET @status = 'ACCESS GRANT'
		END
		ELSE
		BEGIN
			SET @status = 'ACCESS DENIED'
		END

		SET @transaction_done = @transaction_done + '[Status Before: ' + ISNULL(@status_b, '') + ']' +
													'[Status After: ' + ISNULL(@status, '') + ']'
		SET @has_update = 1

	END

	IF (@has_update = 1)
	BEGIN

		UPDATE ums.system_user_info SET
			system_user_name = @system_user_name,
			system_user_password = @system_user_password,
			system_user_status = @system_user_status,

			edited_on = GETDATE(),
			edited_by = NULL
		WHERE
			system_user_id = @system_user_id

		SET @transaction_done = 'UPDATED a system user information' +
								'[System User ID: ' + ISNULL(@system_user_id, '') +
								'][Personal Name: '+ ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	ums.person_information AS pri
																WHERE 
																	pri.sysid_person = @sysid_person), '') +
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END

		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

	END

GO
---------------------------------------------------------------------

-- verifies that the trigger "System_User_Info_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.System_User_Info_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.System_User_Info_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.System_User_Info_Trigger_Instead_Delete
	ON  ums.system_user_info
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a system user', 'System Users'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertSystemUserInfo')
   DROP PROCEDURE ums.InsertSystemUserInfo
GO

CREATE PROCEDURE ums.InsertSystemUserInfo
	
	@system_user_id varchar (50) = '',
	@system_user_name varchar (50) = '',
	@system_user_password varchar (50) = '',
	@system_user_status bit = 0,
	@sysid_person varchar (50) = '',

	@network_information varchar(MAX) = '',
	@created_by varchar(50)
	
AS

	IF ums.IsSystemAdminSystemUserInfo(@created_by) = 1
	BEGIN

		IF (EXISTS (SELECT sysid_person FROM ums.person_information WHERE sysid_person = @sysid_person) AND
			NOT EXISTS (SELECT sysid_person FROM ums.system_user_info WHERE sysid_person = @sysid_person))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @created_by, @network_information

			INSERT INTO ums.system_user_info
			(
				system_user_id,
				system_user_name,
				system_user_password,
				system_user_status,
				sysid_person,

				created_by
			)
			VALUES
			(
				@system_user_id,
				@system_user_name,
				@system_user_password,
				@system_user_status,
				@sysid_person,

				@created_by
			)

		END

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Insert a system user', 'System Users'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdateSystemUserInfo')
   DROP PROCEDURE ums.UpdateSystemUserInfo
GO

CREATE PROCEDURE ums.UpdateSystemUserInfo
	
	@system_user_id varchar(50) = '',
	@system_user_name varchar(50) = '',
	@system_user_password varchar(50) = '',
	@system_user_status bit = 0,

	@network_information varchar(MAX) = '',
	@edited_by varchar(50)
	
AS

	IF ums.IsSystemAdminSystemUserInfo(@edited_by) = 1
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.system_user_info SET
			system_user_name = @system_user_name,
			system_user_password = @system_user_password,
			system_user_status = @system_user_status,

			edited_by = @edited_by
		WHERE
			(system_user_id = @system_user_id COLLATE SQL_Latin1_General_CP1_CS_AS) AND
			(system_user_id = @system_user_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Update a system user', 'System Users'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdateSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectSystemUserInfo')
   DROP PROCEDURE ums.SelectSystemUserInfo
GO

CREATE PROCEDURE ums.SelectSystemUserInfo
	
	@query_string varchar (50) = '',
	@system_user_id varchar(50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%')
		BEGIN

			SELECT
				sui.system_user_id AS system_user_id,
				sui.system_user_name AS system_user_name,
				sui.system_user_status AS system_user_status,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				ums.GetAccessRightsDepartmentInfoSystemUserInfo(sui.system_user_id) AS access_description,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.system_user_info AS sui
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((sui.system_user_name LIKE @query_string) OR
				(pri.last_name LIKE @query_string) OR
				(pri.first_name LIKE @query_string) OR
				(pri.middle_name LIKE @query_string)) AND
				((NOT sui.system_user_id = '#K8@-+rYz&^s!@N!=|iKk!$H@jM#') AND
				(NOT sui.system_user_id = '#Tuy@i*2sz@kUw-2!us%WBxYzwP#') AND
				(NOT sui.system_user_id = '#W3B@cc3$$at^wf8OqPqzY23:w7#'))
			ORDER BY
				pri.last_name ASC, pri.first_name ASC, pri.middle_name ASC, system_user_name ASC

		END
		ELSE
		BEGIN

			SELECT
				sui.system_user_id AS system_user_id,
				sui.system_user_name AS system_user_name,
				sui.system_user_status AS system_user_status,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				ums.GetAccessRightsDepartmentInfoSystemUserInfo(sui.system_user_id) AS access_description,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.system_user_info AS sui
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((NOT sui.system_user_id = '#K8@-+rYz&^s!@N!=|iKk!$H@jM#') AND
				(NOT sui.system_user_id = '#Tuy@i*2sz@kUw-2!us%WBxYzwP#') AND
				(NOT sui.system_user_id = '#W3B@cc3$$at^wf8OqPqzY23:w7#'))
			ORDER BY
				pri.last_name ASC, pri.first_name ASC, pri.middle_name ASC, system_user_name ASC

		END		

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySystemUserIDSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySystemUserIDSystemUserInfo')
   DROP PROCEDURE ums.SelectBySystemUserIDSystemUserInfo
GO

CREATE PROCEDURE ums.SelectBySystemUserIDSystemUserInfo
	
	@retrieve_user_id varchar (50) = '',

	@system_user_id varchar(50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			sui.system_user_id AS system_user_id,
			sui.system_user_name AS system_user_name,
			sui.system_user_password AS system_user_password,
			sui.system_user_status AS system_user_status,
			sui.sysid_person AS sysid_person
		FROM
			ums.system_user_info AS sui
		WHERE
			(sui.system_user_id = @retrieve_user_id COLLATE SQL_Latin1_General_CP1_CS_AS) AND
			(sui.system_user_id = @retrieve_user_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySystemUserIDSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDPersonSystemUserInfo')
   DROP PROCEDURE ums.SelectBySysIDPersonSystemUserInfo
GO

CREATE PROCEDURE ums.SelectBySysIDPersonSystemUserInfo
	
	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT
			sui.system_user_id AS system_user_id
		FROM
			ums.system_user_info AS sui
		WHERE
			(sui.sysid_person = @sysid_person)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDPersonSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectForSystemLogInSystemUserInfo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectForSystemLogInSystemUserInfo')
   DROP PROCEDURE ums.SelectForSystemLogInSystemUserInfo
GO

CREATE PROCEDURE ums.SelectForSystemLogInSystemUserInfo
	
	@system_user_name varchar(50) = '',
	@system_user_password varchar(50) = '',
	@network_information varchar (MAX) = '',

	@is_for_log_in bit = 0

AS
	IF (@is_for_log_in = 1)
	BEGIN

		SELECT 
			sui.system_user_id AS system_user_id,
			sui.system_user_name AS system_user_name,
			sui.system_user_password AS system_user_password,
			sui.system_user_status AS system_user_status,

			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			ums.GetMinDateForSystemUserInfo() AS installation_date
		FROM 
			ums.system_user_info AS sui
		LEFT JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
		WHERE 
			(sui.system_user_name = @system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_password = @system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_name = @system_user_name) AND
			(sui.system_user_password = @system_user_password) AND
			(sui.system_user_status = 1) AND
			(EXISTS (SELECT rights_granted_id FROM ums.access_rights_granted WHERE (system_user_id = sui.system_user_id) AND
													(NOT access_rights = '@Y6eRt#x_iOzP:qs172#4-3V,xe+23f7q9MwqUe@') AND	--not a student
													(NOT access_rights = '@T6&62W9Txw,.*%w9Tq2Uzo93r54Qe&34zAeiY&@') AND	--not ASP.NET
													(NOT access_rights = '@Uy5!xR2zP+nTf5*.GQ`|sR42*2XzMnu72$3p=2@')))		--not an instructor	

	END
	ELSE
	BEGIN

		SELECT 
			sui.system_user_name AS system_user_name
		FROM 
			ums.system_user_info AS sui
		WHERE 
			(sui.system_user_name = @system_user_name COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_password = @system_user_password COLLATE SQL_Latin1_General_CP1_CS_AS) AND 
			(sui.system_user_name = @system_user_name) AND
			(sui.system_user_password = @system_user_password) AND 
			(sui.system_user_status = 1) AND
			(EXISTS (SELECT rights_granted_id FROM ums.access_rights_granted WHERE (system_user_id = sui.system_user_id) AND
													(NOT access_rights = '@Y6eRt#x_iOzP:qs172#4-3V,xe+23f7q9MwqUe@') AND	--not a student
													(NOT access_rights = '@T6&62W9Txw,.*%w9Tq2Uzo93r54Qe&34zAeiY&@') AND	--not ASP.NET
													(NOT access_rights = '@Uy5!xR2zP+nTf5*.GQ`|sR42*2XzMnu72$3p=2@')))		--not an instructor	

	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectForSystemLogInSystemUserInfo TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsIDSystemUserInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsIDSystemUserInformation')
   DROP PROCEDURE ums.IsExistsIDSystemUserInformation
GO

CREATE PROCEDURE ums.IsExistsIDSystemUserInformation
	
	@new_user_id varchar(50) = '',
	@system_user_id varchar(50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.IsExistsIDSystemUserInfo(@new_user_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsIDSystemUserInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsNameSystemUserInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsNameSystemUserInformation')
   DROP PROCEDURE ums.IsExistsNameSystemUserInformation
GO

CREATE PROCEDURE ums.IsExistsNameSystemUserInformation
	
	@check_system_user_id varchar (50) = '',
	@check_system_user_name varchar(50) = '',
	
	@system_user_id varchar(50) = ''
	
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.IsExistsNameSystemUserInfo(@check_system_user_name, @check_system_user_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query system user information', 'System User Information'
	END
	
GO
-------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsNameSystemUserInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistsIDSystemUserInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsIDSystemUserInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsIDSystemUserInfo
GO

CREATE FUNCTION ums.IsExistsIDSystemUserInfo
(	
	@new_user_id varchar(50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0

	IF EXISTS (SELECT system_user_id FROM ums.system_user_info WHERE system_user_id = @new_user_id)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsNameSystemUserInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsNameSystemUserInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsNameSystemUserInfo
GO

CREATE FUNCTION ums.IsExistsNameSystemUserInfo
(	
	@system_user_name varchar(50) = '',
	@system_user_id varchar(50) = ''

)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT 
					system_user_id 
				FROM 
					ums.system_user_info 
				WHERE 
					(NOT system_user_id = @system_user_id) AND
					((REPLACE(system_user_name, ' ', '')) LIKE REPLACE(@system_user_name, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result

END
GO
------------------------------------------------------

-- verifies if the "GetMinDateForSystemUserInfo" function already exist
IF OBJECT_ID (N'ums.GetMinDateForSystemUserInfo') IS NOT NULL
   DROP FUNCTION ums.GetMinDateForSystemUserInfo
GO

CREATE FUNCTION ums.GetMinDateForSystemUserInfo
(	
)
RETURNS datetime
AS
BEGIN
	
	DECLARE @result datetime
	DECLARE @user_datetime datetime
	DECLARE @trans_datetime datetime

	SELECT @user_datetime = MIN(created_on) FROM ums.system_user_info
	SELECT @trans_datetime = MIN(transaction_date) FROM ums.transaction_log
	
	SET @result = NULL

	IF (NOT @user_datetime IS NULL) AND (@user_datetime < ISNULL(@trans_datetime, GETDATE()))
	BEGIN
		SET @result = @user_datetime
	END
	ELSE IF (NOT @trans_datetime IS NULL) AND (@trans_datetime < ISNULL(@user_datetime, GETDATE()))
	BEGIN
		SET @result = @trans_datetime
	END
	
	RETURN @result

END
GO
------------------------------------------------------
-- ##############################################END TABLE "system_user_info" OBJECTS######################################################






-- ################################################TABLE "access_rights_granted" OBJECTS######################################################

-- verifies that the trigger "Access_Rights_Granted_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Access_Rights_Granted_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Access_Rights_Granted_Trigger_Insert
GO
		
CREATE TRIGGER ums.Access_Rights_Granted_Trigger_Insert
	ON  ums.access_rights_granted
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)
	
	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)
	DECLARE @department_id varchar (50)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@rights_granted_id = i.rights_granted_id,
		@system_user_id = i.system_user_id,
		@access_rights = i.access_rights,
		@department_id = i.department_id,
		@created_by = i.created_by		
	FROM INSERTED AS i

	SET @transaction_done = 'GRANT access rights to a system user ' +
							'[Rights Granted ID: ' + ISNULL(CONVERT(varchar, @rights_granted_id), '') +
							'][System User: ' + ISNULL((SELECT 
															'(' + sui.system_user_name + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + 
																	ISNULL(pri.middle_name, '') 
														FROM 
															ums.system_user_info AS sui
														LEFT JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
														WHERE 
															sui.system_user_id = @system_user_id), '') + 
							'][Access Rights: ' + ISNULL((SELECT
																sar.access_description
															FROM
																ums.system_access_rights AS sar
															WHERE
																sar.access_rights = @access_rights), '') +
							'][Department: ' + ISNULL((SELECT
															di.department_name + ' (' + di.acronym + ')'
														FROM
															ums.department_information AS di
														WHERE
															di.department_id = @department_id), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END

	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

/*verifies that the trigger "Access_Rights_Granted_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Access_Rights_Granted_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Access_Rights_Granted_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Access_Rights_Granted_Trigger_Instead_Update
	ON  ums.access_rights_granted
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)
	DECLARE @department_id varchar (50)

	DECLARE @edited_by varchar (50)

	DECLARE @department_id_b varchar (50)

	DECLARE @has_update bit
	
	SELECT 
		@rights_granted_id = i.rights_granted_id,
		@system_user_id = i.system_user_id,
		@access_rights = i.access_rights,
		@department_id = i.department_id,
		@edited_by = i.edited_by		
	FROM INSERTED AS i

	SELECT
		@department_id_b = arg.department_id
	FROM
		ums.access_rights_granted AS arg
	WHERE
		(arg.rights_granted_id = @rights_granted_id) AND
		(arg.system_user_id = @system_user_id)

	SET @transaction_done = ''
	SET @has_update = 0	

	IF (NOT ISNULL(@department_id, '') = ISNULL(@department_id_b, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[Department Before: ' + ISNULL((SELECT
																							di.department_name + ' (' + di.acronym + ')'
																						FROM
																							ums.department_information AS di
																						WHERE
																							di.department_id = @department_id_b), '') + ']' +
													'[Department After: ' + ISNULL((SELECT
																							di.department_name + ' (' + di.acronym + ')'
																						FROM
																							ums.department_information AS di
																						WHERE
																							di.department_id = @department_id), '') + ']'
		SET @has_update = 1
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.access_rights_granted SET
			department_id = @department_id,

			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			(rights_granted_id = @rights_granted_id) AND
			(system_user_id = @system_user_id) AND
			(access_rights = @access_rights)

		SET @transaction_done = 'UPDATE a system user access rights ' +
								'[Rights Granted ID: ' + ISNULL(CONVERT(varchar, @rights_granted_id), '') +
								'][System User: ' + ISNULL((SELECT 
															'(' + sui.system_user_name + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + 
																	ISNULL(pri.middle_name, '') 
														FROM 
															ums.system_user_info AS sui
														LEFT JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
														WHERE 
															sui.system_user_id = @system_user_id), '') + 
								'][Access Rights: ' + ISNULL((SELECT
																	sar.access_description
																FROM
																	ums.system_access_rights AS sar
																WHERE
																	sar.access_rights = @access_rights), '') +
								']' + @transaction_done
								

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

	END
	ELSE IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE ums.access_rights_granted SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			(rights_granted_id = @rights_granted_id) AND
			(system_user_id = @system_user_id) AND
			(access_rights = @access_rights)

	END	

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Access_Rights_Granted_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Access_Rights_Granted_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Access_Rights_Granted_Trigger_Delete
GO
		
CREATE TRIGGER ums.Access_Rights_Granted_Trigger_Delete
	ON  ums.access_rights_granted
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar (MAX)
	
	DECLARE @rights_granted_id bigint
	DECLARE @system_user_id varchar (50)
	DECLARE @access_rights varchar (50)
	DECLARE @department_id varchar (50)

	DECLARE @deleted_by varchar (50)
	
	SELECT 
		@rights_granted_id = d.rights_granted_id,
		@system_user_id = d.system_user_id,
		@access_rights = d.access_rights,
		@department_id = d.department_id,
		@deleted_by = d.edited_by		
	FROM DELETED AS d

	SET @transaction_done = 'EXCLUDE access rights to a system user ' +
							'[Rights Granted ID: ' + ISNULL(CONVERT(varchar, @rights_granted_id), '') +
							'][System User: ' + ISNULL((SELECT 
															'(' + sui.system_user_name + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + 
																	ISNULL(pri.middle_name, '') 
														FROM 
															ums.system_user_info AS sui
														LEFT JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
														WHERE 
															sui.system_user_id = @system_user_id), '') + 
							'][Access Rights: ' + ISNULL((SELECT
																sar.access_description
															FROM
																ums.system_access_rights AS sar
															WHERE
																sar.access_rights = @access_rights), '') +
							'][Department: ' + ISNULL((SELECT
															di.department_name + ' (' + di.acronym + ')'
														FROM
															ums.department_information AS di
														WHERE
															di.department_id = @department_id), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END

	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done

GO
-------------------------------------------------------------------

-- ##############################################END TABLE "access_rights_granted" OBJECTS######################################################







-- ###########################################TABLE "transaction_log" OBJECTS############################################################

-- verifies if the procedure "SelectTransactionLog" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectTransactionLog')
   DROP PROCEDURE ums.SelectTransactionLog
GO

CREATE PROCEDURE ums.SelectTransactionLog

	@query_string varchar (50) = '',
	@user_id varchar (50) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''
		
AS	
	

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1)
	BEGIN

		--	A - query_string (*)
		--	B - user_id
		--	C - date_start date_end

		--	A	B	C
		--	==========
		--	0	0	0
		--	0	0	1
		--	0	1	0
		--	0	1	1
		--	1	0	0
		--	1	0	1
		--	1	1	0
		--	1	1	1

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(000)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(001)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.transaction_date BETWEEN @date_start AND @date_end)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(010)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description, 		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(011)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				((trl.transaction_done LIKE @query_string) OR
				(trl.network_information LIKE @query_string)) AND
				(trl.transaction_date BETWEEN @date_start AND @date_end) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(100)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,	
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (ISNULL(@user_id, '') = '') AND			--(101)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_date BETWEEN @date_start AND @date_end)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(110)
				((@date_start IS NULL) OR (@date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND (NOT ISNULL(@user_id, '') = '') AND			--(111)
				((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			SELECT TOP 16777200
				trl.transaction_id AS transaction_id,
				ISNULL(CONVERT(varchar, trl.transaction_date), '') AS transaction_date_string,
				trl.system_user_id AS system_user_id,	
				trl.network_information AS network_information,
				trl.transaction_done AS transaction_done,	
				trl.access_description AS access_description,		
				CASE WHEN 
						(sui.system_user_status = 1)
					THEN
						('ACTIVE')
					ELSE
						('DEACTIVATED')
					END AS system_user_status_string,
				sui.system_user_name AS system_user_name,

				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name
			FROM
				ums.transaction_log AS trl
			INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = trl.system_user_id
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = sui.sysid_person
			WHERE
				(trl.transaction_date BETWEEN @date_start AND @date_end) AND
				(trl.system_user_id = @user_id)
			ORDER BY
				trl.transaction_date ASC, pri.last_name ASC

		END

		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a transaction log', 'Transaction Log'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectTransactionLog TO db_umsusers
GO
-------------------------------------------------------------

-- #########################################END TABLE "transaction_log" OBJECTS############################################################





-- ################################################TABLE "special_class_information" OBJECTS######################################################
/*verifies that the trigger "Special_Class_Information_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Special_Class_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Information_Trigger_Insert
GO

CREATE TRIGGER ums.Special_Class_Information_Trigger_Insert
	ON  ums.special_class_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_subject varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @amount decimal (12, 2)
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@sysid_special = i.sysid_special,
		@sysid_subject = i.sysid_subject,
		@sysid_employee = i.sysid_employee,
		@year_id = i.year_id,
		@sysid_semester = i.sysid_semester,
		@amount = i.amount,		
		@is_semestral = cg.is_semestral,
		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = i.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL AND NOT @year_id = '')
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL AND NOT @sysid_semester = '')
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'CREATED a new special class information ' + 
							'[Special Class ID: ' + ISNULL(@sysid_special, '') +
							'][Subject Title: ' + (SELECT ISNULL(subject_code, '') + ' - ' + ISNULL(descriptive_title, '') FROM ums.subject_information WHERE sysid_subject = @sysid_subject) + 												  
							'][Instructor: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
														WHERE 
															epi.sysid_employee = @sysid_employee), '') +
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Special_Class_Information_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Special_Class_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Special_Class_Information_Trigger_Instead_Update
	ON  ums.special_class_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_subject varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @amount decimal (12, 2)
	DECLARE @edited_by varchar (50)

	DECLARE @sysid_subject_b varchar (50)
	DECLARE @sysid_employee_b varchar (50)
	DECLARE @year_id_b varchar (50)
	DECLARE @sysid_semester_b varchar (50)
	DECLARE @is_semestral_b bit
	DECLARE @amount_b decimal (12, 2)

	DECLARE @has_update bit
	
	SELECT 
		@sysid_special = i.sysid_special,
		@sysid_subject = i.sysid_subject,
		@sysid_employee = i.sysid_employee,
		@year_id = i.year_id,
		@sysid_semester = i.sysid_semester,
		@amount = i.amount,
		@is_semestral = cg.is_semestral,
		@edited_by = i.edited_by
	FROM INSERTED AS i
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = i.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id

	SELECT
		@sysid_subject_b = sci.sysid_subject,
		@sysid_employee_b = sci.sysid_employee,
		@year_id_b = sci.year_id,
		@sysid_semester_b = sci.sysid_semester,
		@amount_b = sci.amount,
		@is_semestral_b = cg.is_semestral
	FROM
		ums.special_class_information AS sci
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
	WHERE
		sci.sysid_special = @sysid_special
	
	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT ISNULL(@sysid_subject, '') = ISNULL(@sysid_subject_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Subject Title Before: ' + (SELECT ISNULL(subject_code, '') + ' - ' + ISNULL(descriptive_title, '') FROM ums.subject_information WHERE sysid_subject = @sysid_subject_b) + ']' +
													'[Subject Title After: ' + (SELECT ISNULL(subject_code, '') + ' - ' + ISNULL(descriptive_title, '') FROM ums.subject_information WHERE sysid_subject = @sysid_subject) + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[Subject Title: ' + (SELECT ISNULL(subject_code, '') + ' - ' + ISNULL(descriptive_title, '') FROM ums.subject_information WHERE sysid_subject = @sysid_subject) + ']'
	END

	IF NOT ISNULL(@sysid_employee, '') = ISNULL(@sysid_employee_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Instructor Before: ' + ISNULL((SELECT
																							pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																						FROM
																							ums.person_information AS pri
																						INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																						WHERE 
																							epi.sysid_employee = @sysid_employee_b), '') + ']' +
													'[Instructor After: ' + ISNULL((SELECT
																							pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																						FROM
																							ums.person_information AS pri
																						INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																						WHERE 
																							epi.sysid_employee = @sysid_employee), '') + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[Instructor: ' + ISNULL((SELECT
																					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																				FROM
																					ums.person_information AS pri
																				INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																				WHERE 
																					epi.sysid_employee = @sysid_employee), '') + ']'
	END

	IF (NOT @is_semestral = @is_semestral_b) OR (NOT ISNULL(@year_id_b, '') = ISNULL(@year_id, '')) OR
					(NOT ISNULL(@sysid_semester_b, '') = ISNULL(@sysid_semester, ''))
	BEGIN

		DECLARE @year_semester_description varchar (100)
		DECLARE @year_semester_description_b varchar (100)

		SET @year_semester_description = ''
		SET @year_semester_description_b = ''

		IF (@is_semestral_b = 0) AND (NOT @year_id_b IS NULL AND NOT @year_id_b = '')
		BEGIN
			SELECT @year_semester_description_b = year_description FROM ums.school_year WHERE year_id = @year_id_b
		END
		ELSE IF (@is_semestral_b = 1) AND (NOT @sysid_semester_b IS NULL AND NOT @sysid_semester_b = '')
		BEGIN
			SELECT @year_semester_description_b = sy.year_description + ' ' + ss.semester_description
			FROM 
				ums.semester_information AS si
			INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
			INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
			WHERE 
				si.sysid_semester = @sysid_semester_b
		END

		IF (@is_semestral = 0) AND (NOT @year_id IS NULL AND NOT @year_id = '')
		BEGIN
			SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
		END
		ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL AND NOT @sysid_semester = '')
		BEGIN
			SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
			FROM 
				ums.semester_information AS si
			INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
			INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
			WHERE 
				si.sysid_semester = @sysid_semester
		END

		SET @transaction_done = @transaction_done + '[School Year / Semester Before: ' + ISNULL(@year_semester_description_b, '') + ']' +
													'[School Year / Semester After: ' + ISNULL(@year_semester_description, '') + ']'
		SET @has_update = 1

	END

	IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
													'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
		SET @has_update = 1
	END
	
	IF @has_update = 1
	BEGIN

		UPDATE ums.special_class_information SET
			sysid_subject = @sysid_subject,
			sysid_employee = @sysid_employee,
			year_id = @year_id,
			sysid_semester = @sysid_semester,
			amount = @amount,
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_special = @sysid_special

		SET @transaction_done = 'UPDATED a special class information ' + 
								'[Special Class ID: ' + ISNULL(@sysid_special, '') + ']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	


	END	
	ELSE IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE ums.special_class_information SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_special = @sysid_special

	END
	
GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Special_Class_Information_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Special_Class_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Special_Class_Information_Trigger_Instead_Delete
	ON  ums.special_class_information
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_subject varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @amount decimal (12, 2)
	DECLARE @deleted_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@sysid_special = d.sysid_special,
		@sysid_subject = d.sysid_subject,
		@sysid_employee = d.sysid_employee,
		@year_id = d.year_id,
		@sysid_semester = d.sysid_semester,
		@amount = d.amount,
		@is_semestral = cg.is_semestral,
		@deleted_by = d.edited_by
	FROM DELETED AS d
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = d.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id

	UPDATE ums.special_class_load SET edited_by = @deleted_by WHERE sysid_special = @sysid_special
	DELETE FROM ums.special_class_load WHERE sysid_special = @sysid_special

	UPDATE ums.special_class_information SET is_marked_deleted = 1, edited_by = @deleted_by WHERE sysid_special = @sysid_special

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL AND NOT @year_id = '')
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL AND NOT @sysid_semester = '')
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'MARK AS DELETED a special class information ' + 
							'[Special Class ID: ' + ISNULL(@sysid_special, '') +
							'][Subject Title: ' + (SELECT ISNULL(subject_code, '') + ' - ' + ISNULL(descriptive_title, '') FROM ums.subject_information WHERE sysid_subject = @sysid_subject) + 												  
							'][Instructor: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
														WHERE 
															epi.sysid_employee = @sysid_employee), '') +
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'


	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END
			
	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

-- verifies if the procedure "SelectByDateStartEndSpecialClassInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndSpecialClassInformation')
   DROP PROCEDURE ums.SelectByDateStartEndSpecialClassInformation
GO

CREATE PROCEDURE ums.SelectByDateStartEndSpecialClassInformation

	@date_start datetime,
	@date_end datetime,
	@is_marked_deleted bit = 0,

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
			(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)	
	BEGIN

		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.year_id AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS lecture_units,
			si.lab_units AS lab_units,
			si.no_hours AS no_hours,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
			(sci.is_marked_deleted = @is_marked_deleted) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		UNION ALL
		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.sysid_semester AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS lecture_units,
			si.lab_units AS lab_units,
			si.no_hours AS no_hours,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
			((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
			(sci.is_marked_deleted = @is_marked_deleted) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		ORDER BY
			subject_code, descriptive_title
		
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a special class information', 'Special Class Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndSpecialClassInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDStudentListDateStartEndSpecialClassInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDStudentListDateStartEndSpecialClassInformation')
   DROP PROCEDURE ums.SelectBySysIDStudentListDateStartEndSpecialClassInformation
GO

CREATE PROCEDURE ums.SelectBySysIDStudentListDateStartEndSpecialClassInformation

	@sysid_student_list nvarchar (MAX) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''	
		
AS
	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsSecretaryVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1)
			
	BEGIN
	
		SELECT
			scl.load_id AS load_id,
			scl.sysid_special AS sysid_special,
			scl.sysid_student AS sysid_student,
			scl.load_date AS load_date,
			scl.deload_date AS deload_date,
			scl.is_premature_deloaded AS is_premature_deloaded,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.year_id AS year_semester_id,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			sc.category_id AS category_id,
			sc.category_name AS category_name,
			sc.acronym AS category_acronym,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_load AS scl
		INNER JOIN ums.IterateListToTable (@sysid_student_list, ',') AS ssl_list ON ssl_list.var_str = scl.sysid_student
		INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN ums.subject_category AS sc ON sc.category_id = si.category_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND	--no sci.is_marked_deleted to include the premature deload special class
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		UNION ALL
		SELECT
			scl.load_id AS load_id,
			scl.sysid_special AS sysid_special,
			scl.sysid_student AS sysid_student,
			scl.load_date AS load_date,
			scl.deload_date AS deload_date,
			scl.is_premature_deloaded AS is_premature_deloaded,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.sysid_semester AS year_semester_id,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			sc.category_id AS category_id,
			sc.category_name AS category_name,
			sc.acronym AS category_acronym,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_load AS scl
		INNER JOIN ums.IterateListToTable (@sysid_student_list, ',') AS ssl_list ON ssl_list.var_str = scl.sysid_student
		INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN ums.subject_category AS sc ON sc.category_id = si.category_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND --no sci.is_marked_deleted to include the premature deload special class
			((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		ORDER BY
			subject_code, descriptive_title		
		
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a special class information', 'Special Class Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDStudentListDateStartEndSpecialClassInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDEmployeeListDateStartEndSpecialClassInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDEmployeeListDateStartEndSpecialClassInformation')
   DROP PROCEDURE ums.SelectBySysIDEmployeeListDateStartEndSpecialClassInformation
GO

CREATE PROCEDURE ums.SelectBySysIDEmployeeListDateStartEndSpecialClassInformation

	@sysid_employee_list nvarchar (MAX) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''	
		
AS

	DECLARE @department_id varchar (50)

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsSecretaryVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1)
			
	BEGIN
	
		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.year_id AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.IterateListToTable (@sysid_employee_list, ',') AS sel_list ON sel_list.var_str = sci.sysid_employee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND	
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		UNION ALL
		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.sysid_semester AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.IterateListToTable (@sysid_employee_list, ',') AS sel_list ON sel_list.var_str = sci.sysid_employee
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee))
		ORDER BY
			subject_code, descriptive_title		
		
	END	
	ELSE IF (ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT 
			@department_id = arg.department_id 
		FROM
			ums.access_rights_granted AS arg
		INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = arg.system_user_id
		WHERE
			(arg.access_rights = '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@') AND
			(sui.system_user_id = @system_user_id);

		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.year_id AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.IterateListToTable (@sysid_employee_list, ',') AS sel_list ON sel_list.var_str = sci.sysid_employee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND	--no sci.is_marked_deleted to include the premature deload special class
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee)) AND
			(sli.department_id = @department_id)
		UNION ALL
		SELECT
			sci.sysid_special AS sysid_special,
			sci.sysid_subject AS sysid_subject,
			sci.sysid_employee AS sysid_employee,
			sci.year_id AS year_semester_id,
			sci.amount AS amount,
			sci.is_marked_deleted AS is_marked_deleted,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.lecture_units AS subject_lecture_units,
			si.lab_units AS subject_lab_units,
			si.no_hours AS subject_no_hours,
			si.is_non_academic AS is_non_academic,
			cg.is_semestral AS is_semestral,
			ei.employee_id AS employee_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			sli.status_id AS status_id,
			et.type_description AS type_description,
			es.status_description AS status_description,
			sdi.department_name AS subject_department_name,
			edi.department_name AS employee_department_name
		FROM
			ums.special_class_information AS sci
		INNER JOIN ums.IterateListToTable (@sysid_employee_list, ',') AS sel_list ON sel_list.var_str = sci.sysid_employee
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = sci.sysid_employee
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
		INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = sci.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
		INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
		INNER JOIN ums.department_information AS sdi ON sdi.department_id = si.department_id
		INNER JOIN ums.department_information AS edi ON edi.department_id = sli.department_id
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND --no sci.is_marked_deleted to include the premature deload special class
			((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
			(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = sci.sysid_employee)) AND
			(sli.department_id = @department_id)
		ORDER BY
			subject_code, descriptive_title		

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a special class information', 'Special Class Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDEmployeeListDateStartEndSpecialClassInformation TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "special_class_information" OBJECTS######################################################






-- ################################################TABLE "special_class_load" OBJECTS######################################################

/*verifies that the trigger "Special_Class_Load_Trigger_Instead_Insert" already exist*/
IF OBJECT_ID ('ums.Special_Class_Load_Trigger_Instead_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Load_Trigger_Instead_Insert
GO

CREATE TRIGGER ums.Special_Class_Load_Trigger_Instead_Insert
	ON  ums.special_class_load
	INSTEAD OF INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @year_semester_description varchar (50)	
	DECLARE @date_end datetime
	
	SELECT 
		@sysid_special = i.sysid_special,
		@sysid_student = i.sysid_student,
		@created_by = i.created_by
	FROM INSERTED AS i

	SET @year_semester_id = ums.GetYearSemesterIDSpecialClass(@sysid_special)
	SET @load_date = ums.GetPayrollLoadEffectivityDate(@year_semester_id)
	SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)
	SET @year_semester_description = ''

	SELECT 
		@is_semestral = cg.is_semestral, 
		@year_id = sci.year_id,
		@sysid_semester = sci.sysid_semester
	FROM 
		ums.special_class_information AS sci
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
	WHERE 
		sysid_special = @sysid_special

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL AND NOT @year_id = '')
	BEGIN
		SELECT 
			@year_semester_description = year_description,
			@date_end = date_end
		FROM 
			ums.school_year 
		WHERE 
			year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL AND NOT @sysid_semester = '')
	BEGIN
		SELECT 
			@year_semester_description = sy.year_description + ' - ' + ss.semester_description,
			@date_end = si.date_end
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	IF @load_date < @date_end
	BEGIN

		SELECT 
			@lecture_units = si.lecture_units,
			@lab_units = si.lab_units,
			@no_hours = si.no_hours
		FROM 
			ums.subject_information AS si
		INNER JOIN ums.special_class_information AS sci ON sci.sysid_subject = si.sysid_subject
		WHERE 
			sci.sysid_special = @sysid_special	

		INSERT INTO ums.special_class_load
		(
			sysid_special,
			sysid_student,
			load_date,
			deload_date,
			lecture_units,
			lab_units,
			no_hours,
			created_by
		)
		VALUES
		(
			@sysid_special,
			@sysid_student,
			@load_date,
			@deload_date,
			@lecture_units,
			@lab_units,
			@no_hours,
			@created_by
		)

		SET @transaction_done = 'LOADED a student with special class ' + 
								'[Special Class ID: ' + ISNULL(@sysid_special, '') +
								'][Subject Title: ' + ISNULL((SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '') 
														FROM 
															ums.special_class_information AS sci
														INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
														WHERE 
															sci.sysid_special = @sysid_special), '') + 	
								'][Instructor: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS ei ON ei.sysid_person = pri.sysid_person
															INNER JOIN ums.special_class_information AS sci ON sci.sysid_employee = ei.sysid_employee
															WHERE 
																sci.sysid_special = @sysid_special), '') +
								'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
								'][Student ID: ' + ISNULL((SELECT student_id
														FROM ums.student_information WHERE sysid_student = @sysid_student), '') +	
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	sysid_student = @sysid_student), '') +							
								'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
								'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
								'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
								'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
								'][Number of Hours: ' + ISNULL(@no_hours, '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

	END	

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Special_Class_Load_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Special_Class_Load_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Load_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Special_Class_Load_Trigger_Instead_Update
	ON  ums.special_class_load
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @load_id bigint
	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @is_premature_deloaded bit
	DECLARE @is_for_permanent_delete bit
	DECLARE @edited_by varchar (50)

	DECLARE @is_premature_deloaded_b bit

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @year_semester_description varchar (50)	
	DECLARE @date_end datetime

	DECLARE @has_update bit
	
	DECLARE special_class_load_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.load_id, i.sysid_special, i.sysid_student, i.load_date, i.lecture_units, i.lab_units, 
					i.no_hours, i.is_premature_deloaded, i.is_for_permanent_delete, i.edited_by
				FROM INSERTED AS i

	OPEN special_class_load_update_cursor

	FETCH NEXT FROM special_class_load_update_cursor
		INTO @load_id, @sysid_special, @sysid_student, @load_date, @lecture_units, @lab_units, 
				@no_hours, @is_premature_deloaded, @is_for_permanent_delete, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@is_premature_deloaded_b = scl.is_premature_deloaded
		FROM
			ums.special_class_load AS scl
		WHERE
			(scl.load_id = @load_id)

		SET @transaction_done = ''
		SET @has_update = 0	

		IF (@is_premature_deloaded = 0) AND (@is_premature_deloaded_b = 1)
		BEGIN

			SET @transaction_done = @transaction_done + '[Is Pre-Mature Deloaded Before: YES' + ']' +
														'[Is Pre-Mature Deloaded After: NO' + ']'
			SET @has_update = 1

		END

		IF @has_update = 1
		BEGIN

			SET @year_semester_id = ums.GetYearSemesterIDSpecialClass(@sysid_special)
			SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)

			SELECT 
				@is_semestral = cg.is_semestral, 
				@year_id = sci.year_id,
				@sysid_semester = sci.sysid_semester
			FROM 
				ums.special_class_information AS sci
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			WHERE 
				sysid_special = @sysid_special

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = year_description,
					@date_end = date_end
				FROM 
					ums.school_year 
				WHERE 
					year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN	

				SELECT 
					@year_semester_description = sy.year_description + ' - ' + ss.semester_description,
					@date_end = si.date_end
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@load_date < @date_end)
			BEGIN

				UPDATE ums.special_class_load SET
					deload_date = @deload_date,
					is_premature_deloaded = @is_premature_deloaded,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					(load_id = @load_id)


				SET @transaction_done = 'UPDATED/RELOAD a special class load ' + 
										'[Special Class ID: ' + ISNULL(@sysid_special, '') +
										'][Subject Title: ' + ISNULL((SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '') 
																FROM 
																	ums.special_class_information AS sci
																INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
																WHERE 
																	sci.sysid_special = @sysid_special), '') + 	
										'][Instructor: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	INNER JOIN ums.employee_information AS ei ON ei.sysid_person = pri.sysid_person
																	INNER JOIN ums.special_class_information AS sci ON sci.sysid_employee = ei.sysid_employee
																	WHERE 
																		sci.sysid_special = @sysid_special), '') +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
										'][Student ID: ' + ISNULL((SELECT student_id
																FROM ums.student_information WHERE sysid_student = @sysid_student), '') +	
										'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																		FROM 
																			ums.person_information AS pri
																		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																		WHERE 
																			sysid_student = @sysid_student), '') +							
										'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
										'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
										'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
										'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
										'][Number of Hours: ' + ISNULL(@no_hours, '') +
										']' + @transaction_done	

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

			END

		END
		ELSE
		BEGIN

			--used for the delete trigger
			IF NOT @edited_by IS NULL
			BEGIN
				
				UPDATE ums.special_class_load SET
					is_for_permanent_delete = @is_for_permanent_delete,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE 
					load_id = @load_id
			END

		END 

		FETCH NEXT FROM special_class_load_update_cursor
			INTO @load_id, @sysid_special, @sysid_student, @load_date, @lecture_units, @lab_units, 
					@no_hours, @is_premature_deloaded, @is_for_permanent_delete, @edited_by

	END
	
	CLOSE special_class_load_update_cursor
	DEALLOCATE special_class_load_update_cursor	
	
GO
-------------------------------------------------------------------------

/*verifies that the trigger "Special_Class_Load_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Special_Class_Load_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Special_Class_Load_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Special_Class_Load_Trigger_Instead_Delete
	ON  ums.special_class_load
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @load_id bigint
	DECLARE @sysid_special varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @is_premature_deloaded bit
	DECLARE @is_for_permanent_delete bit
	DECLARE @system_user_id varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @year_semester_description varchar (50)

	DECLARE special_class_load_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.load_id, d.sysid_special, d.sysid_student, d.load_date, 
					d.lecture_units, d.lab_units, d.no_hours, d.is_premature_deloaded, d.is_for_permanent_delete, d.edited_by
				FROM DELETED AS d

	OPEN special_class_load_delete_cursor

	FETCH NEXT FROM special_class_load_delete_cursor
		INTO @load_id, @sysid_special, @sysid_student, @load_date, 
				@lecture_units, @lab_units, @no_hours, @is_premature_deloaded, @is_for_permanent_delete, @system_user_id

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_premature_deloaded = 0) AND (@is_for_permanent_delete = 0)
		BEGIN

			SET @year_semester_id = ums.GetYearSemesterIDSpecialClass(@sysid_special)
			SET @deload_date = ums.GetPayrollPreTerminatedLoadDate()
			
			SELECT 
				@is_semestral = cg.is_semestral, 
				@year_id = sci.year_id,
				@sysid_semester = sci.sysid_semester
			FROM 
				ums.special_class_information AS sci
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject		
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			WHERE 
				sysid_special = @sysid_special

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL AND NOT @year_id = '')
			BEGIN
				SELECT 
					@year_semester_description = year_description
				FROM 
					ums.school_year 
				WHERE 
					year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL AND NOT @sysid_semester = '')
			BEGIN
				SELECT 
					@year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@load_date < @deload_date)
			BEGIN

				UPDATE ums.special_class_load SET
					deload_date = CONVERT(datetime, CONVERT(varchar, GETDATE(), 101) + ' 11:59:59 PM', 101),
					is_premature_deloaded = 1,

					edited_on = GETDATE(),
					edited_by = @system_user_id
				WHERE 
					load_id = @load_id

			END
			ELSE
			BEGIN

				DELETE FROM ums.special_class_load WHERE load_id = @load_id

			END

			SET @deload_date = GETDATE()

			SET @transaction_done = 'DELOADED a student with special class ' + 
									'[Special Class ID: ' + ISNULL(@sysid_special, '') +
									'][Subject Title: ' + ISNULL((SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '') 
															FROM 
																ums.special_class_information AS sci
															INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
															WHERE 
																sci.sysid_special = @sysid_special), '') + 												  
									'][Instructor: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS ei ON ei.sysid_person = pri.sysid_person
																INNER JOIN ums.special_class_information AS sci ON sci.sysid_employee = ei.sysid_employee
																WHERE 
																	sci.sysid_special = @sysid_special), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
									'][Student ID: ' + ISNULL((SELECT student_id 
															FROM ums.student_information WHERE sysid_student = @sysid_student), '') +	
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		sysid_student = @sysid_student), '') +							
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
			END
					
			EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done			

		END
		ELSE IF (@is_for_permanent_delete = 1)
		BEGIN

			DELETE FROM ums.special_class_load WHERE load_id = @load_id

			SET @deload_date = GETDATE()

			SET @transaction_done = 'PERMANENTLY DELETED/DELOADED a student with special class ' + 
									'[Special Class ID: ' + ISNULL(@sysid_special, '') +
									'][Subject Title: ' + ISNULL((SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '') 
															FROM 
																ums.special_class_information AS sci
															INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
															WHERE 
																sci.sysid_special = @sysid_special), '') + 												  
									'][Instructor: ' + ISNULL((SELECT
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS ei ON ei.sysid_person = pri.sysid_person
																INNER JOIN ums.special_class_information AS sci ON sci.sysid_employee = ei.sysid_employee
																WHERE 
																	sci.sysid_special = @sysid_special), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
									'][Student ID: ' + ISNULL((SELECT student_id 
															FROM ums.student_information WHERE sysid_student = @sysid_student), '') +	
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		sysid_student = @sysid_student), '') +							
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
			END
					
			EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done	

		END

		FETCH NEXT FROM special_class_load_delete_cursor
			INTO @load_id, @sysid_special, @sysid_student, @load_date, 
					@lecture_units, @lab_units, @no_hours, @is_premature_deloaded, @is_for_permanent_delete, @system_user_id

	END
	
	CLOSE special_class_load_delete_cursor
	DEALLOCATE special_class_load_delete_cursor
	
GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDSpecialSpecialClassLoad" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDSpecialSpecialClassLoad')
   DROP PROCEDURE ums.SelectBySysIDSpecialSpecialClassLoad
GO

CREATE PROCEDURE ums.SelectBySysIDSpecialSpecialClassLoad

	@sysid_special varchar (50) = '',

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1)  OR
			(ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
			(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
			(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)		
	BEGIN

		SELECT
			scl.load_id AS load_id,
			scl.load_date AS load_date,
			scl.deload_date AS deload_date,
			scl.sysid_student AS sysid_student,
			scl.is_premature_deloaded AS is_premature_deloaded,
			si.student_id AS student_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description			
		FROM 
			ums.special_class_load AS scl
		INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.student_information AS si ON si.sysid_student = scl.sysid_student
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		LEFT JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		LEFT JOIN ums.department_information AS di ON di.department_id = ci.department_id
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		LEFT JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		LEFT JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
			(scl.sysid_special = @sysid_special) AND
			(((NOT sci.year_id IS NULL) AND (sel.is_marked_deleted = 0) AND (sfi.year_id = sci.year_id) AND 
			(cg.is_semestral = 0)) OR (sci.year_id IS NULL))
		UNION ALL
		SELECT
			scl.load_id AS load_id,
			scl.load_date AS load_date,
			scl.deload_date AS deload_date,
			scl.sysid_student AS sysid_student,
			scl.is_premature_deloaded AS is_premature_deloaded,
			si.student_id AS student_id,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description
		FROM 
			ums.special_class_load AS scl
		INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.student_information AS si ON si.sysid_student = scl.sysid_student
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		LEFT JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		LEFT JOIN ums.department_information AS di ON di.department_id = ci.department_id
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		LEFT JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		LEFT JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		LEFT JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
			(scl.sysid_special = @sysid_special) AND
			(((NOT sel.sysid_semester IS NULL) AND (sel.is_marked_deleted = 0) AND (sel.sysid_semester = sci.sysid_semester) AND 
			(cg.is_semestral = 1)) OR (sel.sysid_semester IS NULL))
		ORDER BY
			last_name
		
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a special class load', 'Special Class Load'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDSpecialSpecialClassLoad TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "special_class_load" OBJECTS######################################################





-- ##########################################TABLE "employee_information" OBJECTS########################################################

--verifies that the trigger "Employee_Information_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Employee_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Information_Trigger_Insert
GO

CREATE TRIGGER ums.Employee_Information_Trigger_Insert
	ON  ums.employee_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @e_code varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @other_person_information varchar (MAX)

	DECLARE @sysid_employee varchar (50)
	DECLARE @employee_id varchar (50)
	DECLARE @pagibig_memid varchar (50)
	DECLARE @sss_memid varchar (50)
	DECLARE @philhealth_memid varchar (50)
	DECLARE @other_employee_information varchar (MAX)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@sysid_person = pri.sysid_person,
		@e_code = pri.e_code,
		@last_name = pri.last_name,
		@first_name = pri.first_name,
		@middle_name = pri.middle_name,
		@life_status_code = pri.life_status_code,
		@gender_code = pri.gender_code,
		@birthdate = pri.birthdate,
		@place_birth = pri.place_birth,
		@email_address = pri.email_address,
		@present_address = pri.present_address,
		@present_phone_nos = pri.present_phone_nos,
		@home_address = pri.home_address,
		@home_phone_nos = pri.home_phone_nos,
		@citizenship = pri.citizenship,
		@nationality = pri.nationality,
		@religion = pri.religion,
		@marital_status_code = pri.marital_status_code,
		@marriage_date = pri.marriage_date,
		@other_person_information = pri.other_person_information,

		@sysid_employee = i.sysid_employee,
		@employee_id = i.employee_id,
		@pagibig_memid = i.pagibig_memid,
		@sss_memid = i.sss_memid,
		@philhealth_memid = i.philhealth_memid,
		@other_employee_information = i.other_employee_information,

		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.person_information AS pri ON pri.sysid_person = i.sysid_person

	SET @transaction_done = 'CREATED an employee information ' + 
							'[System ID: ' + ISNULL(@sysid_employee, '') +				
							'][Person System ID: ' + ISNULL(@sysid_person, '') +
							'][E-Code: ' + ISNULL(@e_code, '') +
							'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
							'][Life Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @life_status_code), '') +
							'][Gender: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @gender_code), '') +
							'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
							'][Place of Birth: ' + ISNULL(@place_birth, '') +
							'][Email Address: ' + ISNULL(@email_address, '') +
							'][Present Address: ' + ISNULL(@present_address, '') +
							'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
							'][Home Address: ' + ISNULL(@home_address, '') +
							'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
							'][Citizenship: ' + ISNULL(@citizenship, '') +
							'][Nationality: ' + ISNULL(@nationality, '') +
							'][Religion: ' + ISNULL(@religion, '') +
							'][Marital Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @marital_status_code), '') +
							'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
							'][Other Person Information: ' + ISNULL(@other_person_information, '') +

							'][Employee ID: ' + ISNULL(@employee_id, '') +
							'][Pag-ibig Membership ID: ' + ISNULL(@pagibig_memid, '') +
							'][SSS Membership ID: ' + ISNULL(@sss_memid, '') +
							'][PhilHealth Membership ID: ' + ISNULL(@philhealth_memid, '') +
							'][Other Employee Information: ' + ISNULL(@other_employee_information, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
------------------------------------------------------------------------

--verifies that the trigger "Employee_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Employee_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Employee_Information_Trigger_Instead_Update
	ON  ums.employee_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_employee varchar (50)
	DECLARE @employee_id varchar (50)
	DECLARE @card_number varchar (50)
	DECLARE @pagibig_memid varchar (50)
	DECLARE @sss_memid varchar (50)
	DECLARE @philhealth_memid varchar (50)
	DECLARE @other_employee_information varchar (MAX)

	DECLARE @edited_by varchar (50)

	DECLARE @employee_id_b varchar (50)
	DECLARE @card_number_b varchar (50)
	DECLARE @pagibig_memid_b varchar (50)
	DECLARE @sss_memid_b varchar (50)
	DECLARE @philhealth_memid_b varchar (50)
	DECLARE @other_employee_information_b varchar (MAX)

	DECLARE @sysid_person varchar (50)
	
	DECLARE @has_update bit

	SELECT 
		@sysid_employee = i.sysid_employee,
		@employee_id = i.employee_id,
		@card_number = i.card_number,
		@pagibig_memid = i.pagibig_memid,
		@sss_memid = i.sss_memid,
		@philhealth_memid = i.philhealth_memid,
		@other_employee_information = i.other_employee_information,

		@sysid_person = i.sysid_person,

		@edited_by = i.edited_by
	FROM INSERTED AS i

	SELECT
		@employee_id_b = epi.employee_id,
		@card_number_b = epi.card_number,
		@pagibig_memid_b = epi.pagibig_memid,
		@sss_memid_b = epi.sss_memid,
		@philhealth_memid_b = epi.philhealth_memid,
		@other_employee_information_b = epi.other_employee_information
	FROM 
		ums.employee_information AS epi
	WHERE
		sysid_employee = @sysid_employee	

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT ISNULL(@employee_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@employee_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Employee ID Before: ' + ISNULL(@employee_id_b, '') + ']' + 
													'[Employee ID After: ' + ISNULL(@employee_id, '') + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[Employee ID: ' + ISNULL(@employee_id, '') + ']'
	END

	IF NOT ISNULL(@card_number COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@card_number_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Card Number Before: ' + ISNULL(@card_number_b, '') + ']' +
													'[Card Number After: ' + ISNULL(@card_number, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@pagibig_memid COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@pagibig_memid_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Pag-ibig Membership ID Before: ' + ISNULL(@pagibig_memid_b, '') + ']' + 
													'[Pag-ibig Membership ID After: ' + ISNULL(@pagibig_memid, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@sss_memid COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sss_memid_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[SSS Membership ID Before: ' + ISNULL(@sss_memid_b, '') + ']' + 
													'[SSS Membership ID After: ' + ISNULL(@sss_memid, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@philhealth_memid COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@philhealth_memid_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[PhilHealth Membership ID Before: ' + ISNULL(@philhealth_memid_b, '') + ']' + 
													'[PhilHealth Membership ID After: ' + ISNULL(@philhealth_memid, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT ISNULL(@other_employee_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_employee_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Other Employee Information Before: ' + ISNULL(@other_employee_information_b, '') + ']' + 
													'[Other Employee Information After: ' + ISNULL(@other_employee_information, '') + ']'
		SET @has_update = 1
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.employee_information SET
			employee_id = @employee_id,
			card_number = @card_number,
			pagibig_memid = @pagibig_memid,
			sss_memid = @sss_memid,
			philhealth_memid = @philhealth_memid,
			other_employee_information = @other_employee_information,

			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_employee = @sysid_employee

		SET @transaction_done = 'UPDATED an employee information ' + 
								'[System ID: ' + ISNULL(@sysid_employee, '') + 
								'][Employee Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') +
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
											
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
	END

GO
------------------------------------------------------------------------

-- verifies that the trigger "Employee_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Employee_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Employee_Information_Trigger_Instead_Delete
	ON  ums.employee_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete an employee information', 'Employee Information'
	
GO
------------------------------------------------------------------------

-- verifies if the procedure "InsertEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertEmployeeInformation')
   DROP PROCEDURE ums.InsertEmployeeInformation
GO

CREATE PROCEDURE ums.InsertEmployeeInformation

	@sysid_employee varchar (50) = '',
	@employee_id varchar (50) = '',
	@pagibig_memid varchar (50) = '',
	@sss_memid varchar (50) = '',
	@philhealth_memid varchar (50) = '',
	@other_employee_information varchar (MAX) = '',
	@sysid_person varchar (50) = '',

	@employment_id varchar (50)  = '',
	@department_id varchar (50) = '',
	@status_id tinyint = 0,
	@level_id varchar (50) = '',
	@category_id varchar (50) = '',
	@degree_id varchar (50) = '',
	@degree_id_level_points varchar (50) = '',
	@rate_id bigint = 0,
	@is_fixed_loginout bit = 0,
	@first_in varchar (12) = '',
	@first_out varchar (12) = '',
	@second_in varchar (12) = '',
	@second_out varchar (12) = '',
	@rest_day tinyint = 0,

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@created_by) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@created_by) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@created_by) = 1)
	BEGIN

		IF (EXISTS (SELECT sysid_person FROM ums.person_information WHERE sysid_person = @sysid_person) AND
			NOT EXISTS (SELECT sysid_person FROM ums.employee_information WHERE sysid_person = @sysid_person))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @created_by, @network_information

			INSERT INTO ums.employee_information
			(
				sysid_employee,
				employee_id,
				pagibig_memid,
				sss_memid,
				philhealth_memid,
				other_employee_information,
				sysid_person,

				created_by
			)
			VALUES
			(
				@sysid_employee,
				@employee_id,
				@pagibig_memid,
				@sss_memid,
				@philhealth_memid,
				@other_employee_information,
				@sysid_person,

				@created_by
			)

			

			EXECUTE ums.InsertUpdateSalaryInformation @sysid_employee, @employment_id, @department_id, @status_id, @level_id, @category_id, 
													@degree_id, @degree_id_level_points, @rate_id, @is_fixed_loginout, @first_in, @first_out, 
													@second_in, @second_out, @rest_day, @network_information, @created_by

		END
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Create a new employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdateEmployeeInformation')
   DROP PROCEDURE ums.UpdateEmployeeInformation
GO

CREATE PROCEDURE ums.UpdateEmployeeInformation

	@sysid_employee varchar (50) = '',
	@employee_id varchar (50) = '',
	@pagibig_memid varchar (50) = '',
	@sss_memid varchar (50) = '',
	@philhealth_memid varchar (50) = '',
	@other_employee_information varchar (MAX) = '',

	@employment_id varchar (50)  = '',
	@department_id varchar (50) = '',
	@status_id tinyint = 0,
	@level_id varchar (50) = '',
	@category_id varchar (50) = '',
	@degree_id varchar (50) = '',
	@degree_id_level_points varchar (50) = '',
	@rate_id bigint = 0,
	@is_fixed_loginout bit = 0,
	@first_in varchar (12) = '',
	@first_out varchar (12) = '',
	@second_in varchar (12) = '',
	@second_out varchar (12) = '',
	@rest_day tinyint = 0,

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@edited_by) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@edited_by) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.employee_information SET			
			employee_id = @employee_id,
			pagibig_memid = @pagibig_memid,
			sss_memid = @sss_memid,
			philhealth_memid = @philhealth_memid,
			other_employee_information = @other_employee_information,

			edited_by = @edited_by
		WHERE
			sysid_employee = @sysid_employee

		EXECUTE ums.InsertUpdateSalaryInformation @sysid_employee, @employment_id, @department_id, @status_id, @level_id, @category_id, 
													@degree_id, @degree_id_level_points, @rate_id, @is_fixed_loginout, @first_in, @first_out, 
													@second_in, @second_out, @rest_day, @network_information, @edited_by
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Update an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdateEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateForIDMakerEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdateForIDMakerEmployeeInformation')
   DROP PROCEDURE ums.UpdateForIDMakerEmployeeInformation
GO

CREATE PROCEDURE ums.UpdateForIDMakerEmployeeInformation

	@sysid_employee varchar (50) = '',
	@card_number varchar (50) = '',

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR (ums.IsIDMakerSystemUserInfo(@edited_by) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.employee_information SET			
			card_number = @card_number,
			edited_by = @edited_by
		WHERE
			sysid_employee = @sysid_employee
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Update an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdateForIDMakerEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectEmployeeInformation')
   DROP PROCEDURE ums.SelectEmployeeInformation
GO

CREATE PROCEDURE ums.SelectEmployeeInformation

	@system_user_id varchar (50) = ''	
		
AS

	IF ums.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN

		SELECT 
			epi.sysid_employee AS sysid_employee,
			epi.employee_id AS employee_id,
			epi.card_number AS card_number,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			si.department_id AS department_id,
			si.status_id AS status_id,			
			et.type_no AS type_no,
			et.type_description AS type_description,			
			rg.group_no AS rank_group_no,
			rg.group_description AS rank_group_description,	
			es.status_description AS status_description,
			di.department_name AS department_name
		FROM
			ums.employee_information AS epi
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = epi.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
		INNER JOIN ums.rank_group AS rg ON rg.rank_group_id = et.rank_group_id
		INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
		INNER JOIN ums.department_information AS di ON di.department_id = si.department_id		
		WHERE
			si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = epi.sysid_employee)
		ORDER BY pri.last_name ASC
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByEmployeeIDEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByEmployeeIDEmployeeInformation')
   DROP PROCEDURE ums.SelectByEmployeeIDEmployeeInformation
GO

CREATE PROCEDURE ums.SelectByEmployeeIDEmployeeInformation

	@employee_id varchar (50) = '',

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) 
	BEGIN

		SELECT 
			epi.sysid_employee AS sysid_employee,
			epi.employee_id AS employee_id,
			epi.card_number AS card_number,
			epi.pagibig_memid AS pagibig_memid,
			epi.sss_memid AS sss_memid,
			epi.philhealth_memid AS philhealth_memid,
			epi.other_employee_information AS other_employee_information,
			epi.sysid_person AS sysid_person,

			si.effectivity_date AS effectivity_date,
			si.employment_id AS employment_id,	
			si.department_id AS department_id,		
			si.status_id AS status_id,
			si.level_id AS level_id,
			si.category_id AS category_id,
			si.degree_id AS degree_id,
			si.degree_id_level_points AS degree_id_level_points,
			si.rate_id AS rate_id,
			si.is_fixed_loginout AS is_fixed_loginout,
			si.first_in AS first_in,
			si.first_out AS first_out,
			si.second_in AS second_in,
			si.second_out AS second_out,
			si.rest_day AS rest_day,
			et.type_no AS type_no
		FROM
			ums.employee_information AS epi
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = epi.sysid_employee
		INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
		WHERE
			epi.employee_id = @employee_id AND
			si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = epi.sysid_employee)		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByEmployeeIDEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDPersonEmployeeInformation')
   DROP PROCEDURE ums.SelectBySysIDPersonEmployeeInformation
GO

CREATE PROCEDURE ums.SelectBySysIDPersonEmployeeInformation

	@sysid_person varchar (50) = '',

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) 
	BEGIN

		SELECT 
			epi.employee_id AS employee_id
		FROM
			ums.employee_information AS epi
		WHERE
			(epi.sysid_person = @sysid_person)	
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDPersonEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "GetCountEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'GetCountEmployeeInformation')
   DROP PROCEDURE ums.GetCountEmployeeInformation
GO

CREATE PROCEDURE ums.GetCountEmployeeInformation

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT COUNT(sysid_employee) FROM ums.employee_information
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.GetCountEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsSysIDEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsSysIDEmployeeInformation')
   DROP PROCEDURE ums.IsExistsSysIDEmployeeInformation
GO

CREATE PROCEDURE ums.IsExistsSysIDEmployeeInformation

	@sysid_employee varchar (50) = '',
	@system_user_id varchar(50) = ''
		
AS

	IF ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1 OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.IsExistsSysIDEmpInfo(@sysid_employee)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END	
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsSysIDEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsEmployeeIDEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsEmployeeIDEmployeeInformation')
   DROP PROCEDURE ums.IsExistsEmployeeIDEmployeeInformation
GO

CREATE PROCEDURE ums.IsExistsEmployeeIDEmployeeInformation

	@sysid_employee varchar (50) = '',
	@employee_id varchar (50) = '',
	@system_user_id varchar(50) = ''
		
AS

	IF ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1 OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN
	
		SELECT ums.IsExistsEmployeeIDEmpInfo(@sysid_employee, @employee_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END	
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsEmployeeIDEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsCardNumberEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsCardNumberEmployeeInformation')
   DROP PROCEDURE ums.IsExistsCardNumberEmployeeInformation
GO

CREATE PROCEDURE ums.IsExistsCardNumberEmployeeInformation

	@sysid_employee varchar (50) = '',
	@card_number varchar (50) = '',
	@system_user_id varchar(50) = ''
		
AS

	IF ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1 OR (ums.IsIDMakerSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.IsExistsCardNumberEmpInfo(@sysid_employee, @card_number)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an employee information', 'Employee Information'
	END	
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsCardNumberEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------


-- verifies if the "IsExistsSysIDEmpInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsSysIDEmpInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsSysIDEmpInfo
GO

CREATE FUNCTION ums.IsExistsSysIDEmpInfo
(	
	@sysid_employee varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE sysid_employee = @sysid_employee)
	BEGIN
		SET @result = 1
	END
		
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsEmployeeIDEmpInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsEmployeeIDEmpInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsEmployeeIDEmpInfo
GO

CREATE FUNCTION ums.IsExistsEmployeeIDEmpInfo
(	
	@sysid_employee varchar (50) = '',
	@employee_id varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE ((REPLACE(employee_id, ' ', '')) LIKE REPLACE(@employee_id, ' ', '')) AND NOT sysid_employee = @sysid_employee) OR
		EXISTS (SELECT sysid_student FROM ums.student_information WHERE ((REPLACE(student_id, ' ', '')) LIKE REPLACE(@employee_id, ' ', '')))
	BEGIN
		SET @result = 1
	END
		
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistsCardNumberEmpInfo" function already exist
IF OBJECT_ID (N'ums.IsExistsCardNumberEmpInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistsCardNumberEmpInfo
GO

CREATE FUNCTION ums.IsExistsCardNumberEmpInfo
(	
	@sysid_employee varchar (50) = '',
	@card_number varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE ((REPLACE(card_number, ' ', '')) LIKE REPLACE(@card_number, ' ', '')) AND NOT sysid_employee = @sysid_employee) OR
		EXISTS (SELECT sysid_student FROM ums.student_information WHERE ((REPLACE(card_number, ' ', '')) LIKE REPLACE(@card_number, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------


-- ########################################END TABLE "employee_information" OBJECTS########################################################





-- ##########################################TABLE "salary_information" OBJECTS########################################################

/*verifies that the trigger "Salary_Information_Trigger_Instead_Insert" already exist*/
IF OBJECT_ID ('ums.Salary_Information_Trigger_Instead_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Salary_Information_Trigger_Instead_Insert
GO

CREATE TRIGGER ums.Salary_Information_Trigger_Instead_Insert
	ON  ums.salary_information
	INSTEAD OF INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_employee varchar (50)
	DECLARE @effectivity_date datetime
	DECLARE @employment_id varchar (50)
	DECLARE @department_id varchar (50)
	DECLARE @status_id tinyint
	DECLARE @level_id varchar (50)
	DECLARE @category_id varchar (50)
	DECLARE @degree_id varchar (50)
	DECLARE @degree_id_level_points varchar (50)
	DECLARE @rate_id bigint 
	DECLARE @is_fixed_loginout bit
	DECLARE @first_in varchar (12)
	DECLARE @first_out varchar (12)
	DECLARE @second_in varchar (12)
	DECLARE @second_out varchar (12)
	DECLARE @rest_day tinyint
	DECLARE @created_by varchar (50)

	DECLARE @employment_id_b varchar (50)
	DECLARE @department_id_b varchar (50)
	DECLARE @status_id_b tinyint
	DECLARE @level_id_b varchar (50)
	DECLARE @category_id_b varchar (50)
	DECLARE @degree_id_b varchar (50)
	DECLARE @degree_id_level_points_b varchar (50)
	DECLARE @rate_id_b bigint 
	DECLARE @is_fixed_loginout_b bit
	DECLARE @first_in_b varchar (12)
	DECLARE @first_out_b varchar (12)
	DECLARE @second_in_b varchar (12)
	DECLARE @second_out_b varchar (12)
	DECLARE @rest_day_b tinyint

	DECLARE @has_update bit
	
	DECLARE @fixed_loginout varchar (50)

	SELECT 
		@sysid_employee = sysid_employee,
		@effectivity_date = effectivity_date,
		@employment_id = employment_id,
		@department_id = department_id,
		@status_id = status_id,
		@level_id = level_id,
		@category_id = category_id,
		@degree_id = degree_id,
		@degree_id_level_points = degree_id_level_points,
		@rate_id = rate_id,
		@is_fixed_loginout = is_fixed_loginout,
		@first_in = first_in,
		@first_out = first_out,
		@second_in = second_in,
		@second_out = second_out,
		@rest_day = rest_day,
		@created_by = created_by	
	FROM 
		INSERTED	

	SET @has_update = 0

	-- check if there are changes in the existing salary information before creating a new salary information
	IF EXISTS (SELECT salary_id FROM ums.salary_information WHERE sysid_employee = @sysid_employee)
	BEGIN

		SELECT 
			@employment_id_b = employment_id,
			@department_id_b = department_id,
			@status_id_b = status_id,
			@level_id_b = level_id,
			@category_id_b = category_id,
			@degree_id_b = degree_id,
			@degree_id_level_points_b = degree_id_level_points,
			@rate_id_b = rate_id,
			@is_fixed_loginout_b = is_fixed_loginout,
			@first_in_b = first_in,
			@first_out_b = first_out,
			@second_in_b = second_in,
			@second_out_b = second_out,
			@rest_day_b = rest_day
		FROM 
			ums.salary_information
		WHERE	
			sysid_employee = @sysid_employee AND
			effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = @sysid_employee)

		-- check if there are new updates for the resent salary information of the employee
		IF (NOT ISNULL(@employment_id, '') = ISNULL(@employment_id_b, '')) OR
			(NOT ISNULL(@department_id, '') = ISNULL(@department_id_b, '')) OR
			(NOT ISNULL(@status_id, '') = ISNULL(@status_id_b, '')) OR
			(NOT ISNULL(@level_id, '') = ISNULL(@level_id_b, '')) OR
			(NOT ISNULL(@category_id, '') = ISNULL(@category_id_b, '')) OR
			(NOT ISNULL(@degree_id, '') = ISNULL(@degree_id_b, '')) OR
			(NOT ISNULL(@degree_id_level_points, '') = ISNULL(@degree_id_level_points_b, '')) OR
			(NOT ISNULL(@rate_id, '') = ISNULL(@rate_id_b, '')) OR
			(NOT @is_fixed_loginout = @is_fixed_loginout_b) OR
			(NOT ISNULL(@first_in, '') = ISNULL(@first_in_b, '')) OR
			(NOT ISNULL(@first_out, '') = ISNULL(@first_out_b, '')) OR
			(NOT ISNULL(@second_in, '') = ISNULL(@second_in_b, '')) OR
			(NOT ISNULL(@second_out, '') = ISNULL(@second_out_b, '')) OR
			(NOT ISNULL(CONVERT(varchar, @rest_day), '') = ISNULL(CONVERT(varchar, @rest_day_b), '')) OR	
			(EXISTS (SELECT rate_id FROM ums.rank_salary_rate WHERE effectivity_date >= @effectivity_date)) --determines if there is a new rank salary rate
																									  --so that the new salary rate will be applied to the employee
		BEGIN
			SET @has_update = 1
		END	
	END
	ELSE
	BEGIN
		SET @has_update = 1
	END
	
	IF @has_update = 1
	BEGIN

		INSERT INTO ums.salary_information
		(
			sysid_employee,
			employment_id,
			department_id,
			effectivity_date,
			status_id,
			level_id,
			category_id,
			degree_id,
			degree_id_level_points,
			rate_id,
			is_fixed_loginout,
			first_in,
			first_out,
			second_in,
			second_out,
			rest_day,
			created_by
		)
		VALUES
		(
			@sysid_employee,
			@employment_id,
			@department_id,
			@effectivity_date,
			@status_id,
			@level_id,
			@category_id,
			@degree_id,
			@degree_id_level_points,
			@rate_id,
			@is_fixed_loginout,
			@first_in,
			@first_out,
			@second_in,
			@second_out,
			@rest_day,
			@created_by
		)

		IF (@is_fixed_loginout = 1)
		BEGIN
			SET @fixed_loginout = 'YES'
		END
		ELSE
		BEGIN
			SET @fixed_loginout = 'NO'
		END

		SET @transaction_done = 'CREATED an employee salary information ' + 
								'[System ID: ' + @sysid_employee +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
								'][Employee Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	(epi.sysid_employee = @sysid_employee)), '') +
								'][Effectivity Date: ' + ISNULL((CONVERT(varchar, @effectivity_date, 101)), '') +
								'][Employment Type: ' + ISNULL((SELECT type_description FROM ums.employment_type WHERE employment_id = @employment_id), '') +
								'][Department: ' + ISNULL((SELECT department_name FROM ums.department_information WHERE department_id = @department_id), '') +
								'][Employment Status: ' + ISNULL((SELECT status_description FROM ums.employment_status WHERE status_id = @status_id), '') +
								'][Rank Level: ' + ISNULL((SELECT level_description FROM ums.rank_level WHERE level_id = @level_id), '') +
								'][Rank Category: ' + ISNULL((SELECT category_description FROM ums.rank_category WHERE category_id = @category_id), '') +
								'][Rank Degree (Previous Rate) And Points (Increase Rate): ' + ISNULL((SELECT 
																			degree_description + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.previous_rate, 1)), '0.00') + ')'
																		FROM 
																			ums.rank_degree AS rd
																		INNER JOIN ums.rank_salary_rate AS rsr ON rsr.degree_id = rd.degree_id
																		WHERE 
																			(rd.degree_id = @degree_id) AND
																			(rsr.effectivity_date = (SELECT
																											MAX(effectivity_date)
																										FROM
																											ums.rank_salary_rate
																										WHERE
																											(degree_id = @degree_id)))) , '') + 
																		' - ' + ISNULL((SELECT
																							rsr.level_points + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.increase_rate, 1)), '0.00') + ')'
																						FROM
																							ums.rank_salary_rate AS rsr
																						WHERE
																							(rsr.degree_id = @degree_id_level_points) AND
																							(rsr.effectivity_date = 
																							(SELECT 
																									MAX(effectivity_date) 
																								FROM 
																									ums.rank_salary_rate
																								WHERE
																									(degree_id = @degree_id_level_points)))), '') +
								'][Salary Rate: ' + ISNULL(CONVERT(varchar, CONVERT(money, ((SELECT
																								rsr.previous_rate
																							FROM
																								ums.rank_salary_rate AS rsr
																							WHERE
																								(rsr.degree_id = @degree_id) AND
																								(rsr.effectivity_date = 
																								(SELECT 
																										MAX(effectivity_date) 
																									FROM 
																										ums.rank_salary_rate
																									WHERE
																										(degree_id = @degree_id)))) + 
																							(SELECT
																									rsr.increase_rate
																								FROM
																									ums.rank_salary_rate AS rsr
																								WHERE
																									(rsr.degree_id = @degree_id_level_points) AND
																									(rsr.effectivity_date = 
																									(SELECT 
																											MAX(effectivity_date) 
																										FROM 
																											ums.rank_salary_rate
																										WHERE
																											(degree_id = @degree_id_level_points)))))), 1), '0.00') +
								'][Rate ID: ' + ISNULL(CONVERT(varchar, @rate_id), '') +
								'][Is Fixed Log-in and Log-out: ' + ISNULL(@fixed_loginout, '') +
								'][First Log-In: ' + ISNULL(@first_in, '') +
								'][First Log-Out: ' + ISNULL(@first_out, '') + 
								'][Second Log-In: ' + ISNULL(@second_in, '') +
								'][Second Log-Out: ' + ISNULL(@second_out, '') +
								'][Rest Day: ' + ISNULL((SELECT week_description FROM ums.week_day WHERE week_id = @rest_day), '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END

		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

	END

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Salary_Information_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Salary_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Salary_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Salary_Information_Trigger_Instead_Update
	ON  ums.salary_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar(MAX)
	DECLARE @transaction_done varchar(MAX)
	
	DECLARE @salary_id bigint
	DECLARE @sysid_employee varchar (50)
	DECLARE @effectivity_date datetime
	DECLARE @employment_id varchar (50)
	DECLARE @department_id varchar (50)
	DECLARE @status_id tinyint
	DECLARE @level_id varchar (50)
	DECLARE @category_id varchar (50)
	DECLARE @degree_id varchar (50)
	DECLARE @degree_id_level_points varchar (50)
	DECLARE @rate_id bigint
	DECLARE @is_fixed_loginout bit
	DECLARE @first_in varchar (12)
	DECLARE @first_out varchar (12)
	DECLARE @second_in varchar (12)
	DECLARE @second_out varchar (12)
	DECLARE @rest_day tinyint

	DECLARE @edited_by varchar (50)

	DECLARE @employment_id_b varchar (50)
	DECLARE @department_id_b varchar (50)
	DECLARE @status_id_b tinyint
	DECLARE @level_id_b varchar (50)
	DECLARE @category_id_b varchar (50)
	DECLARE @degree_id_b varchar (50)
	DECLARE @degree_id_level_points_b varchar (50)
	DECLARE @rate_id_b bigint
	DECLARE @is_fixed_loginout_b bit
	DECLARE @first_in_b varchar (12)
	DECLARE @first_out_b varchar (12)
	DECLARE @second_in_b varchar (12)
	DECLARE @second_out_b varchar (12)
	DECLARE @rest_day_b tinyint

	DECLARE @has_update bit

	DECLARE @fixed_loginout varchar (50)
	DECLARE @fixed_loginout_b varchar (50)
	
	SELECT 
		@salary_id = salary_id,
		@sysid_employee = sysid_employee,
		@effectivity_date = effectivity_date,
		@employment_id = employment_id,
		@department_id = department_id,
		@status_id = status_id,
		@level_id = level_id,
		@category_id = category_id,
		@degree_id = degree_id,
		@degree_id_level_points = degree_id_level_points,
		@rate_id = rate_id, 
		@is_fixed_loginout = is_fixed_loginout,
		@first_in = first_in,
		@first_out = first_out,
		@second_in = second_in,
		@second_out = second_out,
		@rest_day = rest_day,
		@edited_by = edited_by	
	FROM INSERTED	

	SELECT 
		@employment_id_b = employment_id,
		@department_id_b = department_id,
		@status_id_b = status_id,
		@level_id_b = level_id,
		@category_id_b = category_id,
		@degree_id_b = degree_id,
		@degree_id_level_points_b = degree_id_level_points,
		@rate_id_b = rate_id,
		@is_fixed_loginout_b = is_fixed_loginout,
		@first_in_b = first_in,
		@first_out_b = first_out,
		@second_in_b = second_in,
		@second_out_b = second_out,
		@rest_day_b = rest_day
	FROM 
		ums.salary_information
	WHERE
		salary_id = @salary_id

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT ISNULL(@employment_id, '') = ISNULL(@employment_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Employment Type Before: ' + ISNULL((SELECT type_description FROM ums.employment_type WHERE employment_id = @employment_id_b), '') + ']' +
													'[Employment Type After: ' + ISNULL((SELECT type_description FROM ums.employment_type WHERE employment_id = @employment_id), '') + ']' 
		SET @has_update = 1
	END	

	IF NOT ISNULL(@department_id, '') = ISNULL(@department_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Department Before: ' + ISNULL((SELECT department_name FROM ums.department_information WHERE department_id = @department_id_b), '') + ']' +
													'[Department After: ' + ISNULL((SELECT department_name FROM ums.department_information WHERE department_id = @department_id), '') + ']' 
		SET @has_update = 1
	END	
	
	IF NOT ISNULL(@status_id, '') = ISNULL(@status_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Employment Status Before: ' + ISNULL((SELECT status_description FROM ums.employment_status WHERE status_id = @status_id_b), '') + ']' +
													'[Employment Status After: ' + ISNULL((SELECT status_description FROM ums.employment_status WHERE status_id = @status_id), '') + ']'	
		SET @has_update = 1		
	END

	IF NOT ISNULL(@level_id, '') = ISNULL(@level_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Rank Level Before: ' + ISNULL((SELECT level_description FROM ums.rank_level WHERE level_id = @level_id_b), '') + ']' +
													'[Rank Level After: ' + ISNULL((SELECT level_description FROM ums.rank_level WHERE level_id = @level_id), '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@category_id, '') = ISNULL(@category_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Rank Category Before: ' + ISNULL((SELECT category_description FROM ums.rank_category WHERE category_id = @category_id_b), '') + ']' +
													'[Rank Category After: ' + ISNULL((SELECT category_description FROM ums.rank_category WHERE category_id = @category_id), '') + ']'
		SET @has_update = 1
	END

	IF (NOT ISNULL(@degree_id, '') = ISNULL(@degree_id_b, '')) OR (NOT ISNULL(@degree_id_level_points, '') = ISNULL(@degree_id_level_points_b, ''))
	BEGIN
		SET @transaction_done = @transaction_done + '[Rank Degree (Previous Rate) And Points (Increase Rate) Before: ' + ISNULL((SELECT 
																								degree_description + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.previous_rate, 1)), '0.00') + ')'
																							FROM 
																								ums.rank_degree AS rd
																							INNER JOIN ums.rank_salary_rate AS rsr ON rsr.degree_id = rd.degree_id
																							WHERE 
																								(rd.degree_id = @degree_id_b) AND
																								(rsr.effectivity_date = (SELECT
																																MAX(effectivity_date)
																															FROM
																																ums.rank_salary_rate
																															WHERE
																																(degree_id = @degree_id_b)))) , '') + 
																							' - ' + ISNULL((SELECT
																												rsr.level_points + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.increase_rate, 1)), '0.00') + ')'
																											FROM
																												ums.rank_salary_rate AS rsr
																											WHERE
																												(rsr.degree_id = @degree_id_level_points_b) AND
																												(rsr.effectivity_date = 
																												(SELECT 
																														MAX(effectivity_date) 
																													FROM 
																														ums.rank_salary_rate
																													WHERE
																														(degree_id = @degree_id_level_points_b)))), '') +
													'][Salary Rate Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, ((SELECT
																													rsr.previous_rate
																												FROM
																													ums.rank_salary_rate AS rsr
																												WHERE
																													(rsr.degree_id = @degree_id_b) AND
																													(rsr.effectivity_date = 
																													(SELECT 
																															MAX(effectivity_date) 
																														FROM 
																															ums.rank_salary_rate
																														WHERE
																															(degree_id = @degree_id_b)))) + 
																												(SELECT
																														rsr.increase_rate
																													FROM
																														ums.rank_salary_rate AS rsr
																													WHERE
																														(rsr.degree_id = @degree_id_level_points_b) AND
																														(rsr.effectivity_date = 
																														(SELECT 
																																MAX(effectivity_date) 
																															FROM 
																																ums.rank_salary_rate
																															WHERE
																																(degree_id = @degree_id_level_points_b)))))), 1), '0.00') + ']' +
													'[Rank Degree (Previous Rate) And Points (Increase Rate) After: ' + ISNULL((SELECT 
																								degree_description + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.previous_rate, 1)), '0.00') + ')'
																							FROM 
																								ums.rank_degree AS rd
																							INNER JOIN ums.rank_salary_rate AS rsr ON rsr.degree_id = rd.degree_id
																							WHERE 
																								(rd.degree_id = @degree_id) AND
																								(rsr.effectivity_date = (SELECT
																																MAX(effectivity_date)
																															FROM
																																ums.rank_salary_rate
																															WHERE
																																(degree_id = @degree_id)))) , '') + 
																							' - ' + ISNULL((SELECT
																												rsr.level_points + ' (' + ISNULL(CONVERT(varchar, CONVERT(money, rsr.increase_rate, 1)), '0.00') + ')'
																											FROM
																												ums.rank_salary_rate AS rsr
																											WHERE
																												(rsr.degree_id = @degree_id_level_points) AND
																												(rsr.effectivity_date = 
																												(SELECT 
																														MAX(effectivity_date) 
																													FROM 
																														ums.rank_salary_rate
																													WHERE
																														(degree_id = @degree_id_level_points)))), '') +
													'][Salary Rate After: ' + ISNULL(CONVERT(varchar, CONVERT(money, ((SELECT
																													rsr.previous_rate
																												FROM
																													ums.rank_salary_rate AS rsr
																												WHERE
																													(rsr.degree_id = @degree_id) AND
																													(rsr.effectivity_date = 
																													(SELECT 
																															MAX(effectivity_date) 
																														FROM 
																															ums.rank_salary_rate
																														WHERE
																															(degree_id = @degree_id)))) + 
																												(SELECT
																														rsr.increase_rate
																													FROM
																														ums.rank_salary_rate AS rsr
																													WHERE
																														(rsr.degree_id = @degree_id_level_points) AND
																														(rsr.effectivity_date = 
																														(SELECT 
																																MAX(effectivity_date) 
																															FROM 
																																ums.rank_salary_rate
																															WHERE
																																(degree_id = @degree_id_level_points)))))), 1), '0.00') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@rate_id, '') = ISNULL(@rate_id_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Rate ID Before: ' + ISNULL(CONVERT(varchar, @rate_id_b), '') + ']' +
													'[Rate ID After: ' + ISNULL(CONVERT(varchar, @rate_id), '') + ']'
		SET @has_update = 1
	END

	IF NOT @is_fixed_loginout = @is_fixed_loginout_b
	BEGIN

		IF (@is_fixed_loginout_b = 1)
		BEGIN
			SET @fixed_loginout_b = 'YES'
		END
		ELSE
		BEGIN
			SET @fixed_loginout_b = 'NO'
		END

		IF (@is_fixed_loginout = 1)
		BEGIN
			SET @fixed_loginout = 'YES'
		END
		ELSE
		BEGIN
			SET @fixed_loginout = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Is Fixed Log-in and Log-out Before: ' + ISNULL(@fixed_loginout_b, '') + ']' +
													'[Is Fixed Log-in and Log-out After: ' + ISNULL(@fixed_loginout, '') + ']'
		SET @has_update = 1

	END

	IF NOT ISNULL(@first_in, '') = ISNULL(@first_in_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[First Log-In Before: ' + ISNULL(@first_in_b, '') + ']' +
													'[First Log-In After: ' + ISNULL(@first_in, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@first_out, '') = ISNULL(@first_out_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[First Log-Out Before: ' + ISNULL(@first_out_b, '') + ']' +
													'[First Log-Out After: ' + ISNULL(@first_out, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@second_in, '') = ISNULL(@second_in_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Second Log-In Before: ' + ISNULL(@second_in_b, '') + ']' +
													'[Second Log-In After: ' + ISNULL(@second_in, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@second_out, '') = ISNULL(@second_out_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Second Log-Out Before: ' + ISNULL(@second_out_b, '') + ']' +
													'[Second Log-Out After: ' + ISNULL(@second_out, '') + ']'									
		SET @has_update = 1
	END

	IF NOT ISNULL(CONVERT(varchar, @rest_day), '') = ISNULL(CONVERT(varchar, @rest_day_b), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Rest Day Before: ' + ISNULL((SELECT week_description FROM ums.week_day WHERE week_id = @rest_day_b), '') + ']' +
													'[Rest Day After: ' + ISNULL((SELECT week_description FROM ums.week_day WHERE week_id = @rest_day), '') + ']'
		SET @has_update = 1
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.salary_information SET
			employment_id = @employment_id,
			department_id = @department_id,
			status_id = @status_id,
			level_id = @level_id,
			category_id = @category_id,
			degree_id = @degree_id,
			degree_id_level_points = @degree_id_level_points,
			rate_id = @rate_id,
			is_fixed_loginout = @is_fixed_loginout,
			first_in = @first_in,
			first_out = @first_out,
			second_in = @second_in,
			second_out = @second_out,
			rest_day = @rest_day,

			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			salary_id = @salary_id		
	
		SET @transaction_done = 'UPDATED an employee salary information ' + 
								'[System ID: ' + @sysid_employee +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
								'][Employee Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	(epi.sysid_employee = @sysid_employee)), '') +
								'][Effectivity Date: ' + ISNULL((CONVERT(varchar, @effectivity_date, 101)), '') +
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END

		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
	END

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Salary_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Salary_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Salary_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Salary_Information_Trigger_Instead_Delete
	ON  ums.salary_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a salary information', 'Salary Information'
	
GO
-------------------------------------------------------------------------


-- #######################################END TABLE "salary_information" OBJECTS########################################################





-- ##########################################TABLE "employee_deduction" OBJECTS########################################################

/*verifies that the trigger "Employee_Deduction_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Employee_Deduction_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Deduction_Trigger_Insert
GO

CREATE TRIGGER ums.Employee_Deduction_Trigger_Insert
	ON  ums.employee_deduction
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @deduction_date datetime
	DECLARE @sysid_deduction varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@deduction_date = deduction_date,
		@sysid_deduction = sysid_deduction,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@created_by = created_by
	FROM INSERTED	

	SET @transaction_done = 'CREATED an employee deduction ' + 
							'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +
							'][Deduction Date: ' + ISNULL(CONVERT(varchar, @deduction_date, 101), '') +
							'][Deduction Description: ' + ISNULL((SELECT deduction_description FROM ums.deduction_information 
														WHERE sysid_deduction = @sysid_deduction), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Employee_Deduction_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Employee_Deduction_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Deduction_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Employee_Deduction_Trigger_Instead_Update
	ON  ums.employee_deduction
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @deduction_id bigint
	DECLARE @deduction_date datetime
	DECLARE @sysid_deduction varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @edited_by varchar (50)
	DECLARE @has_update bit

	DECLARE @deduction_date_b datetime
	DECLARE @amount_b decimal (12, 2)
	
	SELECT 
		@deduction_id = deduction_id,
		@deduction_date = deduction_date,
		@sysid_deduction = sysid_deduction,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@edited_by = edited_by
	FROM INSERTED	

	SELECT
		@deduction_date_b = deduction_date,
		@amount_b = amount
	FROM
		ums.employee_deduction
	WHERE
		deduction_id = @deduction_id		

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT @deduction_date = @deduction_date_b
	BEGIN
		SET @transaction_done = @transaction_done + '[Deduction Date Before: ' + ISNULL(CONVERT(varchar, @deduction_date_b, 101), '') + ']' +
													'[Deduction Date After: ' + ISNULL(CONVERT(varchar, @deduction_date, 101), '') + ']'
		SET @has_update = 1
	END

	IF NOT @amount = @amount_b
	BEGIN
		SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
													'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
		SET @has_update = 1		
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.employee_deduction SET
			deduction_date = @deduction_date,			
			amount = @amount,
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			deduction_id = @deduction_id
		
		SET @transaction_done = 'UPDATED an employee deduction ' + 
								'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
																WHERE sysid_employee = @sysid_employee), '') +	
								'][Employee Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	(epi.sysid_employee = @sysid_employee)), '') +							
								'][Deduction Description: ' + ISNULL((SELECT deduction_description FROM ums.deduction_information 
															WHERE sysid_deduction = @sysid_deduction), '') + 
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

	END	
	ELSE IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE ums.employee_deduction SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			deduction_id = @deduction_id

	END
	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Employee_Deduction_Trigger_Delete" already exist*/
IF OBJECT_ID ('ums.Employee_Deduction_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Deduction_Trigger_Delete
GO

CREATE TRIGGER ums.Employee_Deduction_Trigger_Delete
	ON  ums.employee_deduction
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @deduction_id bigint
	DECLARE @deduction_date datetime
	DECLARE @sysid_deduction varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @deleted_by varchar (50)
	
	SELECT 
		@deduction_id = deduction_id,
		@deduction_date = deduction_date,
		@sysid_deduction = sysid_deduction,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@deleted_by = edited_by
	FROM DELETED	

	SET @transaction_done = 'DELETED an employee deduction ' + 
							'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +
							'][Deduction Date: ' + ISNULL(CONVERT(varchar, @deduction_date, 101), '') +
							'][Deduction Description: ' + ISNULL((SELECT deduction_description FROM ums.deduction_information 
														WHERE sysid_deduction = @sysid_deduction), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END
			
	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

-- ########################################END TABLE "employee_deduction" OBJECTS########################################################




-- ##########################################TABLE "employee_earning" OBJECTS########################################################

/*verifies that the trigger "Employee_Earning_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Employee_Earning_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Earning_Trigger_Insert
GO

CREATE TRIGGER ums.Employee_Earning_Trigger_Insert
	ON  ums.employee_earning
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @earning_date datetime
	DECLARE @sysid_earning varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@earning_date = earning_date,
		@sysid_earning = sysid_earning,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@created_by = created_by
	FROM INSERTED	

	SET @transaction_done = 'CREATED an employee earning ' + 
							'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +
							'][Earning Date: ' + ISNULL(CONVERT(varchar, @earning_date, 101), '') +
							'][Earning Description: ' + ISNULL((SELECT earning_description FROM ums.earning_information 
														WHERE sysid_earning = @sysid_earning), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Employee_Earning_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Employee_Earning_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Earning_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Employee_Earning_Trigger_Instead_Update
	ON  ums.employee_earning
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @earning_id bigint
	DECLARE @earning_date datetime
	DECLARE @sysid_earning varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @edited_by varchar (50)
	DECLARE @has_update bit

	DECLARE @earning_date_b datetime
	DECLARE @amount_b decimal (12, 2)
	
	SELECT 
		@earning_id = earning_id,
		@earning_date = earning_date,
		@sysid_earning = sysid_earning,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@edited_by = edited_by
	FROM INSERTED	

	SELECT
		@earning_date_b = earning_date,
		@amount_b = amount
	FROM
		ums.employee_earning
	WHERE
		earning_id = @earning_id		

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT @earning_date = @earning_date_b
	BEGIN
		SET @transaction_done = @transaction_done + '[Earning Date Before: ' + ISNULL(CONVERT(varchar, @earning_date_b, 101), '') + ']' +
													'[Earning Date After: ' + ISNULL(CONVERT(varchar, @earning_date, 101), '') + ']'
		SET @has_update = 1
	END

	IF NOT @amount = @amount_b
	BEGIN
		SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
													'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
		SET @has_update = 1		
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.employee_earning SET
			earning_date = @earning_date,			
			amount = @amount,
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			earning_id = @earning_id
		
		SET @transaction_done = 'UPDATED an employee earning ' + 
								'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
																WHERE sysid_employee = @sysid_employee), '') +
								'][Employee Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	(epi.sysid_employee = @sysid_employee)), '') +							
								'][Earning Description: ' + ISNULL((SELECT earning_description FROM ums.earning_information 
															WHERE sysid_earning = @sysid_earning), '') + 
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

	END	
	ELSE IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE ums.employee_earning SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			earning_id = @earning_id

	END	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Employee_Earning_Trigger_Delete" already exist*/
IF OBJECT_ID ('ums.Employee_Earning_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Earning_Trigger_Delete
GO

CREATE TRIGGER ums.Employee_Earning_Trigger_Delete
	ON  ums.employee_earning
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @earning_id bigint
	DECLARE @earning_date datetime
	DECLARE @sysid_earning varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @deleted_by varchar (50)
	
	SELECT 
		@earning_id = earning_id,
		@earning_date = earning_date,
		@sysid_earning = sysid_earning,
		@sysid_employee = sysid_employee,
		@amount = amount,
		@deleted_by = edited_by
	FROM DELETED	

	SET @transaction_done = 'DELETED an employee earning ' + 
							'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +
							'][Earning Date: ' + ISNULL(CONVERT(varchar, @earning_date, 101), '') +
							'][Earning Description: ' + ISNULL((SELECT earning_description FROM ums.earning_information 
														WHERE sysid_earning = @sysid_earning), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END
			
	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/


-- ########################################END TABLE "employee_earning" OBJECTS########################################################




-- ##########################################TABLE "loan_remittance" OBJECTS###########################################################

/*verifies that the trigger "Loan_Remittance_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Loan_Remittance_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Loan_Remittance_Trigger_Insert
GO

CREATE TRIGGER ums.Loan_Remittance_Trigger_Insert
	ON  ums.loan_remittance
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_remittance varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @sysid_loan varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @release_date datetime
	DECLARE @maturity_date datetime
	DECLARE @principal_interest decimal (12, 2)
	DECLARE @monthly_pay decimal (12, 2)
	DECLARE @created_by varchar (50)
	
	SELECT 
		@sysid_remittance = sysid_remittance,
		@sysid_employee = sysid_employee,
		@sysid_loan = sysid_loan,
		@reference_no = reference_no,
		@release_date = release_date,
		@maturity_date = maturity_date,
		@principal_interest = principal_interest,
		@monthly_pay = monthly_pay,
		@created_by = created_by
	FROM INSERTED	

	SET @transaction_done = 'CREATED a loan remittance ' + 
							'[Remittance ID: ' + @sysid_remittance +
							'[Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +
							'][Loan ID: ' + ISNULL(@reference_no, '') +
							'][Loan Type: ' + ISNULL((SELECT loan_description FROM ums.loan_type_information WHERE sysid_loan = @sysid_loan), '') +							
							'][Release Date: ' + ISNULL(CONVERT(varchar, @release_date, 101), '') +
							'][Maturity Date: ' + ISNULL(CONVERT(varchar, @maturity_date, 101), '') +														
							'][Principal Amount with Interest: ' + ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest), 1), '0.00') +
							'][Monthly Ammortization: ' + ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Loan_Remittance_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Loan_Remittance_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Loan_Remittance_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Loan_Remittance_Trigger_Instead_Update
	ON  ums.loan_remittance
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_remittance varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @sysid_loan varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @release_date datetime
	DECLARE @maturity_date datetime
	DECLARE @principal_interest decimal (12, 2)
	DECLARE @monthly_pay decimal (12, 2)
	DECLARE @edited_by varchar (50)

	DECLARE @sysid_loan_b varchar (50)
	DECLARE @reference_no_b varchar (100)
	DECLARE @release_date_b datetime
	DECLARE @maturity_date_b datetime
	DECLARE @principal_interest_b decimal (12, 2)
	DECLARE @monthly_pay_b decimal (12, 2)

	DECLARE @has_update bit
	
	SELECT 
		@sysid_remittance = sysid_remittance,
		@sysid_employee = sysid_employee,
		@sysid_loan = sysid_loan,
		@reference_no = reference_no,
		@release_date = release_date,
		@maturity_date = maturity_date,
		@principal_interest = principal_interest,
		@monthly_pay = monthly_pay,
		@edited_by = edited_by
	FROM INSERTED	

	SELECT
		@sysid_loan_b = sysid_loan,
		@reference_no_b = reference_no,
		@release_date_b = release_date,
		@maturity_date_b = maturity_date,
		@principal_interest_b = principal_interest,
		@monthly_pay_b = monthly_pay
	FROM ums.loan_remittance
	WHERE
		sysid_remittance = @sysid_remittance

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT ISNULL(@reference_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@reference_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Loan ID Before: ' + ISNULL(@reference_no_b, '') + ']' +
													'[Loan ID After: ' + ISNULL(@reference_no, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@sysid_loan, '') = ISNULL(@sysid_loan_b, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Loan Type Before: ' + ISNULL((SELECT loan_description FROM ums.loan_type_information WHERE sysid_loan = @sysid_loan_b), '') + ']' +
													'[Loan Type After: ' + ISNULL((SELECT loan_description FROM ums.loan_type_information WHERE sysid_loan = @sysid_loan), '') + ']'
		SET @has_update = 1
	END	

	IF NOT ISNULL(CONVERT(varchar, @release_date, 101), '') = ISNULL(CONVERT(varchar, @release_date_b, 101), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Release Date Before: ' + ISNULL(CONVERT(varchar, @release_date_b, 101), '') + ']' +
													'[Release Date After: ' + ISNULL(CONVERT(varchar, @release_date, 101), '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(CONVERT(varchar, @maturity_date, 101), '') = ISNULL(CONVERT(varchar, @maturity_date_b, 101), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Maturity Date Before: ' + ISNULL(CONVERT(varchar, @maturity_date_b, 101), '') + ']' +
													'[Maturity Date After: ' + ISNULL(CONVERT(varchar, @maturity_date, 101), '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest_b), 1), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Principal Amount with Interest Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest_b), 1), '0.00') + ']' +
													'[Principal Amount with Interest After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest), 1), '0.00') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay_b), 1), '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Monthly Ammortization Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay_b), 1), '0.00') + ']' +
													'[Monthly Ammortization After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay), 1), '0.00') + ']'
		SET @has_update = 1
	END
	
	IF @has_update = 1
	BEGIN

		UPDATE ums.loan_remittance SET
			sysid_loan = @sysid_loan,
			reference_no = @reference_no,
			release_date = @release_date,
			maturity_date = @maturity_date,
			principal_interest = @principal_interest,
			monthly_pay = @monthly_pay,
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_remittance = @sysid_remittance

		SET @transaction_done = 'UPDATED a loan remittance ' + 
								'[Remittance ID: ' + @sysid_remittance +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
																WHERE sysid_employee = @sysid_employee), '') +
								'][Employee Name: ' + ISNULL((SELECT 
																		pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																	FROM
																		ums.person_information AS pri
																	INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																	WHERE 
																		(epi.sysid_employee = @sysid_employee)), '') +
								']' + @transaction_done

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

	END	
	ELSE IF NOT @edited_by IS NULL
	BEGIN

		--used for the delete trigger
		UPDATE ums.loan_remittance SET
			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_remittance = @sysid_remittance

	END

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Loan_Remittance_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Loan_Remittance_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Loan_Remittance_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Loan_Remittance_Trigger_Instead_Delete
	ON  ums.loan_remittance
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_remittance varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @sysid_loan varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @release_date datetime
	DECLARE @maturity_date datetime
	DECLARE @principal_interest decimal (12, 2)
	DECLARE @monthly_pay decimal (12, 2)
	DECLARE @deleted_by varchar (50)
	
	SELECT 
		@sysid_remittance = sysid_remittance,
		@sysid_employee = sysid_employee,
		@sysid_loan = sysid_loan,
		@reference_no = reference_no,
		@release_date = release_date,
		@maturity_date = maturity_date,
		@principal_interest = principal_interest,
		@monthly_pay = monthly_pay,
		@deleted_by = edited_by
	FROM DELETED	

	INSERT INTO ums.loan_remittance_audit
	(
		sysid_remittance,
		sysid_employee,
		sysid_loan,
		reference_no,
		release_date,
		maturity_date,
		principal_interest,
		monthly_pay,
		deleted_by
	)
	VALUES
	(
		@sysid_remittance,
		@sysid_employee,
		@sysid_loan,
		@reference_no,
		@release_date,
		@maturity_date,
		@principal_interest,
		@monthly_pay,
		@deleted_by
	)

	DELETE FROM ums.loan_remittance WHERE sysid_remittance = @sysid_remittance

	SET @transaction_done = 'DELETED a loan remittance ' + 
							'[Remittance ID: ' + @sysid_remittance +
							'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +	
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +						
							'][Loan ID: ' + ISNULL(@reference_no, '') +
							'][Loan Type: ' + ISNULL((SELECT loan_description FROM ums.loan_type_information WHERE sysid_loan = @sysid_loan), '') +
							'][Release Date: ' + ISNULL(CONVERT(varchar, @release_date, 101), '') +
							'][Maturity Date: ' + ISNULL(CONVERT(varchar, @maturity_date, 101), '') +							
							'][Principal Amount with Interest: ' + ISNULL(CONVERT(varchar, CONVERT(money, @principal_interest), 1), '0.00') +
							'][Monthly Ammortization: ' + ISNULL(CONVERT(varchar, CONVERT(money, @monthly_pay), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
	END
			
	EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

-- verifies if the procedure "SelectEmployeeInformationLoanRemittance" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectEmployeeInformationLoanRemittance')
   DROP PROCEDURE ums.SelectEmployeeInformationLoanRemittance
GO

CREATE PROCEDURE ums.SelectEmployeeInformationLoanRemittance

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsPayrollMasterSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT 
			epi.sysid_employee AS sysid_employee,
			epi.employee_id AS employee_id,
			epi.card_number AS card_number,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			si.status_id AS status_id,
			ums.GetCountOutstandingLoans(epi.sysid_employee) AS outstanding_loans
		FROM
			ums.employee_information AS epi
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = epi.sysid_employee
		WHERE
			(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = epi.sysid_employee))
		ORDER BY pri.last_name ASC
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a loan information', 'Loan Remittance'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectEmployeeInformationLoanRemittance TO db_umsusers
GO
-------------------------------------------------------------

-- ########################################END TABLE "loan_remittance" OBJECTS###########################################################





-- ##########################################TABLE "employee_remittance" OBJECTS###########################################################

/*verifies that the trigger "Employee_Remittance_Trigger_Insert" already exist*/
IF OBJECT_ID ('ums.Employee_Remittance_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Remittance_Trigger_Insert
GO

CREATE TRIGGER ums.Employee_Remittance_Trigger_Insert
	ON  ums.employee_remittance
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @remittance_id bigint
	DECLARE @sysid_employee varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @loan_description varchar (50)
	DECLARE @remittance_date datetime
	DECLARE @pay_month smallint
	DECLARE @pay_balance smallint
	DECLARE @amount_paid decimal (12, 2)
	DECLARE @amount_balance decimal (12, 2)
	DECLARE @created_by varchar (50)
	
	SELECT 
		@remittance_id = i.remittance_id,
		@sysid_employee = lr.sysid_employee,
		@reference_no = lr.reference_no,
		@loan_description = lti.loan_description,
		@remittance_date = i.remittance_date,
		@pay_month = i.pay_month,
		@pay_balance = i.pay_balance,
		@amount_paid = i.amount_paid,
		@amount_balance = i.amount_balance,
		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.loan_remittance AS lr ON lr.sysid_remittance = i.sysid_remittance
	INNER JOIN ums.loan_type_information AS lti ON lti.sysid_loan = lr.sysid_loan

	SET @transaction_done = 'CREATED an employee remittance ' + 
							'[Remittance ID: ' + CONVERT(varchar, @remittance_id) +
							'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
															WHERE sysid_employee = @sysid_employee), '') +	
							'][Employee Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
															FROM
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																(epi.sysid_employee = @sysid_employee)), '') +							
							'][Loan ID: ' + ISNULL(@reference_no, '') +
							'][Loan Type: ' + ISNULL(@loan_description, '') +
							'][Remittance Date: ' + ISNULL(CONVERT(varchar, @remittance_date, 101), '') +
							'][Payment Month: ' + ISNULL(CONVERT(varchar, @pay_month), '') +
							'][Payment Month Remaining: ' + ISNULL(CONVERT(varchar, @pay_balance), '') +
							'][Amount Paid: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid), 1), '0.00') +								
							'][Amount Balance: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

/*verifies that the trigger "Employee_Remittance_Trigger_Instead_Update" already exist*/
IF OBJECT_ID ('ums.Employee_Remittance_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Remittance_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Employee_Remittance_Trigger_Instead_Update
	ON  ums.employee_remittance
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @remittance_id bigint
	DECLARE @sysid_employee varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @loan_description varchar (50)
	DECLARE @remittance_date datetime
	DECLARE @pay_month smallint
	DECLARE @pay_balance smallint
	DECLARE @amount_paid decimal (12, 2)
	DECLARE @amount_balance decimal (12, 2)
	DECLARE @edited_by varchar (50)

	DECLARE @remittance_date_b datetime
	DECLARE @pay_month_b smallint
	DECLARE @pay_balance_b smallint
	DECLARE @amount_paid_b decimal (12, 2)
	DECLARE @amount_balance_b decimal (12, 2)

	DECLARE @has_update bit
	
	DECLARE employee_remittance_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.remittance_id, lr.sysid_employee, lr.reference_no, lti.loan_description, i.remittance_date, i.pay_month, 
										i.pay_balance, i.amount_paid, i.amount_balance, i.edited_by
				FROM INSERTED AS i
				INNER JOIN ums.loan_remittance AS lr ON lr.sysid_remittance = i.sysid_remittance
				INNER JOIN ums.loan_type_information AS lti ON lti.sysid_loan = lr.sysid_loan
		
	OPEN employee_remittance_update_cursor

	FETCH NEXT FROM employee_remittance_update_cursor
		INTO @remittance_id, @sysid_employee, @reference_no, @loan_description, @remittance_date, @pay_month, 
				@pay_balance, @amount_paid, @amount_balance, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@remittance_date_b = remittance_date,
			@pay_month_b = pay_month,
			@pay_balance_b = pay_balance,
			@amount_paid_b = amount_paid,
			@amount_balance_b = amount_balance
		FROM 
			ums.employee_remittance
		WHERE
			remittance_id = @remittance_id

		SET @transaction_done = ''
		SET @has_update = 0	

		IF NOT ISNULL(CONVERT(varchar, @remittance_date, 101), '') = ISNULL(CONVERT(varchar, @remittance_date_b, 101), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remittance Date Before: ' + ISNULL(CONVERT(varchar, @remittance_date_b, 101), '') + ']' +
														'[Remittance Date After: ' + ISNULL(CONVERT(varchar, @remittance_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, @pay_month), '') = ISNULL(CONVERT(varchar, @pay_month_b), '') 
		BEGIN
			SET @transaction_done = @transaction_done + '[Payment Month Before: ' + ISNULL(CONVERT(varchar, @pay_month_b), '') + ']' +
														'[Payment Month After: ' + ISNULL(CONVERT(varchar, @pay_month), '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, @pay_balance), '') = ISNULL(CONVERT(varchar, @pay_balance_b), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Payment Month Remaining Before: ' + ISNULL(CONVERT(varchar, @pay_balance_b), '') + ']' +
														'[Payment Month Remaining After: ' + ISNULL(CONVERT(varchar, @pay_balance), '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid_b), 1), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Paid Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid_b), 1), '0.00') +	']' +
														'[Amount Paid After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid), 1), '0.00') + ']'
			SET @has_update = 1	
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance_b), 1), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Balance Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance_b), 1), '0.00') + ']' +
														'[Amount Balance After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.employee_remittance SET
				remittance_date = @remittance_date,
				pay_month = @pay_month,
				pay_balance = @pay_balance,
				amount_paid = @amount_paid,
				amount_balance = @amount_balance,
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				remittance_id = @remittance_id

			SET @transaction_done = 'UPDATED an employee remittance ' + 
									'[Remittance ID: ' + CONVERT(varchar, @remittance_id) +
									'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
																	WHERE sysid_employee = @sysid_employee), '') +
									'][Employee Name: ' + ISNULL((SELECT 
																		pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																	FROM
																		ums.person_information AS pri
																	INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																	WHERE 
																		(epi.sysid_employee = @sysid_employee)), '') +
									'][Loan ID: ' + ISNULL(@reference_no, '') +
									'][Loan Type: ' + ISNULL(@loan_description, '') + 
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END	
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.employee_remittance SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				remittance_id = @remittance_id

		END
		
		FETCH NEXT FROM employee_remittance_update_cursor
			INTO @remittance_id, @sysid_employee, @reference_no, @loan_description, @remittance_date, @pay_month, 
				@pay_balance, @amount_paid, @amount_balance, @edited_by

	END
	
	CLOSE employee_remittance_update_cursor
	DEALLOCATE employee_remittance_update_cursor

GO
/*-----------------------------------------------------------------*/


/*verifies that the trigger "Employee_Remittance_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Employee_Remittance_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Employee_Remittance_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Employee_Remittance_Trigger_Instead_Delete
	ON  ums.employee_remittance
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @remittance_id bigint
	DECLARE @sysid_employee varchar (50)
	DECLARE @reference_no varchar (100)
	DECLARE @loan_description varchar (50)
	DECLARE @remittance_date datetime
	DECLARE @pay_month smallint
	DECLARE @pay_balance smallint
	DECLARE @amount_paid decimal (12, 2)
	DECLARE @amount_balance decimal (12, 2)
	DECLARE @deleted_by varchar (50)

	DECLARE employee_remittance_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.remittance_id, lr.sysid_employee, lr.reference_no, lti.loan_description, d.remittance_date, d.pay_month, 
										d.pay_balance, d.amount_paid, d.amount_balance, d.edited_by
				FROM DELETED AS d
				INNER JOIN ums.loan_remittance AS lr ON lr.sysid_remittance = d.sysid_remittance
				INNER JOIN ums.loan_type_information AS lti ON lti.sysid_loan = lr.sysid_loan
		
	OPEN employee_remittance_delete_cursor

	FETCH NEXT FROM employee_remittance_delete_cursor
		INTO @remittance_id, @sysid_employee, @reference_no, @loan_description, @remittance_date, @pay_month, 
				@pay_balance, @amount_paid, @amount_balance, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		DELETE FROM ums.employee_remittance WHERE remittance_id = @remittance_id

		SET @transaction_done = 'DELETED an employee remittance ' + 
								'[Remittance ID: ' + CONVERT(varchar, @remittance_id) +
								'][Employee ID: ' + ISNULL((SELECT employee_id FROM ums.employee_information 
																WHERE sysid_employee = @sysid_employee), '') +	
								'][Employee Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + + ' ' + ISNULL(pri.middle_name, '') 
																FROM
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	(epi.sysid_employee = @sysid_employee)), '') +							
								'][Loan ID: ' + ISNULL(@reference_no, '') +
								'][Loan Type: ' + ISNULL(@loan_description, '') +
								'][Remittance Date: ' + ISNULL(CONVERT(varchar, @remittance_date, 101), '') +
								'][Payment Month: ' + ISNULL(CONVERT(varchar, @pay_month), '') +
								'][Payment Month Remaining: ' + ISNULL(CONVERT(varchar, @pay_balance), '') +
								'][Amount Paid: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_paid), 1), '0.00') +								
								'][Amount Balance: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_balance), 1), '0.00') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	
			
		FETCH NEXT FROM employee_remittance_delete_cursor
			INTO @remittance_id, @sysid_employee, @reference_no, @loan_description, @remittance_date, @pay_month, 
				@pay_balance, @amount_paid, @amount_balance, @deleted_by

	END
	
	CLOSE employee_remittance_delete_cursor
	DEALLOCATE employee_remittance_delete_cursor

GO
/*-----------------------------------------------------------------*/

-- ##########################################END TABLE "employee_remittance" OBJECTS###########################################################





-- ##########################################TABLE "student_information" OBJECTS########################################################

--verifies that the trigger "Student_Information_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Information_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Information_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Information_Trigger_Insert
	ON  ums.student_information
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_person varchar (50)
	DECLARE @e_code varchar (50)
	DECLARE @last_name varchar (50)
	DECLARE @first_name varchar (50)
	DECLARE @middle_name varchar (50)
	DECLARE @life_status_code varchar (50)
	DECLARE @gender_code varchar (50)
	DECLARE @birthdate datetime
	DECLARE @place_birth varchar (500)
	DECLARE @email_address varchar (100)
	DECLARE @present_address varchar (500)
	DECLARE @present_phone_nos varchar (100)
	DECLARE @home_address varchar (500)
	DECLARE @home_phone_nos varchar (100)
	DECLARE @citizenship varchar (100)
	DECLARE @nationality varchar (100)
	DECLARE @religion varchar (100)
	DECLARE @marital_status_code varchar (50)
	DECLARE @marriage_date datetime
	DECLARE @other_person_information varchar (MAX)

	DECLARE @sysid_student varchar (50)
	DECLARE @student_id varchar (50)
	DECLARE @scholarship varchar (50)
	DECLARE @is_international bit
	DECLARE @is_no_downpayment_required bit
	DECLARE @other_student_information varchar (50)
	DECLARE @has_hs_card bit
	DECLARE @has_hon_dismissal bit
	DECLARE @has_tor bit
	DECLARE @has_good_moral bit
	DECLARE @has_birth_cert bit
	DECLARE @has_marriage_contract bit
	DECLARE @has_latest_photo bit
	DECLARE @has_ncae_result bit
	
	DECLARE @created_by varchar (50)

	DECLARE @international varchar (50)
	DECLARE @downpayment_required varchar (50)
	DECLARE @hs_card varchar (50)
	DECLARE @hon_dismissal varchar (50)
	DECLARE @tor varchar (50)
	DECLARE @good_moral varchar (50)
	DECLARE @birth_cert varchar (50)
	DECLARE @marriage_contract varchar (50)
	DECLARE @latest_photo varchar (50)
	DECLARE @ncae_result varchar (50)

	SELECT 
		@sysid_person = pri.sysid_person,
		@e_code = pri.e_code,
		@last_name = pri.last_name,
		@first_name = pri.first_name,
		@middle_name = pri.middle_name,
		@life_status_code = pri.life_status_code,
		@gender_code = pri.gender_code,
		@birthdate = pri.birthdate,
		@place_birth = pri.place_birth,
		@email_address = pri.email_address,
		@present_address = pri.present_address,
		@present_phone_nos = pri.present_phone_nos,
		@home_address = pri.home_address,
		@home_phone_nos = pri.home_phone_nos,
		@citizenship = pri.citizenship,
		@nationality = pri.nationality,
		@religion = pri.religion,
		@marital_status_code = pri.marital_status_code,
		@marriage_date = pri.marriage_date,
		@other_person_information = pri.other_person_information,
		
		@sysid_student = i.sysid_student,
		@student_id = i.student_id,
		@scholarship = i.scholarship,
		@is_international = i.is_international,
		@is_no_downpayment_required = i.is_no_downpayment_required,
		@other_student_information = i.other_student_information,
		@has_hs_card = i.has_hs_card,
		@has_hon_dismissal = i.has_hon_dismissal,
		@has_tor = i.has_tor,
		@has_good_moral = i.has_good_moral,
		@has_birth_cert = i.has_birth_cert,
		@has_marriage_contract = i.has_marriage_contract,
		@has_latest_photo = i.has_latest_photo,
		@has_ncae_result = i.has_ncae_result,

		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.person_information AS pri ON pri.sysid_person = i.sysid_person

	IF @is_international = 1
	BEGIN
		SET @international = 'YES'
	END
	ELSE
	BEGIN
		SET @international = 'NO'
	END

	IF @is_no_downpayment_required = 1
	BEGIN
		SET @downpayment_required = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment_required = 'NO'
	END
	
	IF @has_hs_card = 1
	BEGIN
		SET @hs_card = 'YES'
	END
	ELSE
	BEGIN
		SET @hs_card = 'NO'
	END
	
	IF @has_hon_dismissal = 1
	BEGIN
		SET @hon_dismissal = 'YES'
	END
	ELSE
	BEGIN
		SET @hon_dismissal = 'NO'
	END
	
	IF @has_tor = 1
	BEGIN
		SET @tor = 'YES'
	END
	ELSE
	BEGIN
		SET @tor = 'NO'
	END
	
	IF @has_good_moral = 1
	BEGIN
		SET @good_moral = 'YES'
	END
	ELSE
	BEGIN
		SET @good_moral = 'NO'
	END
	
	IF @has_birth_cert = 1
	BEGIN
		SET @birth_cert = 'YES'
	END
	ELSE
	BEGIN
		SET @birth_cert = 'NO'
	END
	
	IF @has_marriage_contract = 1
	BEGIN
		SET @marriage_contract = 'YES'
	END
	ELSE
	BEGIN
		SET @marriage_contract = 'NO'
	END
	
	IF @has_latest_photo = 1
	BEGIN
		SET @latest_photo = 'YES'
	END
	ELSE
	BEGIN
		SET @latest_photo = 'NO'
	END
	
	IF @has_ncae_result = 1
	BEGIN
		SET @ncae_result = 'YES'
	END
	ELSE
	BEGIN
		SET @ncae_result = 'NO'
	END

	SET @transaction_done = 'CREATED a student information ' + 
							'[System ID: ' + ISNULL(@sysid_student, '') +				
							'][Person System ID: ' + ISNULL(@sysid_person, '') +
							'][E-Code: ' + ISNULL(@e_code, '') +
							'][Name: ' + @last_name + ', ' + @first_name + ' ' + ISNULL(@middle_name, '') +
							'][Life Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @life_status_code), '') +
							'][Gender: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @gender_code), '') +
							'][Birthdate: ' + ISNULL(CONVERT(varchar, @birthdate, 101), '') +
							'][Place of Birth: ' + ISNULL(@place_birth, '') +
							'][Email Address: ' + ISNULL(@email_address, '') +
							'][Present Address: ' + ISNULL(@present_address, '') +
							'][Present Phone Nos.: ' + ISNULL(@present_phone_nos, '') +
							'][Home Address: ' + ISNULL(@home_address, '') +
							'][Home Phone Nos.: ' + ISNULL(@home_phone_nos, '') +
							'][Citizenship: ' + ISNULL(@citizenship, '') +
							'][Nationality: ' + ISNULL(@nationality, '') +
							'][Religion: ' + ISNULL(@religion, '') +
							'][Marital Status: ' + ISNULL((SELECT
																crf.code_description
															FROM
																ums.code_reference AS crf
															WHERE
																crf.code_reference_id = @marital_status_code), '') +
							'][Marriage Date: ' + ISNULL(CONVERT(varchar, @marriage_date, 101), '') +
							'][Other Person Information: ' + ISNULL(@other_person_information, '') +
					
							'][Student ID: ' + ISNULL(@student_id, '') +
							'][Scholarship: ' + ISNULL(@scholarship, '') +
							'][Is International Student: ' + ISNULL(@international, '') +
							'][Is No Downpayment Required: ' + ISNULL(@downpayment_required, '') +
							'][Other Student Information: ' + ISNULL(@other_student_information, '') +
							'][Has High School Card (Form 138): ' + ISNULL(@hs_card, '') +
							'][Has Transfer Credential or Hon. Dismissal: ' + ISNULL(@hon_dismissal, '') +
							'][Has Evaluation Copy of TOR: ' + ISNULL(@tor, '') +
							'][Has Certificate of Good Moral Character: ' + ISNULL(@good_moral, '') +
							'][Has Authenticated Birth Certificate: ' + ISNULL(@birth_cert, '') +
							'][Has Authenticated Marriage Contract (if applicable): ' + ISNULL(@marriage_contract, '') +
							'][Has 2"x2" latest photo with tag: ' + ISNULL(@latest_photo, '') +
							'][Has NCAE Result: ' + ISNULL(@ncae_result, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Information_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Information_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Information_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Information_Trigger_Instead_Update
	ON  ums.student_information
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_student varchar (50)
	DECLARE @student_id varchar (50)
	DECLARE @card_number varchar (50)
	DECLARE @scholarship varchar (50)
	DECLARE @is_international bit
	DECLARE @is_no_downpayment_required bit
	DECLARE @other_student_information varchar (50)
	DECLARE @has_hs_card bit
	DECLARE @has_hon_dismissal bit
	DECLARE @has_tor bit
	DECLARE @has_good_moral bit
	DECLARE @has_birth_cert bit
	DECLARE @has_marriage_contract bit
	DECLARE @has_latest_photo bit
	DECLARE @has_ncae_result bit	

	DECLARE @edited_by varchar (50)

	DECLARE @student_id_b varchar (50)
	DECLARE @card_number_b varchar (50)
	DECLARE @scholarship_b varchar (50)
	DECLARE @is_international_b bit
	DECLARE @is_no_downpayment_required_b bit
	DECLARE @other_student_information_b varchar (50)
	DECLARE @has_hs_card_b bit
	DECLARE @has_hon_dismissal_b bit
	DECLARE @has_tor_b bit
	DECLARE @has_good_moral_b bit
	DECLARE @has_birth_cert_b bit
	DECLARE @has_marriage_contract_b bit
	DECLARE @has_latest_photo_b bit
	DECLARE @has_ncae_result_b bit

	DECLARE @sysid_person varchar (50)	

	DECLARE @has_update bit

	DECLARE @international varchar (50)
	DECLARE @international_b varchar (50)
	DECLARE @downpayment_required varchar (50)	
	DECLARE @downpayment_required_b varchar (50)
	DECLARE @hs_card varchar (50)
	DECLARE @hs_card_b varchar (50)
	DECLARE @hon_dismissal varchar (50)
	DECLARE @hon_dismissal_b varchar (50)
	DECLARE @tor varchar (50)
	DECLARE @tor_b varchar (50)
	DECLARE @good_moral varchar (50)
	DECLARE @good_moral_b varchar (50)
	DECLARE @birth_cert varchar (50)
	DECLARE @birth_cert_b varchar (50)
	DECLARE @marriage_contract varchar (50)
	DECLARE @marriage_contract_b varchar (50)
	DECLARE @latest_photo varchar (50)
	DECLARE @latest_photo_b varchar (50)
	DECLARE @ncae_result varchar (50)
	DECLARE @ncae_result_b varchar (50)
	
	SELECT 
		@sysid_student = i.sysid_student,
		@student_id = i.student_id,
		@card_number = i.card_number,
		@scholarship = i.scholarship,
		@is_international = i.is_international,
		@is_no_downpayment_required = i.is_no_downpayment_required,
		@other_student_information = i.other_student_information,
		@has_hs_card = i.has_hs_card,
		@has_hon_dismissal = i.has_hon_dismissal,
		@has_tor = i.has_tor,
		@has_good_moral = i.has_good_moral,
		@has_birth_cert = i.has_birth_cert,
		@has_marriage_contract = i.has_marriage_contract,
		@has_latest_photo = i.has_latest_photo,
		@has_ncae_result = i.has_ncae_result,

		@sysid_person = i.sysid_person,

		@edited_by = i.edited_by
	FROM INSERTED AS i

	SELECT 
		@student_id_b = sti.student_id,
		@card_number_b = sti.card_number,
		@scholarship_b = sti.scholarship,
		@is_international_b = sti.is_international,		
		@is_no_downpayment_required_b = sti.is_no_downpayment_required,
		@other_student_information_b = sti.other_student_information,
		@has_hs_card_b = sti.has_hs_card,
		@has_hon_dismissal_b = sti.has_hon_dismissal,
		@has_tor_b = sti.has_tor,
		@has_good_moral_b = sti.has_good_moral,
		@has_birth_cert_b = sti.has_birth_cert,
		@has_marriage_contract_b = sti.has_marriage_contract,
		@has_latest_photo_b = sti.has_latest_photo,
		@has_ncae_result_b = sti.has_ncae_result
	FROM 
		ums.student_information AS sti
	WHERE
		sysid_student = @sysid_student

	SET @transaction_done = ''
	SET @has_update = 0

	IF NOT ISNULL(@student_id COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@student_id_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Student ID Before: ' + ISNULL(@student_id_b, '') + ']' +
													'[Student ID After: ' + ISNULL(@student_id, '') + ']'
		SET @has_update = 1
	END
	ELSE
	BEGIN
		SET @transaction_done = @transaction_done + '[Student ID: ' + ISNULL(@student_id, '') + ']'
	END

	IF NOT ISNULL(@card_number COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@card_number_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Card Number Before: ' + ISNULL(@card_number_b, '') + ']' +
													'[Card Number After: ' + ISNULL(@card_number, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@scholarship COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@scholarship_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Scholarship Before: ' + ISNULL(@scholarship_b, '') + ']' +
													'[Scholarship After: ' + ISNULL(@scholarship, '') + ']'
		SET @has_update = 1
	END

	IF NOT @is_international = @is_international_b
	BEGIN
		
		IF @is_international = 1
		BEGIN
			SET @international = 'YES'
		END
		ELSE
		BEGIN
			SET @international = 'NO'
		END

		IF @is_international_b = 1
		BEGIN
			SET @international_b = 'YES'
		END
		ELSE
		BEGIN
			SET @international_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Is International Student Before: ' + ISNULL(@international_b, '') + ']' +
													'[Is International Student After: ' + ISNULL(@international, '') + ']'
		SET @has_update = 1
	END

	IF NOT @is_no_downpayment_required = @is_no_downpayment_required_b
	BEGIN
		
		IF @is_no_downpayment_required = 1
		BEGIN
			SET @downpayment_required = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment_required = 'NO'
		END

		IF @is_no_downpayment_required_b = 1
		BEGIN
			SET @downpayment_required_b = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment_required_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Is No Downpayment Required Before: ' + ISNULL(@downpayment_required_b, '') + ']' +
													'[Is No Downpayment Required After: ' + ISNULL(@downpayment_required, '') + ']'
		SET @has_update = 1
	END

	IF NOT ISNULL(@other_student_information COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@other_student_information_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
	BEGIN
		SET @transaction_done = @transaction_done + '[Other Student Information Before: ' + ISNULL(@other_student_information_b, '') + ']' +
													'[Other Student Information After: ' + ISNULL(@other_student_information, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_hs_card = @has_hs_card_b
	BEGIN
		
		IF @has_hs_card = 1
		BEGIN
			SET @hs_card = 'YES'
		END
		ELSE
		BEGIN
			SET @hs_card = 'NO'
		END

		IF @has_hs_card_b = 1
		BEGIN
			SET @hs_card_b = 'YES'
		END
		ELSE
		BEGIN
			SET @hs_card_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has High School Card (Form 138) Before: ' + ISNULL(@hs_card_b, '') + ']' +
													'[Has High School Card (Form 138) After: ' + ISNULL(@hs_card, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_hon_dismissal = @has_hon_dismissal_b
	BEGIN
		
		IF @has_hon_dismissal = 1
		BEGIN
			SET @hon_dismissal = 'YES'
		END
		ELSE
		BEGIN
			SET @hon_dismissal = 'NO'
		END

		IF @has_hon_dismissal_b = 1
		BEGIN
			SET @hon_dismissal_b = 'YES'
		END
		ELSE
		BEGIN
			SET @hon_dismissal_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has Transfer Credential or Hon. Dismissal Before: ' + ISNULL(@hon_dismissal_b, '') + ']' +
													'[Has Transfer Credential or Hon. Dismissal After: ' + ISNULL(@hon_dismissal, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_tor = @has_tor_b
	BEGIN
		
		IF @has_tor = 1
		BEGIN
			SET @tor = 'YES'
		END
		ELSE
		BEGIN
			SET @tor = 'NO'
		END

		IF @has_tor_b = 1
		BEGIN
			SET @tor_b = 'YES'
		END
		ELSE
		BEGIN
			SET @tor_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has Evaluation Copy of TOR Before: ' + ISNULL(@tor_b, '') + ']' +
													'[Has Evaluation Copy of TOR After: ' + ISNULL(@tor, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_good_moral = @has_good_moral_b
	BEGIN
		
		IF @has_good_moral = 1
		BEGIN
			SET @good_moral = 'YES'
		END
		ELSE
		BEGIN
			SET @good_moral = 'NO'
		END

		IF @has_good_moral_b = 1
		BEGIN
			SET @good_moral_b = 'YES'
		END
		ELSE
		BEGIN
			SET @good_moral_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has Certificate of Good Moral Character Before: ' + ISNULL(@good_moral_b, '') + ']' +
													'[Has Certificate of Good Moral Character After: ' + ISNULL(@good_moral, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_birth_cert = @has_birth_cert_b
	BEGIN
		
		IF @has_birth_cert = 1
		BEGIN
			SET @birth_cert = 'YES'
		END
		ELSE
		BEGIN
			SET @birth_cert = 'NO'
		END

		IF @has_birth_cert_b = 1
		BEGIN
			SET @birth_cert_b = 'YES'
		END
		ELSE
		BEGIN
			SET @birth_cert_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has Authenticated Birth Certificate Before: ' + ISNULL(@birth_cert_b, '') + ']' +
													'[Has Authenticated Birth Certificate After: ' + ISNULL(@birth_cert, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_marriage_contract = @has_marriage_contract_b
	BEGIN
		
		IF @has_marriage_contract = 1
		BEGIN
			SET @marriage_contract = 'YES'
		END
		ELSE
		BEGIN
			SET @marriage_contract = 'NO'
		END

		IF @has_marriage_contract_b = 1
		BEGIN
			SET @marriage_contract_b = 'YES'
		END
		ELSE
		BEGIN
			SET @marriage_contract_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has Authenticated Marriage Contract (if applicable) Before: ' + ISNULL(@marriage_contract_b, '') + ']' +
													'[Has Authenticated Marriage Contract (if applicable) After: ' + ISNULL(@marriage_contract, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_latest_photo = @has_latest_photo_b
	BEGIN
		
		IF @has_latest_photo = 1
		BEGIN
			SET @latest_photo = 'YES'
		END
		ELSE
		BEGIN
			SET @latest_photo = 'NO'
		END

		IF @has_latest_photo_b = 1
		BEGIN
			SET @latest_photo_b = 'YES'
		END
		ELSE
		BEGIN
			SET @latest_photo_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has 2"x2" latest photo with tag Before: ' + ISNULL(@latest_photo_b, '') + ']' +
													'[Has 2"x2" latest photo with tag After: ' + ISNULL(@latest_photo, '') + ']'
		SET @has_update = 1
	END
	
	IF NOT @has_ncae_result = @has_ncae_result_b
	BEGIN
		
		IF @has_ncae_result = 1
		BEGIN
			SET @ncae_result = 'YES'
		END
		ELSE
		BEGIN
			SET @ncae_result = 'NO'
		END

		IF @has_ncae_result_b = 1
		BEGIN
			SET @ncae_result_b = 'YES'
		END
		ELSE
		BEGIN
			SET @ncae_result_b = 'NO'
		END

		SET @transaction_done = @transaction_done + '[Has NCAE Result Before: ' + ISNULL(@ncae_result_b, '') + ']' +
													'[Has NCAE Result After: ' + ISNULL(@ncae_result, '') + ']'
		SET @has_update = 1
	END

	IF @has_update = 1
	BEGIN

		UPDATE ums.student_information SET
			student_id = @student_id,
			card_number = @card_number,
			scholarship = @scholarship,
			is_international = @is_international,
			is_no_downpayment_required = @is_no_downpayment_required,
			other_student_information = @other_student_information,
			has_hs_card = @has_hs_card,
			has_hon_dismissal = @has_hon_dismissal,
			has_tor = @has_tor,
			has_good_moral = @has_good_moral,
			has_birth_cert = @has_birth_cert,
			has_marriage_contract = @has_marriage_contract,
			has_latest_photo = @has_latest_photo,
			has_ncae_result = @has_ncae_result,

			edited_on = GETDATE(),
			edited_by = @edited_by
		WHERE
			sysid_student = @sysid_student

		SET @transaction_done = 'UPDATED a student information ' + 
								'[System ID: ' + ISNULL(@sysid_student, '') + 
								'][Name: ' + ISNULL((SELECT
															pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
														FROM
															ums.person_information AS pri
														WHERE
															(pri.sysid_person = @sysid_person)), '') +
								']' + @transaction_done						
							

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
		END
				
		EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
	END	

GO
-------------------------------------------------------------------------

-- verifies that the trigger "Student_Information_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Information_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Information_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Information_Trigger_Instead_Delete
	ON  ums.student_information
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a student information', 'Student Information'
	
GO
-------------------------------------------------------------------------

-- verifies if the procedure "InsertStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertStudentInformation')
   DROP PROCEDURE ums.InsertStudentInformation
GO

CREATE PROCEDURE ums.InsertStudentInformation

	@sysid_student varchar (50) = '',
	@student_id varchar (50) = '',
	@scholarship varchar (50) = '',
	@is_international bit = 0,
	@is_no_downpayment_required bit = 0,
	@other_student_information varchar (MAX) = '',
	
	@sysid_person varchar (50) = '',

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@created_by) = 1) OR (ums.IsCashierSystemUserInfo(@created_by) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@created_by) = 1)
	BEGIN

		IF (EXISTS (SELECT sysid_person FROM ums.person_information WHERE sysid_person = @sysid_person) AND
			NOT EXISTS (SELECT sysid_person FROM ums.student_information WHERE sysid_person = @sysid_person))
		BEGIN

			EXECUTE ums.CreateTemporaryTable @created_by, @network_information

			INSERT INTO ums.student_information
			(
				sysid_student,
				student_id,
				scholarship,
				is_international,
				is_no_downpayment_required,
				other_student_information,
				
				sysid_person,

				created_by
			)
			VALUES
			(
				@sysid_student,
				@student_id,
				@scholarship,
				@is_international,
				@is_no_downpayment_required,
				@other_student_information,
	
				@sysid_person,

				@created_by
			)		

		END
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Create a new student information', 'Student Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdateStudentInformation')
   DROP PROCEDURE ums.UpdateStudentInformation
GO

CREATE PROCEDURE ums.UpdateStudentInformation

	@sysid_student varchar (50) = '',
	@student_id varchar (50) = '',
	@scholarship varchar (50) = '',
	@is_international bit = 0,
	@is_no_downpayment_required bit = 0,
	@other_student_information varchar (MAX) = '',
	
	@has_hs_card bit = 0,
	@has_hon_dismissal bit = 0,
	@has_tor bit = 0,
	@has_good_moral bit = 0,
	@has_birth_cert bit = 0,
	@has_marriage_contract bit = 0,
	@has_latest_photo bit = 0,
	@has_ncae_result bit = 0,

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR
		(ums.IsCashierSystemUserInfo(@edited_by) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@edited_by) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.student_information SET
			student_id = @student_id,
			scholarship = @scholarship,
			is_international = @is_international,
			is_no_downpayment_required = @is_no_downpayment_required,
			other_student_information = @other_student_information,
	
			has_hs_card = @has_hs_card,
			has_hon_dismissal = @has_hon_dismissal,
			has_tor = @has_tor,
			has_good_moral = @has_good_moral,
			has_birth_cert = @has_birth_cert,
			has_marriage_contract = @has_marriage_contract,
			has_latest_photo = @has_latest_photo,
			has_ncae_result = @has_ncae_result,

			edited_by = @edited_by
		WHERE
			sysid_student = @sysid_student
		
	END
	ELSE IF (ums.IsStudentDataControllerSystemUserInfo(@edited_by) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.student_information SET
			other_student_information = @other_student_information,
	
			has_hs_card = @has_hs_card,
			has_hon_dismissal = @has_hon_dismissal,
			has_tor = @has_tor,
			has_good_moral = @has_good_moral,
			has_birth_cert = @has_birth_cert,
			has_marriage_contract = @has_marriage_contract,
			has_latest_photo = @has_latest_photo,
			has_ncae_result = @has_ncae_result,

			edited_by = @edited_by
		WHERE
			sysid_student = @sysid_student

	END
	ELSE
	BEGIN
		
		EXECUTE ums.ShowErrorMsg 'Update a student information', 'Student Information'

	END	
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdateStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "UpdateForIDMakerStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'UpdateForIDMakerStudentInformation')
   DROP PROCEDURE ums.UpdateForIDMakerStudentInformation
GO

CREATE PROCEDURE ums.UpdateForIDMakerStudentInformation

	@sysid_student varchar (50) = '',	
	@card_number varchar (50) = '',

	@network_information varchar (MAX) = '',
	@edited_by varchar (50) = ''	
		
AS
	
	IF (ums.IsSystemAdminSystemUserInfo(@edited_by) = 1) OR (ums.IsIDMakerSystemUserInfo(@edited_by) = 1)
	BEGIN

		EXECUTE ums.CreateTemporaryTable @edited_by, @network_information

		UPDATE ums.student_information SET			
			card_number = @card_number,

			edited_by = @edited_by
		WHERE
			sysid_student = @sysid_student

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Update a student information', 'Student Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.UpdateForIDMakerStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectStudentInformation')
   DROP PROCEDURE ums.SelectStudentInformation
GO

CREATE PROCEDURE ums.SelectStudentInformation

	@query_string varchar (50) = '',
	@date_start datetime,
	@date_end datetime,
	@course_id_list nvarchar (MAX) = '',
	@year_level_id_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF ums.IsActiveSystemUserInfo(@system_user_id) = 1
	BEGIN

		-- A - '*'
		-- B - Date Start / End
		-- C - Course
		-- D - Year Level

		--	A	B	C	D
		-- ===============
		--	0	0	0	0
		--	0	0	0	1
		--	0	0	1	0
		--	0	0	1	1
		--	0	1	0	0
		--	0	1	0	1
		--	0	1	1	0
		--	0	1	1	1
		--	1	0	0	0
		--	1	0	0	1
		--	1	0	1	0
		--	1	0	1	1
		--	1	1	0	0
		--	1	1	0	1
		--	1	1	1	0
		--	1	1	1	1

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0000)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH COURSE BUT WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT EXISTS (SELECT 
									t_sel.sysid_enrolmentlevel 
								FROM 
									ums.student_enrolment_level AS t_sel 
								WHERE 
									(t_sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse) AND
									(t_sel.is_marked_deleted = 0))) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITHOUT COURSE AND WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				NULL AS course_id,
				'false' AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,		
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				NULL AS department_id,
				NULL AS course_title,
				NULL AS course_acronym,
				NULL AS department_name,
				NULL AS department_acronym,
				NULL AS course_group_id,
				NULL AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			WHERE
				(sec.course_id IS NULL) AND
				(sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0001)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0010)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		--WITH COURSE BUT WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT EXISTS (SELECT 
									t_sel.sysid_enrolmentlevel 
								FROM 
									ums.student_enrolment_level AS t_sel 
								WHERE 
									(t_sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse) AND
									(t_sel.is_marked_deleted = 0))) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))	
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0011)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0100)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--WITH CURRENT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH CURRENT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT CURRENT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT CURRENT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0101)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0110)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0111)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.scholarship LIKE @query_string) OR 
				((REPLACE(si.scholarship, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1000)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			UNION ALL
			SELECT		--WITH COURSE BUT WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT EXISTS (SELECT 
									t_sel.sysid_enrolmentlevel 
								FROM 
									ums.student_enrolment_level AS t_sel 
								WHERE 
									(t_sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse) AND
									(t_sel.is_marked_deleted = 0)))
			UNION ALL
			SELECT		--WITHOUT COURSE AND WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				NULL AS course_id,
				'false' AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				NULL AS department_id,
				NULL AS course_title,
				NULL AS course_acronym,
				NULL AS department_name,
				NULL AS department_acronym,
				NULL AS course_group_id,
				NULL AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			WHERE
				(sec.course_id IS NULL) AND
				(sel.sysid_enrolmentlevel IS NULL)
			ORDER BY
				last_name, first_name, middle_name, student_id ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1001)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1010)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			UNION ALL
			SELECT		--WITH COURSE BUT WITHOUT YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				NULL AS sysid_enrolmentlevel,
				NULL AS sysid_feelevel,
				NULL AS sysid_semester,
				NULL AS is_graduate_student,
				NULL AS level_section,
				NULL AS course_major_title,
				NULL AS course_major_title_acronym,
				NULL AS year_level_id,
				NULL AS year_level_description,
				NULL AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				NULL AS year_description,
				NULL AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT EXISTS (SELECT 
									t_sel.sysid_enrolmentlevel 
								FROM 
									ums.student_enrolment_level AS t_sel 
								WHERE 
									(t_sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse) AND
									(t_sel.is_marked_deleted = 0)))
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1011)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1100)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)			
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1101)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1110)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1111)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				ISNULL(CONVERT(varchar, pri.birthdate), '') AS birthdate_string,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,
				crf_gender_code.reference_flag AS gender_code_reference_flag,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				cmi.course_major_title AS course_major_title,
				cmi.acronym AS course_major_title_acronym,
				yli.year_level_id AS year_level_id,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.course_group_id AS course_group_id,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id ASC
		END
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByStudentIDStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByStudentIDStudentInformation')
   DROP PROCEDURE ums.SelectByStudentIDStudentInformation
GO

CREATE PROCEDURE ums.SelectByStudentIDStudentInformation

	@student_id varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT 
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			si.other_student_information AS other_student_information,
			si.has_hs_card AS has_hs_card,
			si.has_hon_dismissal AS has_hon_dismissal,
			si.has_tor AS has_tor,
			si.has_good_moral AS has_good_moral,
			si.has_birth_cert AS has_birth_cert,
			si.has_marriage_contract AS has_marriage_contract,
			si.has_latest_photo AS has_latest_photo,
			si.has_ncae_result AS has_ncae_result,
			
			si.sysid_person AS sysid_person,

			ci.course_id AS course_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_id AS department_id,
			di.department_name AS department_name,
			di.acronym AS department_acronym
		FROM
			ums.student_information AS si
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student	
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id		
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id	
		WHERE 
			(si.student_id = @student_id) AND
			(NOT sec.course_id IS NULL) AND
			(sec.is_current_course = 1)
		UNION ALL
		SELECT 
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			si.other_student_information AS other_student_information,
			si.has_hs_card AS has_hs_card,
			si.has_hon_dismissal AS has_hon_dismissal,
			si.has_tor AS has_tor,
			si.has_good_moral AS has_good_moral,
			si.has_birth_cert AS has_birth_cert,
			si.has_marriage_contract AS has_marriage_contract,
			si.has_latest_photo AS has_latest_photo,
			si.has_ncae_result AS has_ncae_result,
			
			si.sysid_person AS sysid_person,

			NULL AS course_id,
			NULL AS course_title,
			NULL AS course_acronym,
			NULL AS department_id,
			NULL AS department_name,
			NULL AS department_acronym
		FROM
			ums.student_information AS si
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student	
		LEFT JOIN ums.course_information AS ci ON ci.course_id = sec.course_id							
		WHERE 
			(si.student_id = @student_id) AND
			(sec.course_id IS NULL)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByStudentIDStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDPersonStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDPersonStudentInformation')
   DROP PROCEDURE ums.SelectBySysIDPersonStudentInformation
GO

CREATE PROCEDURE ums.SelectBySysIDPersonStudentInformation

	@sysid_person varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT 
			si.student_id AS student_id
		FROM
			ums.student_information AS si	
		WHERE 
			(si.sysid_person = @sysid_person)
		
	END
	ELSE
	BEGIN				
		
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDPersonStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "GetCountStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'GetCountStudentInformation')
   DROP PROCEDURE ums.GetCountStudentInformation
GO

CREATE PROCEDURE ums.GetCountStudentInformation

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT COUNT(sysid_student) FROM ums.student_information
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.GetCountStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "GetCountForStudentIDStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'GetCountForStudentIDStudentInformation')
   DROP PROCEDURE ums.GetCountForStudentIDStudentInformation
GO

CREATE PROCEDURE ums.GetCountForStudentIDStudentInformation

	@sysid_schoolfee_list nvarchar (MAX),
	@year_level_id varchar (50) = '',
	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.GetCountForStudentIDStudentInfo(@sysid_schoolfee_list, @year_level_id)
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.GetCountForStudentIDStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistSysIDStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistSysIDStudentInformation')
   DROP PROCEDURE ums.IsExistSysIDStudentInformation
GO

CREATE PROCEDURE ums.IsExistSysIDStudentInformation

	@sysid_student varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN
	
		SELECT ums.IsExistSysIDStudentInfo(@sysid_student)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END	
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistSysIDStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistStudentIDStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistStudentIDStudentInformation')
   DROP PROCEDURE ums.IsExistStudentIDStudentInformation
GO

CREATE PROCEDURE ums.IsExistStudentIDStudentInformation

	@sysid_student varchar (50) = '',
	@student_id varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS
	
	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1)
	BEGIN
	
		SELECT ums.IsExistStudentIDStudentInfo(@sysid_student, @student_id)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END	
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistStudentIDStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "IsExistsCardNumberStudentInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'IsExistsCardNumberStudentInformation')
   DROP PROCEDURE ums.IsExistsCardNumberStudentInformation
GO

CREATE PROCEDURE ums.IsExistsCardNumberStudentInformation

	@sysid_student varchar (50) = '',
	@card_number varchar (50) = '',
	@system_user_id varchar (50) = ''
		
AS
	
	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsIDMakerSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT ums.IsExistCardNumberStudentInfo(@sysid_student, @card_number)

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student information', 'Student Information'
	END	
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.IsExistsCardNumberStudentInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the "IsExistSysIDStudentInfo" function already exist
IF OBJECT_ID (N'ums.IsExistSysIDStudentInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistSysIDStudentInfo
GO

CREATE FUNCTION ums.IsExistSysIDStudentInfo
(	
	@sysid_student varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_student FROM ums.student_information WHERE sysid_student = @sysid_student)
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistStudentIDStudentInfo" function already exist
IF OBJECT_ID (N'ums.IsExistStudentIDStudentInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistStudentIDStudentInfo
GO

CREATE FUNCTION ums.IsExistStudentIDStudentInfo
(	
	@sysid_student varchar (50) = '',
	@student_id varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_student FROM ums.student_information WHERE ((REPLACE(student_id, ' ', '')) LIKE REPLACE(@student_id, ' ', '')) AND NOT sysid_student = @sysid_student) OR
		EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE ((REPLACE(employee_id, ' ', '')) LIKE REPLACE(@student_id, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "IsExistCardNumberStudentInfo" function already exist
IF OBJECT_ID (N'ums.IsExistCardNumberStudentInfo') IS NOT NULL
   DROP FUNCTION ums.IsExistCardNumberStudentInfo
GO

CREATE FUNCTION ums.IsExistCardNumberStudentInfo
(	
	@sysid_student varchar (50) = '',
	@card_number varchar (50) = ''
)
RETURNS bit
AS
BEGIN
	
	DECLARE @result bit

	SET @result = 0
	
	IF EXISTS (SELECT sysid_student FROM ums.student_information WHERE ((REPLACE(card_number, ' ', '')) LIKE REPLACE(@card_number, ' ', '')) AND NOT sysid_student = @sysid_student) OR
		EXISTS (SELECT sysid_employee FROM ums.employee_information WHERE ((REPLACE(card_number, ' ', '')) LIKE REPLACE(@card_number, ' ', '')))
	BEGIN
		SET @result = 1
	END
	
	RETURN @result
END
GO
------------------------------------------------------

-- verifies if the "GetCountForStudentIDStudentInfo" function already exist
IF OBJECT_ID (N'ums.GetCountForStudentIDStudentInfo') IS NOT NULL
   DROP FUNCTION ums.GetCountForStudentIDStudentInfo
GO

CREATE FUNCTION ums.GetCountForStudentIDStudentInfo
(	
	@sysid_schoolfee_list nvarchar (MAX),
	@year_level_id varchar (50) = ''
)
RETURNS int
AS
BEGIN
	
	DECLARE @result int

	SELECT 
		@result = COUNT(sel.sysid_enrolmentlevel)
	FROM 
		ums.student_enrolment_level AS sel 
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
	INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
	INNER JOIN
	(
		SELECT	--GET ALL THE MINIMUM (FIRST ENROLMENT LEVEL) CREATED FOR EVERY STUDENT
			t_si.sysid_student AS sysid_student,
			MIN(t_sel.enrolment_level_no) AS enrolment_level_no
		FROM
			ums.student_enrolment_level AS t_sel
		INNER JOIN ums.student_enrolment_course AS t_sec ON t_sec.sysid_enrolmentcourse = t_sel.sysid_enrolmentcourse
		INNER JOIN ums.student_information AS t_si ON t_si.sysid_student = t_sec.sysid_student
		GROUP BY
			t_si.sysid_student
		--no marked as deleted condition because a level might be deleted in the middle of the enrolment time
		--and after that another student might enroll and ask for a new id
		
	) AS inner_sel ON inner_sel.enrolment_level_no = sel.enrolment_level_no
	WHERE 
		(yli.id_prefix = (SELECT id_prefix FROM ums.year_level_information WHERE year_level_id = @year_level_id)) AND
		(sfl.sysid_schoolfee IN (SELECT var_str FROM ums.IterateListToTable (@sysid_schoolfee_list, ',')))

	IF (@result IS NULL)
	BEGIN
		SET @result = 0
	END
	
	RETURN @result
END
GO
------------------------------------------------------


-- ########################################END TABLE "student_information" OBJECTS########################################################





-- ################################################TABLE "schedule_information_details" OBJECTS######################################################

-- verifies if the procedure "SelectByDateStartEndScheduleInformationDetails" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndScheduleInformationDetails')
   DROP PROCEDURE ums.SelectByDateStartEndScheduleInformationDetails
GO

CREATE PROCEDURE ums.SelectByDateStartEndScheduleInformationDetails

	@query_string varchar (50) = '',
	@date_start datetime,
	@date_end datetime,
	@is_marked_deleted bit = 0,

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR (ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			WITH cte_loaded_schedule_details (sysid_scheddetails, sysid_employee, last_name, first_name, middle_name, 
						type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
					(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sy.date_end) AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end))
				UNION ALL
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
					(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
					((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sri.date_end)  AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end))
			)

			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,			
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,			
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL					----------------------------------- clsd.sysid_employee IS NULL --------------------------------------
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,			
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,			
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				subject_code

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN
					
			WITH cte_loaded_schedule_details (sysid_scheddetails, sysid_employee, last_name, first_name, middle_name, 
						type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
					(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sy.date_end) AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end))
				UNION ALL
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
					(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
					((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sri.date_end)  AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end))
			)

			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,			
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,			
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL					----------------------------------- clsd.sysid_employee IS NULL --------------------------------------
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,			
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,			
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			ORDER BY
				subject_code

		END
		
	END	
	ELSE IF  (ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1)	
	BEGIN

		DECLARE @department_id varchar (50)

		SELECT 
			@department_id = arg.department_id 
		FROM
			ums.access_rights_granted AS arg
		INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = arg.system_user_id
		WHERE
			(arg.access_rights = '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@') AND
			(sui.system_user_id = @system_user_id);

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			WITH cte_loaded_schedule_details (sysid_scheddetails, sysid_employee, last_name, first_name, middle_name, 
					type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
				INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = sli.department_id
				WHERE
					(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
					(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sy.date_end) AND
					(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end)) AND
					(si.department_id = @department_id)
				UNION ALL
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = sli.department_id
				WHERE
					(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
					(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
					((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sri.date_end)  AND
					(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end)) AND
					(si.department_id = @department_id)
			)

			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,				
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL				----------------------------------- clsd.sysid_employee IS NULL --------------------------------------
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,				
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_code LIKE @query_string) OR 
				((REPLACE(ci.classroom_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.classroom_description LIKE @query_string) OR 
				((REPLACE(ci.classroom_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ci.maximum_capacity LIKE @query_string) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted) AND
				((scd.sysid_schedule LIKE @query_string) OR 
				((REPLACE(scd.sysid_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.subject_code LIKE @query_string) OR
				((REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(si.descriptive_title LIKE @query_string) OR
				((REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + ' - ' + si.descriptive_title) LIKE @query_string) OR
				((si.subject_code + ' ' + si.descriptive_title) LIKE @query_string) OR
				((si.descriptive_title + ' ' + si.subject_code) LIKE @query_string) OR
				((si.subject_code + '-' + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.subject_code + si.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((si.descriptive_title + si.subject_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + '-' + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.subject_code, ' ', '') + REPLACE(si.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(si.descriptive_title, ' ', '') + REPLACE(si.subject_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.field_room LIKE @query_string) OR 
				((REPLACE(scd.field_room, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.section LIKE @query_string) OR 
				((REPLACE(scd.section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.manual_schedule LIKE @query_string) OR 
				((REPLACE(scd.manual_schedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(scd.day_time LIKE @query_string) OR 
				((REPLACE(scd.day_time, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				subject_code

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			WITH cte_loaded_schedule_details (sysid_scheddetails, sysid_employee, last_name, first_name, middle_name, 
					type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
				INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = sli.department_id
				WHERE
					(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
					(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sy.date_end) AND
					(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end)) AND
					(si.department_id = @department_id)
				UNION ALL
				SELECT
					tl.sysid_scheddetails AS sysid_scheddetails_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS sli ON sli.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = sli.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = sli.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = sli.department_id
				WHERE
					(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
					(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
					((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
					(tl.deload_date = sri.date_end)  AND
					(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end)) AND
					(si.department_id = @department_id)
			)

			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,				
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(NOT clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL				----------------------------------- clsd.sysid_employee IS NULL --------------------------------------
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,				
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				ci.classroom_code AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.year_id AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				scd.sysid_scheddetails AS sysid_scheddetails,
				scd.sysid_schedule AS sysid_schedule,
				scd.sysid_classroom AS sysid_classroom,
				scd.field_room AS field_room,
				scd.manual_schedule AS manual_schedule,
				scd.is_classroom AS is_classroom,
				scd.lecture_units AS lecture_units_details,
				scd.lab_units AS lab_units_details,
				scd.no_hours AS no_hours_details,
				scd.section AS section,
				scd.day_time AS day_time,
				scd.is_marked_deleted AS is_marked_deleted_details,	
				NULL AS classroom_code,
				
				(SELECT
						MIN(inner_ci.maximum_capacity)
					FROM
						ums.classroom_information AS inner_ci
					INNER JOIN ums.schedule_information_details AS inner_scd ON inner_scd.sysid_classroom = inner_ci.sysid_classroom
					WHERE
						inner_scd.sysid_schedule = sci.sysid_schedule) AS maximum_capacity,
							
				si.subject_code AS subject_code,
				si.descriptive_title AS descriptive_title,
				si.department_id AS department_id,
				si.lecture_units AS lecture_units_schedule,
				si.lab_units AS lab_units_schedule,
				si.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				sci.sysid_subject AS sysid_subject,
				sci.sysid_semester AS year_semester_id,
				sci.is_marked_deleted AS is_marked_deleted_schedule,
				sci.is_team_teaching AS is_team_teaching,
				sci.is_irregular_modular AS is_irregular_modular,
				sci.is_fixed_amount AS is_fixed_amount,
				sci.amount AS amount,
				sci.additional_slots AS additional_slots,
				di.department_name AS subject_department_name,
				clsd.sysid_employee AS sysid_employee,
				clsd.last_name AS last_name,
				clsd.first_name AS first_name,
				clsd.middle_name AS middle_name,
				clsd.type_description AS type_description,
				clsd.status_description AS status_description,
				clsd.department_name AS employee_department_name,
				
				ISNULL((SELECT
							(MIN(inner_ci.maximum_capacity) + ISNULL(inner_sci.additional_slots, 0)) - ISNULL(inner_sl.student_count, 0)
						FROM
							ums.schedule_information_details AS inner_scd
						INNER JOIN ums.classroom_information AS inner_ci ON inner_ci.sysid_classroom = inner_scd.sysid_classroom
						INNER JOIN ums.schedule_information AS inner_sci ON inner_sci.sysid_schedule = inner_scd.sysid_schedule
						LEFT JOIN 
						(
							SELECT	
								t_sl.sysid_schedule AS sysid_schedule,
								COUNT(t_sl.load_id) AS student_count
							FROM
								ums.student_load AS t_sl 
							WHERE 
								(t_sl.sysid_schedule = sci.sysid_schedule) AND
								(t_sl.is_premature_deloaded = 0)
							GROUP BY
								t_sl.sysid_schedule
								
						) AS inner_sl ON inner_sl.sysid_schedule = inner_sci.sysid_schedule
						WHERE
							(inner_sci.sysid_schedule = sci.sysid_schedule) AND
							(inner_scd.is_marked_deleted = 0)
						GROUP BY
							inner_sci.sysid_schedule, inner_sci.additional_slots, inner_sl.student_count), -32768) AS slots_available
			FROM
				ums.schedule_information_details AS scd
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(scd.sysid_classroom IS NULL) AND
				(si.department_id = @department_id) AND
				(clsd.sysid_employee IS NULL) AND
				(scd.is_marked_deleted = @is_marked_deleted)
			ORDER BY
				subject_code

		END

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a schedule information details', 'Schedule Information Details'		
	END
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndScheduleInformationDetails TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "schedule_information_details" OBJECTS######################################################




-- ################################################TABLE "auxiliary_service_details" OBJECTS######################################################

-- verifies if the procedure "SelectByDateStartEndAuxiliaryServiceDetails" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndAuxiliaryServiceDetails')
   DROP PROCEDURE ums.SelectByDateStartEndAuxiliaryServiceDetails
GO

CREATE PROCEDURE ums.SelectByDateStartEndAuxiliaryServiceDetails

	@query_string varchar (50) = '',
	@date_start datetime,
	@date_end datetime,
	@is_marked_deleted bit = 0,

	@system_user_id varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsSecretaryVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN
				
			WITH cte_loaded_auxiliary_details (sysid_auxdetails, sysid_employee, last_name, first_name, middle_name, 
						type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_auxdetails AS sysid_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.auxiliary_service_details AS asd ON asd.sysid_auxdetails = tl.sysid_auxdetails
				INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
				INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
					((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
					(tl.deload_date = sy.date_end) AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end))
				UNION ALL
				SELECT
					tl.sysid_auxdetails AS sysid_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.auxiliary_service_details AS asd ON asd.sysid_auxdetails = tl.sysid_auxdetails
				INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
					(tl.deload_date = sri.date_end)  AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end))
			)

			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,			
				ass.year_id AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			INNER JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
				((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
				(NOT clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted) AND
				((asd.sysid_auxserviceschedule LIKE @query_string) OR 
				((REPLACE(asd.sysid_auxserviceschedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(asi.service_code LIKE @query_string) OR
				((REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(asi.descriptive_title LIKE @query_string) OR
				((REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + ' - ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.service_code + ' ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.descriptive_title + ' ' + asi.service_code) LIKE @query_string) OR
				((asi.service_code + '-' + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.descriptive_title + asi.service_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + '-' + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.descriptive_title, ' ', '') + REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,
				ass.sysid_semester AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			INNER JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted) AND
				((asd.sysid_auxserviceschedule LIKE @query_string) OR 
				((REPLACE(asd.sysid_auxserviceschedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(asi.service_code LIKE @query_string) OR
				((REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(asi.descriptive_title LIKE @query_string) OR
				((REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + ' - ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.service_code + ' ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.descriptive_title + ' ' + asi.service_code) LIKE @query_string) OR
				((asi.service_code + '-' + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.descriptive_title + asi.service_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + '-' + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.descriptive_title, ' ', '') + REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL					------------------------clad.sysid_employee IS NULL----------------------------------------
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,			
				ass.year_id AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			LEFT JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
				((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
				(clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted) AND
				((asd.sysid_auxserviceschedule LIKE @query_string) OR 
				((REPLACE(asd.sysid_auxserviceschedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(asi.service_code LIKE @query_string) OR
				((REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(asi.descriptive_title LIKE @query_string) OR
				((REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + ' - ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.service_code + ' ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.descriptive_title + ' ' + asi.service_code) LIKE @query_string) OR
				((asi.service_code + '-' + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.descriptive_title + asi.service_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + '-' + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.descriptive_title, ' ', '') + REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,
				ass.sysid_semester AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			LEFT JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted) AND
				((asd.sysid_auxserviceschedule LIKE @query_string) OR 
				((REPLACE(asd.sysid_auxserviceschedule, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(asi.service_code LIKE @query_string) OR
				((REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(asi.descriptive_title LIKE @query_string) OR
				((REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(di.department_name LIKE @query_string) OR
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + ' - ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.service_code + ' ' + asi.descriptive_title) LIKE @query_string) OR
				((asi.descriptive_title + ' ' + asi.service_code) LIKE @query_string) OR
				((asi.service_code + '-' + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.service_code + asi.descriptive_title) LIKE REPLACE(@query_string, ' ', '')) OR
				((asi.descriptive_title + asi.service_code) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + '-' + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.service_code, ' ', '') + REPLACE(asi.descriptive_title, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(asi.descriptive_title, ' ', '') + REPLACE(asi.service_code, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				service_code

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL))
		BEGIN

			WITH cte_loaded_auxiliary_details (sysid_auxdetails, sysid_employee, last_name, first_name, middle_name, 
						type_description, status_description, department_name) AS
			(
				SELECT
					tl.sysid_auxdetails AS sysid_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.auxiliary_service_details AS asd ON asd.sysid_auxdetails = tl.sysid_auxdetails
				INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
				INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
					((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
					(tl.deload_date = sy.date_end) AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sy.date_end))
				UNION ALL
				SELECT
					tl.sysid_auxdetails AS sysid_auxdetails,
					tl.sysid_employee AS sysid_employee,
					pri.last_name AS last_name,
					pri.first_name AS first_name,
					pri.middle_name AS middle_name,
					et.type_description AS type_description,
					es.status_description AS status_description,
					di.department_name AS department_name
				FROM
					ums.teacher_load AS tl
				INNER JOIN ums.auxiliary_service_details AS asd ON asd.sysid_auxdetails = tl.sysid_auxdetails
				INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
				INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
				INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee
				INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
				INNER JOIN ums.employment_status AS es ON es.status_id = si.status_id
				INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
				WHERE
					(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
					(tl.deload_date = sri.date_end)  AND
					(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee AND
						effectivity_date <= sri.date_end))
			)

			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,			
				ass.year_id AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			INNER JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
				((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
				(NOT clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,
				ass.sysid_semester AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			INNER JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(NOT clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted)
			UNION ALL					------------------------clad.sysid_employee IS NULL----------------------------------------
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,			
				ass.year_id AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = ass.year_id
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			LEFT JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.year_id IS NULL AND NOT ass.year_id = '') AND 
				((@date_start BETWEEN sy.date_start AND sy.date_end) AND (@date_end BETWEEN sy.date_start AND sy.date_end)) AND
				(clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted)
			UNION ALL
			SELECT
				asd.sysid_auxdetails AS sysid_auxdetails,
				asd.sysid_auxserviceschedule AS sysid_auxserviceschedule,
				asd.lecture_units AS lecture_units_details,
				asd.lab_units AS lab_units_details,
				asd.no_hours AS no_hours_details,
				asd.is_marked_deleted AS is_marked_deleted_details,
				asi.service_code AS service_code,
				asi.descriptive_title AS descriptive_title,
				asi.department_id AS department_id,
				asi.lecture_units AS lecture_units_schedule,
				asi.lab_units AS lab_units_schedule,
				asi.no_hours AS no_hours_schedule,
				cg.is_semestral AS is_semestral,
				ass.sysid_auxservice AS sysid_auxservice,
				ass.sysid_semester AS year_semester_id,
				ass.is_marked_deleted AS is_marked_deleted_schedule,
				ass.is_fixed_amount AS is_fixed_amount,
				ass.amount AS amount,
				di.department_name AS service_department_name,
				clad.sysid_employee AS sysid_employee,
				clad.last_name AS last_name,
				clad.first_name AS first_name,
				clad.middle_name AS middle_name,
				clad.type_description AS type_description,
				clad.status_description AS status_description,
				clad.department_name AS employee_department_name
			FROM
				ums.auxiliary_service_details AS asd
			INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = ass.sysid_semester
			INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
			INNER JOIN ums.department_information AS di ON di.department_id = asi.department_id
			LEFT JOIN cte_loaded_auxiliary_details AS clad ON clad.sysid_auxdetails = asd.sysid_auxdetails
			WHERE
				(NOT ass.sysid_semester IS NULL AND NOT ass.sysid_semester = '') AND 
				((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end)) AND
				(clad.sysid_employee IS NULL) AND
				(asd.is_marked_deleted = @is_marked_deleted)
			ORDER BY
				service_code

		END
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query an auxiliary service details', 'Auxiliar Service Details'	
	END
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndAuxiliaryServiceDetails TO db_umsusers
GO
-------------------------------------------------------------
-- ##############################################END TABLE "auxiliary_service_details" OBJECTS######################################################





-- ################################################TABLE "teacher_load" OBJECTS######################################################

/*verifies that the trigger "Teacher_Load_Trigger_Instead_Insert" already exist*/
IF OBJECT_ID ('ums.Teacher_Load_Trigger_Instead_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Teacher_Load_Trigger_Instead_Insert
GO

CREATE TRIGGER ums.Teacher_Load_Trigger_Instead_Insert
	ON  ums.teacher_load
	INSTEAD OF INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_scheddetails varchar (50)
	DECLARE @sysid_auxdetails varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units float (3)
	DECLARE @lab_units float (3)
	DECLARE @no_hours varchar (12)
	DECLARE @is_auxiliary bit
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @year_semester_description varchar (50)	
	DECLARE @date_end datetime
	
	SELECT 
		@sysid_scheddetails = i.sysid_scheddetails,
		@sysid_auxdetails = i.sysid_auxdetails,
		@sysid_employee = i.sysid_employee,
		@is_auxiliary = i.is_auxiliary,
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_auxiliary = 0) AND (NOT @sysid_scheddetails IS NULL)
	BEGIN

		SET @year_semester_id = ums.GetYearSemesterIDSchedule((SELECT 
																	sysid_schedule 
																FROM 
																	ums.schedule_information_details 
																WHERE 
																	sysid_scheddetails = @sysid_scheddetails))
		SET @load_date = ums.GetPayrollLoadEffectivityDate(@year_semester_id)
		SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)

		SELECT 
			@is_semestral = cg.is_semestral, 
			@year_id = sci.year_id,
			@sysid_semester = sci.sysid_semester
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		WHERE 
			scd.sysid_scheddetails = @sysid_scheddetails

	END
	ELSE IF (@is_auxiliary = 1) AND (NOT @sysid_auxdetails IS NULL)
	BEGIN

		SET @year_semester_id = ums.GetYearSemesterIDAuxiliaryServiceSchedule((SELECT 
																					sysid_auxserviceschedule 
																				FROM 
																					ums.auxiliary_service_details
																				WHERE 
																					sysid_auxdetails = @sysid_auxdetails))

		SET @load_date = ums.GetPayrollLoadEffectivityDate(@year_semester_id)
		SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)		

		SELECT 
			@is_semestral = cg.is_semestral, 
			@year_id = ass.year_id,
			@sysid_semester = ass.sysid_semester
		FROM 
			ums.auxiliary_service_details AS asd
		INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
		INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
		WHERE 
			asd.sysid_auxdetails = @sysid_auxdetails

	END

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT 
			@year_semester_description = year_description,
			@date_end = date_end
		FROM 
			ums.school_year 
		WHERE 
			year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN	

		SELECT 
			@year_semester_description = sy.year_description + ' - ' + ss.semester_description,
			@date_end = si.date_end
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	IF (@load_date < @date_end)
	BEGIN			

		IF (@is_auxiliary = 0) AND (NOT @sysid_scheddetails IS NULL)
		BEGIN
		
			SELECT 
				@lecture_units = scd.lecture_units,
				@lab_units = scd.lab_units,
				@no_hours = scd.no_hours
			FROM 
				ums.schedule_information_details AS scd
			WHERE 
				scd.sysid_scheddetails = @sysid_scheddetails

		END
		ELSE IF (@is_auxiliary = 1) AND (NOT @sysid_auxdetails IS NULL)
		BEGIN

			SELECT 
				@lecture_units = asd.lecture_units,
				@lab_units = asd.lab_units,
				@no_hours = asd.no_hours
			FROM 
				ums.auxiliary_service_details AS asd
			WHERE 
				asd.sysid_auxdetails = @sysid_auxdetails			

		END

		INSERT INTO ums.teacher_load
		(
			sysid_scheddetails,
			sysid_auxdetails,
			sysid_employee,
			load_date,
			deload_date,
			lecture_units,
			lab_units,
			no_hours,
			is_auxiliary,
			created_by
		)
		VALUES
		(
			@sysid_scheddetails,
			@sysid_auxdetails,
			@sysid_employee,
			@load_date,
			@deload_date,
			@lecture_units,
			@lab_units,
			@no_hours,
			@is_auxiliary,
			@created_by
		)

		IF (@is_auxiliary = 0) AND (NOT @sysid_scheddetails IS NULL)
		BEGIN

			SET @transaction_done = 'LOADED an instructor with a subject schedule details ' + 
									'[Schedule Details ID: ' + ISNULL(@sysid_scheddetails, '') +
									'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
															FROM
																schedule_information_details AS scd
															INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
															INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
															WHERE
																scd.sysid_scheddetails = @sysid_scheddetails) +												  
									'][Instructor: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	epi.sysid_employee = @sysid_employee), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'

		END
		ELSE IF (@is_auxiliary = 1) AND (NOT @sysid_auxdetails IS NULL)
		BEGIN

			SET @transaction_done = 'LOADED an instructor with an auxiliary service schedule details ' + 
									'[Schedule Details ID: ' + ISNULL(@sysid_auxdetails, '') +
									'][Auxiliary Title: ' + (SELECT ISNULL(asi.service_code, '') + ' - ' + ISNULL(asi.descriptive_title, '')
															FROM
																auxiliary_service_details AS asd
															INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
															INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice
															WHERE
																asd.sysid_auxdetails = @sysid_auxdetails) +												  
									'][Instructor: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	epi.sysid_employee = @sysid_employee), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'
		END

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

	END	

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Teacher_Load_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Teacher_Load_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Teacher_Load_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Teacher_Load_Trigger_Instead_Update
	ON  ums.teacher_load
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @load_id bigint

	DECLARE @edited_by varchar (50)

	DECLARE teacher_load_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.load_id, i.edited_by
				FROM INSERTED AS i

	OPEN teacher_load_update_cursor

	FETCH NEXT FROM teacher_load_update_cursor
		INTO @load_id, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		--used for the delete trigger
		IF NOT @edited_by IS NULL
		BEGIN

			UPDATE ums.teacher_load SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE 
				load_id = @load_id
		END		

		FETCH NEXT FROM teacher_load_update_cursor
			INTO @load_id, @edited_by

	END
	
	CLOSE teacher_load_update_cursor
	DEALLOCATE teacher_load_update_cursor	
	
GO
-------------------------------------------------------------------------

/*verifies that the trigger "Teacher_Load_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Teacher_Load_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Teacher_Load_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Teacher_Load_Trigger_Instead_Delete
	ON  ums.teacher_load
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @load_id bigint
	DECLARE @sysid_scheddetails varchar (50)
	DECLARE @sysid_auxdetails varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units float (3)
	DECLARE @lab_units float (3)
	DECLARE @no_hours varchar (12)
	DECLARE @is_auxiliary bit
	DECLARE @is_premature_deloaded bit
	DECLARE @system_user_id varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @year_semester_description varchar (50)

	DECLARE teacher_load_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.load_id, d.sysid_scheddetails, d.sysid_auxdetails, d.sysid_employee, d.load_date, 
					d.lecture_units, d.lab_units, d.no_hours, d.is_auxiliary, d.is_premature_deloaded, d.edited_by
				FROM DELETED AS d

	OPEN teacher_load_delete_cursor

	FETCH NEXT FROM teacher_load_delete_cursor
		INTO @load_id, @sysid_scheddetails, @sysid_auxdetails, @sysid_employee, @load_date, 
				@lecture_units, @lab_units, @no_hours, @is_auxiliary, @is_premature_deloaded, @system_user_id

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		IF @is_premature_deloaded = 0
		BEGIN

			IF (@is_auxiliary = 0) AND (NOT @sysid_scheddetails IS NULL)
			BEGIN

				SET @year_semester_id = ums.GetYearSemesterIDSchedule((SELECT 
																			sysid_schedule 
																		FROM 
																			ums.schedule_information_details 
																		WHERE 
																			sysid_scheddetails = @sysid_scheddetails))
				
				SET @deload_date = ums.GetPayrollPreTerminatedLoadDate()

				SELECT 
					@is_semestral = cg.is_semestral, 
					@year_id = sci.year_id,
					@sysid_semester = sci.sysid_semester
				FROM 
					ums.schedule_information_details AS scd
				INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
				INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
				WHERE 
					scd.sysid_scheddetails = @sysid_scheddetails

			END
			ELSE IF (@is_auxiliary = 1) AND (NOT @sysid_auxdetails IS NULL)
			BEGIN

				SET @year_semester_id = ums.GetYearSemesterIDAuxiliaryServiceSchedule((SELECT 
																						sysid_auxserviceschedule 
																					FROM 
																						ums.auxiliary_service_details 
																					WHERE 
																						sysid_auxdetails = @sysid_auxdetails))
				
				SET @deload_date = ums.GetPayrollPreTerminatedLoadDate()		

				SELECT 
					@is_semestral = cg.is_semestral, 
					@year_id = ass.year_id,
					@sysid_semester = ass.sysid_semester
				FROM 
					ums.auxiliary_service_details AS asd
				INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
				INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = asi.course_group_id
				WHERE 
					asd.sysid_auxdetails = @sysid_auxdetails

			END

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = year_description
				FROM 
					ums.school_year 
				WHERE 
					year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@load_date < @deload_date)
			BEGIN				

				UPDATE ums.teacher_load SET
					deload_date = @deload_date,
					is_premature_deloaded = 1,
					edited_on = GETDATE(),
					edited_by = @system_user_id
				WHERE 
					load_id = @load_id

			END
			ELSE
			BEGIN

				DELETE FROM ums.teacher_load WHERE load_id = @load_id

				SET @deload_date = GETDATE()

			END

			IF (@is_auxiliary = 0) AND (NOT @sysid_scheddetails IS NULL)
			BEGIN

				SET @transaction_done = 'DELOADED an instructor with a subject schedule ' + 
										'[Schedule Details ID: ' + ISNULL(@sysid_scheddetails, '') +
										'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
																FROM
																	schedule_information_details AS scd
																INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
																INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
																WHERE
																	scd.sysid_scheddetails = @sysid_scheddetails) +	 												  
										'][Instructor: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																	WHERE 
																		epi.sysid_employee = @sysid_employee), '') +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
										'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
										'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
										'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
										'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
										'][Number of Hours: ' + ISNULL(@no_hours, '') +
										']'					

			END
			ELSE IF (@is_auxiliary = 1) AND (NOT @sysid_auxdetails IS NULL)
			BEGIN

				SET @transaction_done = 'DELOADED an instructor with an auxiliary service schedule details ' + 
										'[Schedule Details ID: ' + ISNULL(@sysid_auxdetails, '') +
										'][Auxiliary Title: ' + (SELECT ISNULL(asi.service_code, '') + ' - ' + ISNULL(asi.descriptive_title, '')
														FROM
															auxiliary_service_details AS asd
														INNER JOIN ums.auxiliary_service_schedule AS ass ON ass.sysid_auxserviceschedule = asd.sysid_auxserviceschedule
														INNER JOIN ums.auxiliary_service_information AS asi ON asi.sysid_auxservice = ass.sysid_auxservice
														WHERE
															asd.sysid_auxdetails = @sysid_auxdetails) +													  
										'][Instructor: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																	WHERE 
																		epi.sysid_employee = @sysid_employee), '') +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
										'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
										'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
										'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
										'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
										'][Number of Hours: ' + ISNULL(@no_hours, '') +
										']'		

			END

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
			END
					
			EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done	

		END

		FETCH NEXT FROM teacher_load_delete_cursor
			INTO @load_id, @sysid_scheddetails, @sysid_auxdetails, @sysid_employee, @load_date, 
					@lecture_units, @lab_units, @no_hours, @is_auxiliary, @is_premature_deloaded, @system_user_id

	END
	
	CLOSE teacher_load_delete_cursor
	DEALLOCATE teacher_load_delete_cursor
	
GO
/*-----------------------------------------------------------------*/
-- ##############################################END TABLE "teacher_load" OBJECTS######################################################





-- ################################################## TABLE "student_load" OBJECTS######################################################

--verifies that the trigger "Student_Load_Trigger_Instead_Insert" already exist
IF OBJECT_ID ('ums.Student_Load_Trigger_Instead_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Load_Trigger_Instead_Insert
GO

CREATE TRIGGER ums.Student_Load_Trigger_Instead_Insert
	ON  ums.student_load
	INSTEAD OF INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_schedule varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @year_semester_description varchar (50)	
	DECLARE @date_end datetime
	
	SELECT 
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@sysid_schedule = i.sysid_schedule,
		@created_by = i.created_by
	FROM INSERTED AS i	

	SET @year_semester_id = ums.GetYearSemesterIDSchedule(@sysid_schedule)
	SET @load_date = ums.GetEnrolmentLoadEffectivityDate(@year_semester_id)
	SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)

	SELECT 
		@is_semestral = cg.is_semestral, 
		@year_id = sci.year_id,
		@sysid_semester = sci.sysid_semester
	FROM 
		ums.schedule_information AS sci 
	INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id	--course group is based on the subject because
																					--the year_id and the sysid_semester is taken from the schedule information
	WHERE 
		sci.sysid_schedule = @sysid_schedule

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT 
			@year_semester_description = year_description,
			@date_end = date_end
		FROM 
			ums.school_year 
		WHERE 
			year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN	

		SELECT 
			@year_semester_description = sy.year_description + ' - ' + ss.semester_description,
			@date_end = si.date_end
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	IF (@load_date < @date_end)
	BEGIN			

		SELECT 
			@lecture_units = si.lecture_units,
			@lab_units = si.lab_units,
			@no_hours = si.no_hours
		FROM 
			ums.subject_information AS si
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_subject = si.sysid_subject
		WHERE 
			sci.sysid_schedule = @sysid_schedule	
		
		INSERT INTO ums.student_load
		(
			sysid_enrolmentlevel,
			sysid_schedule,
			load_date,
			deload_date,
			lecture_units,
			lab_units,
			no_hours,
			created_by
		)
		VALUES
		(
			@sysid_enrolmentlevel,
			@sysid_schedule,
			@load_date,
			@deload_date,
			@lecture_units,
			@lab_units,
			@no_hours,
			@created_by
		)

		SET @transaction_done = 'LOADED a student with a subject ' +
								'[Student ID: ' + ISNULL((SELECT 
																si.student_id
															FROM 
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +	
								'][Course Level: ' + ISNULL((SELECT 
																	yli.year_level_description
																FROM 
																	ums.year_level_information AS yli 
																INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel														
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
														FROM
															ums.subject_information AS si
														INNER JOIN ums.schedule_information AS sci ON sci.sysid_subject = si.sysid_subject
														WHERE
															sci.sysid_schedule = @sysid_schedule) +
								'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
								'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
								'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
								'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
								'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
								'][Number of Hours: ' + ISNULL(@no_hours, '') +
								']'		

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
		END
				
		EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

	END	

GO
-------------------------------------------------------------------

-- verifies that the trigger "Student_Load_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Load_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Load_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Load_Trigger_Instead_Update
	ON  ums.student_load
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @load_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_schedule varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @is_premature_deloaded bit
	DECLARE @is_for_permanent_delete bit
	DECLARE @edited_by varchar (50)

	DECLARE @is_premature_deloaded_b bit

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @year_semester_description varchar (50)	
	DECLARE @date_end datetime

	DECLARE @has_update bit

	DECLARE student_load_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.load_id, i.sysid_enrolmentlevel, i.sysid_schedule, i.load_date, i.lecture_units, i.lab_units, 
					i.no_hours, i.is_premature_deloaded, i.is_for_permanent_delete, i.edited_by
				FROM INSERTED AS i

	OPEN student_load_update_cursor

	FETCH NEXT FROM student_load_update_cursor
		INTO @load_id, @sysid_enrolmentlevel, @sysid_schedule, @load_date, @lecture_units, @lab_units, 
				@no_hours, @is_premature_deloaded, @is_for_permanent_delete, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN	

		SELECT
			@is_premature_deloaded_b = sl.is_premature_deloaded
		FROM
			ums.student_load AS sl
		WHERE
			(sl.load_id = @load_id)

		SET @transaction_done = ''
		SET @has_update = 0	

		IF (@is_premature_deloaded = 0) AND (@is_premature_deloaded_b = 1)
		BEGIN

			SET @transaction_done = @transaction_done + '[Is Pre-Mature Deloaded Before: YES' + ']' +
														'[Is Pre-Mature Deloaded After: NO' + ']'
			SET @has_update = 1

		END

		IF @has_update = 1
		BEGIN

			SET @year_semester_id = ums.GetYearSemesterIDSchedule(@sysid_schedule)
			SET @deload_date = ums.GetDeLoadEffectivityDate(@year_semester_id)

			SELECT 
				@is_semestral = cg.is_semestral, 
				@year_id = sci.year_id,
				@sysid_semester = sci.sysid_semester
			FROM 
				ums.schedule_information AS sci 
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id	--course group is based on the subject because
																							--the year_id and the sysid_semester is taken from the schedule information
			WHERE 
				sci.sysid_schedule = @sysid_schedule

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = year_description,
					@date_end = date_end
				FROM 
					ums.school_year 
				WHERE 
					year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN	

				SELECT 
					@year_semester_description = sy.year_description + ' - ' + ss.semester_description,
					@date_end = si.date_end
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@load_date < @date_end)
			BEGIN

				UPDATE ums.student_load SET
					deload_date = @deload_date,
					is_premature_deloaded = @is_premature_deloaded,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					(load_id = @load_id)


				SET @transaction_done = 'UPDATED/RELOAD a student load ' +
										'[Student ID: ' + ISNULL((SELECT 
																		si.student_id
																	FROM 
																		ums.student_information AS si
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Student Name: ' + ISNULL((SELECT 
																			pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																		FROM 
																			ums.person_information AS pri
																		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Student Course: ' + ISNULL((SELECT 
																				ci.course_title 
																			FROM 
																				ums.course_information AS ci 
																			INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																			WHERE 
																				sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +	
										'][Course Level: ' + ISNULL((SELECT 
																			yli.year_level_description
																		FROM 
																			ums.year_level_information AS yli 
																		INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel														
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
																FROM
																	ums.subject_information AS si
																INNER JOIN ums.schedule_information AS sci ON sci.sysid_subject = si.sysid_subject
																WHERE
																	sci.sysid_schedule = @sysid_schedule) +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +							
										'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
										'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
										'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
										'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
										'][Number of Hours: ' + ISNULL(@no_hours, '') +
										']' + @transaction_done	

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

			END

		END
		ELSE
		BEGIN

			--used for the delete trigger
			IF NOT @edited_by IS NULL
			BEGIN

				UPDATE ums.student_load SET
					is_for_permanent_delete = @is_for_permanent_delete,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					load_id = @load_id
			END		

		END

		FETCH NEXT FROM student_load_update_cursor
			INTO @load_id, @sysid_enrolmentlevel, @sysid_schedule, @load_date, @lecture_units, @lab_units, 
					@no_hours, @is_premature_deloaded, @is_for_permanent_delete, @edited_by

	END
	
	CLOSE student_load_update_cursor
	DEALLOCATE student_load_update_cursor	
	
GO
-------------------------------------------------------------------------

--verifies that the trigger "Student_Load_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Load_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Load_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Load_Trigger_Instead_Delete
	ON  ums.student_load
	INSTEAD OF DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @load_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_schedule varchar (50)
	DECLARE @load_date datetime
	DECLARE @deload_date datetime
	DECLARE @lecture_units tinyint
	DECLARE @lab_units tinyint
	DECLARE @no_hours varchar (12)
	DECLARE @is_premature_deloaded bit
	DECLARE @is_for_permanent_delete bit
	DECLARE @system_user_id varchar (50)

	DECLARE @year_semester_id varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit
	DECLARE @year_semester_description varchar (50)

	DECLARE student_load_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.load_id, d.sysid_enrolmentlevel, d.sysid_schedule, d.load_date, 
					d.lecture_units, d.lab_units, d.no_hours, d.is_premature_deloaded, d.is_for_permanent_delete, d.edited_by
				FROM DELETED AS d

	OPEN student_load_delete_cursor

	FETCH NEXT FROM student_load_delete_cursor
		INTO @load_id, @sysid_enrolmentlevel, @sysid_schedule, @load_date, 
				@lecture_units, @lab_units, @no_hours, @is_premature_deloaded, @is_for_permanent_delete, @system_user_id

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		IF (@is_premature_deloaded = 0) AND (@is_for_permanent_delete = 0)
		BEGIN

			SET @year_semester_id = ums.GetYearSemesterIDSchedule(@sysid_schedule)
				
			SET @deload_date = ums.GetEnrolmentPreTerminatedLoadDate()

			SELECT 
				@is_semestral = cg.is_semestral, 
				@year_id = sci.year_id,
				@sysid_semester = sci.sysid_semester
			FROM 
				ums.schedule_information AS sci 
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			WHERE 
				sci.sysid_schedule = @sysid_schedule			

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = year_description
				FROM 
					ums.school_year 
				WHERE 
					year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT 
					@year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@load_date < @deload_date)
			BEGIN				

				UPDATE ums.student_load SET
					deload_date = CONVERT(datetime, CONVERT(varchar, GETDATE(), 101) + ' 11:59:59 PM', 101),
					is_premature_deloaded = 1,

					edited_on = GETDATE(),
					edited_by = @system_user_id
				WHERE 
					load_id = @load_id

			END
			ELSE
			BEGIN

				DELETE FROM ums.student_load WHERE load_id = @load_id

			END

			SET @deload_date = GETDATE()

			SET @transaction_done = 'DELOADED a student with a subject ' + 
									'[Student ID: ' + ISNULL((SELECT 
																	si.student_id
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +	
									'][Course Level: ' + ISNULL((SELECT 
																		yli.year_level_description
																	FROM 
																		ums.year_level_information AS yli 
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel														
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
															FROM
																ums.subject_information AS si
															INNER JOIN ums.schedule_information AS sci ON sci.sysid_subject = si.sysid_subject
															WHERE
																sci.sysid_schedule = @sysid_schedule) +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +						
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'	

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
			END
					
			EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done	

		END
		ELSE IF (@is_for_permanent_delete = 1)
		BEGIN

			DELETE FROM ums.student_load WHERE load_id = @load_id

			SET @deload_date = GETDATE()

			SET @transaction_done = 'PERMANENTLY DELETED/DELOADED a student with a subject ' + 
									'[Student ID: ' + ISNULL((SELECT 
																	si.student_id
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Name: ' + ISNULL((SELECT 
																	pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +	
									'][Course Level: ' + ISNULL((SELECT 
																		yli.year_level_description
																	FROM 
																		ums.year_level_information AS yli 
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel														
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Subject Title: ' + (SELECT ISNULL(si.subject_code, '') + ' - ' + ISNULL(si.descriptive_title, '')
															FROM
																ums.subject_information AS si
															INNER JOIN ums.schedule_information AS sci ON sci.sysid_subject = si.sysid_subject
															WHERE
																sci.sysid_schedule = @sysid_schedule) +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +						
									'][Load Date: ' + ISNULL(CONVERT(varchar, @load_date, 101), '') +
									'][DeLoad Date: ' + ISNULL(CONVERT(varchar, @deload_date, 101), '') +
									'][Lecture Units: ' + ISNULL(CONVERT(varchar, @lecture_units), '') +
									'][Lab Units: ' + ISNULL(CONVERT(varchar, @lab_units), '') +
									'][Number of Hours: ' + ISNULL(@no_hours, '') +
									']'	

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @system_user_id
			END
					
			EXECUTE ums.InsertTransactionLog @system_user_id, @network_information, @transaction_done	

		END

		FETCH NEXT FROM student_load_delete_cursor
			INTO @load_id, @sysid_enrolmentlevel, @sysid_schedule, @load_date, 
					@lecture_units, @lab_units, @no_hours, @is_premature_deloaded, @is_for_permanent_delete, @system_user_id

	END
	
	CLOSE student_load_delete_cursor
	DEALLOCATE student_load_delete_cursor
	
GO
-----------------------------------------------------------------


-- verifies if the procedure "SelectBySysIDEnrolmentLevelDateStartEndScheduleDetailsStudentLoad" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDEnrolmentLevelDateStartEndScheduleDetailsStudentLoad')
   DROP PROCEDURE ums.SelectBySysIDEnrolmentLevelDateStartEndScheduleDetailsStudentLoad
GO

CREATE PROCEDURE ums.SelectBySysIDEnrolmentLevelDateStartEndScheduleDetailsStudentLoad

	@sysid_enrolmentlevel varchar (50) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsStudentDataControllerSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsSecretaryVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1)
	BEGIN

		WITH cte_loaded_schedule_details (load_id, sysid_scheddetails, sysid_employee, last_name, first_name, middle_name,
			sysid_schedule) AS
		(
			SELECT
				tl.load_id AS load_id,
				tl.sysid_scheddetails AS sysid_scheddetails,
				tl.sysid_employee AS sysid_employee,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				sci.sysid_schedule AS sysid_schedule
			FROM
				ums.teacher_load AS tl
			INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule			
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
				(tl.is_premature_deloaded = 0)
			UNION ALL
			SELECT
				tl.load_id AS load_id,
				tl.sysid_scheddetails AS sysid_scheddetails,
				tl.sysid_employee AS sysid_employee,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				sci.sysid_schedule AS sysid_schedule
			FROM
				ums.teacher_load AS tl
			INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
				(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
				((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND 
				(tl.is_premature_deloaded = 0)
		),
		cte_loaded_schedule_information (sysid_schedule) AS
		(
			SELECT
				sl.sysid_schedule AS sysid_schedule
			FROM
				ums.student_load AS sl
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = sl.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
				(sl.is_premature_deloaded = 0) AND
				(sl.sysid_enrolmentlevel = @sysid_enrolmentlevel)
			UNION ALL
			SELECT
				sl.sysid_schedule AS sysid_schedule
			FROM
				ums.student_load AS sl
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = sl.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
				(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
				((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND 
				(sl.is_premature_deloaded = 0) AND
				(sl.sysid_enrolmentlevel = @sysid_enrolmentlevel)
		)

		-- A - employee loaded
		-- B - student loaded
		-- C - with classroom
		-- D - yearly

		--	A	B	C	D
		--	==============
		--	0	0	0	0
		--	0	0	0	1
		--	0	0	1	0
		--	0	0	1	1
		--	0	1	0	0
		--	0	1	0	1
		--	0	1	1	0
		--	0	1	1	1
		--	1	0	0	0
		--	1	0	0	1
		--	1	0	1	0
		--	1	0	1	1
		--	1	1	0	0
		--	1	1	0	1
		--	1	1	1	0
		--	1	1	1	1

		SELECT							-- yearly scheduled details with employee loaded, student loaded and with a classroom (1111)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time			
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT							-- semestral scheduled details with employee loaded, student loaded and with a classroom (1110)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT							-- yearly scheduled details with employee loaded, student loaded and without a classroom (1101)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details with employee loaded, student loaded and without a classroom (1100)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL						
		SELECT								-- yearly scheduled details employee loaded, without student loaded and with a classroom (1011)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details employee loaded, without student loaded and with a classroom (1010)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)  AND
			(clsi.sysid_schedule IS NULL)
		UNION ALL
		SELECT								-- yearly scheduled details employee loaded, without student loaded and without a classroom (1001)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)	
		UNION ALL
		SELECT								-- semestral scheduled details employee loaded, without student loaded and without a classroom (1000)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)	
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, student loaded and a classroom (0111)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL		
		SELECT								-- semestral scheduled details without employee loaded, student loaded and a classroom (0110)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)	
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, student loaded and without a classroom (0101)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, student loaded and without a classroom (0100)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, without student loaded and a classroom (0011)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, without student loaded and a classroom (0010)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, without student loaded and without a classroom (0001)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, without student loaded and without a classroom (0000)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL)
		ORDER BY 
			subject_code, sysid_schedule, sysid_scheddetails ASC
		
	END	
	ELSE IF (ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1)      
	BEGIN

		DECLARE @department_id varchar (50)

		SELECT 
			@department_id = arg.department_id 
		FROM
			ums.access_rights_granted AS arg
		INNER JOIN ums.system_user_info AS sui ON sui.system_user_id = arg.system_user_id
		WHERE
			(arg.access_rights = '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@') AND
			(sui.system_user_id = @system_user_id);

		WITH cte_loaded_schedule_details (load_id, sysid_scheddetails, sysid_employee, last_name, first_name, middle_name,
			sysid_schedule) AS
		(
			SELECT
				tl.load_id AS load_id,
				tl.sysid_scheddetails AS sysid_scheddetails,
				tl.sysid_employee AS sysid_employee,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				sci.sysid_schedule AS sysid_schedule
			FROM
				ums.teacher_load AS tl
			INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule			
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
				(tl.is_premature_deloaded = 0)
			UNION ALL
			SELECT
				tl.load_id AS load_id,
				tl.sysid_scheddetails AS sysid_scheddetails,
				tl.sysid_employee AS sysid_employee,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				sci.sysid_schedule AS sysid_schedule
			FROM
				ums.teacher_load AS tl
			INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
				(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
				((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND 
				(tl.is_premature_deloaded = 0)
		),
		cte_loaded_schedule_information (sysid_schedule) AS
		(
			SELECT
				sl.sysid_schedule AS sysid_schedule
			FROM
				ums.student_load AS sl
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = sl.sysid_schedule
			INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
			WHERE
				(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND
				(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
				((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
				(sl.is_premature_deloaded = 0) AND
				(sl.sysid_enrolmentlevel = @sysid_enrolmentlevel)
			UNION ALL
			SELECT
				sl.sysid_schedule AS sysid_schedule
			FROM
				ums.student_load AS sl
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = sl.sysid_schedule
			INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
			WHERE
				(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
				(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
				((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND 
				(sl.is_premature_deloaded = 0) AND
				(sl.sysid_enrolmentlevel = @sysid_enrolmentlevel)
		)

		SELECT							-- yearly scheduled details with employee loaded, student loaded and with a classroom (1111)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time			
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT							-- semestral scheduled details with employee loaded, student loaded and with a classroom (1110)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT							-- yearly scheduled details with employee loaded, student loaded and without a classroom (1101)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details with employee loaded, student loaded and without a classroom (1100)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL						
		SELECT								-- yearly scheduled details employee loaded, without student loaded and with a classroom (1011)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- semestral scheduled details employee loaded, without student loaded and with a classroom (1010)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)  AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- yearly scheduled details employee loaded, without student loaded and without a classroom (1001)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- semestral scheduled details employee loaded, without student loaded and without a classroom (1000)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, student loaded and a classroom (0111)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL		
		SELECT								-- semestral scheduled details without employee loaded, student loaded and a classroom (0110)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)	
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, student loaded and without a classroom (0101)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, student loaded and without a classroom (0100)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, without student loaded and a classroom (0011)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, without student loaded and a classroom (0010)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- yearly scheduled details without employee loaded, without student loaded and without a classroom (0001)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.year_id AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.school_year AS sy ON sy.year_id = sci.year_id
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND 
			(((@date_start BETWEEN sy.date_start AND sy.date_end) OR (@date_end BETWEEN sy.date_start AND sy.date_end)) OR
			((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		UNION ALL
		SELECT								-- semestral scheduled details without employee loaded, without student loaded and without a classroom (0000)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,	
			sci.sysid_semester AS year_semester_id,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			si.is_open_access AS is_open_access,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sci.sysid_semester
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		LEFT JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND 
			(((@date_start BETWEEN sri.date_start AND sri.date_end) OR (@date_end BETWEEN sri.date_start AND sri.date_end)) OR
			((sri.date_start BETWEEN @date_start AND @date_end) AND (sri.date_end BETWEEN @date_start AND @date_end))) AND
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL) AND
			(clsi.sysid_schedule IS NULL) AND
			((si.department_id = @department_id) OR (si.is_open_access = 1))
		ORDER BY 
			subject_code, sysid_schedule, sysid_scheddetails ASC

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student load', 'Student Load'
		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDEnrolmentLevelDateStartEndScheduleDetailsStudentLoad TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDEnrolmentLevelListScheduleDetailsStudentLoad" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDEnrolmentLevelListScheduleDetailsStudentLoad')
   DROP PROCEDURE ums.SelectBySysIDEnrolmentLevelListScheduleDetailsStudentLoad
GO

CREATE PROCEDURE ums.SelectBySysIDEnrolmentLevelListScheduleDetailsStudentLoad

	@sysid_enrolmentlevel_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		WITH cte_loaded_schedule_details (load_id, sysid_scheddetails, sysid_employee, last_name, first_name, middle_name,
			sysid_schedule) AS
		(
			SELECT
				tl.load_id AS load_id,
				tl.sysid_scheddetails AS sysid_scheddetails,
				tl.sysid_employee AS sysid_employee,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				scd.sysid_schedule AS sysid_schedule
			FROM
				ums.teacher_load AS tl
			INNER JOIN ums.employee_information AS ei ON ei.sysid_employee = tl.sysid_employee
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN ums.schedule_information_details AS scd ON scd.sysid_scheddetails = tl.sysid_scheddetails
			INNER JOIN
				(
					SELECT
						DISTINCT sl.sysid_schedule AS sysid_schedule
					FROM
						ums.student_load AS sl
					INNER JOIN ums.IterateListToTable(@sysid_enrolmentlevel_list, ',') AS sell_list ON sell_list.var_str = sl.sysid_enrolmentlevel
					WHERE
						(sl.is_premature_deloaded = 0)

				) AS sls ON sls.sysid_schedule = scd.sysid_schedule
			WHERE
				(tl.is_premature_deloaded = 0)
		),
		cte_loaded_schedule_information (sysid_enrolmentlevel, sysid_schedule) AS
		(
			SELECT
				sl.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sl.sysid_schedule AS sysid_schedule
			FROM
				ums.student_load AS sl
			INNER JOIN ums.IterateListToTable(@sysid_enrolmentlevel_list, ',') AS sell_list ON sell_list.var_str = sl.sysid_enrolmentlevel
			INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = sl.sysid_schedule
			WHERE
				(sl.is_premature_deloaded = 0) AND
				(sci.is_marked_deleted = 0)
		)

		-- A - employee loaded
		-- B - with classroom

		--	A	B	
		--	======
		--	0	0
		--	0	1
		--	1	0
		--	1	1

		SELECT								-- scheduled details without employee loaded, without a classroom (00)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			clsi.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- scheduled details without employee loaded, and with a classroom (01)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,
			NULL AS load_id,
			NULL AS sysid_employee,
			NULL AS last_name,
			NULL AS first_name,
			NULL AS middle_name,
			clsi.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		LEFT JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT							-- scheduled details with employee loaded, and without a classroom (10)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			NULL AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			clsi.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(scd.is_marked_deleted = 0) AND
			(scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		UNION ALL
		SELECT								-- scheduled details with employee loaded, and with a classroom (11)
			scd.sysid_scheddetails AS sysid_scheddetails,
			scd.sysid_classroom AS sysid_classroom,
			scd.field_room AS field_room,
			scd.manual_schedule AS manual_schedule,
			scd.is_classroom AS is_classroom,			
			scd.section AS section,
			sci.sysid_schedule AS sysid_schedule,
			sci.is_team_teaching AS is_team_teaching,
			sci.is_irregular_modular AS is_irregular_modular,
			sci.is_fixed_amount AS is_fixed_amount,
			sci.amount AS amount,
			si.department_id AS department_id,
			si.subject_code AS subject_code,
			si.descriptive_title AS descriptive_title,
			cg.is_semestral AS is_semestral,
			cg.group_no AS group_no,
			ci.classroom_code AS classroom_code,	
			clsd.load_id AS load_id,
			clsd.sysid_employee AS sysid_employee,
			clsd.last_name AS last_name,
			clsd.first_name AS first_name,
			clsd.middle_name AS middle_name,
			clsi.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			'' AS day_time
		FROM 
			ums.schedule_information_details AS scd
		INNER JOIN ums.schedule_information AS sci ON sci.sysid_schedule = scd.sysid_schedule
		INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
		INNER JOIN ums.classroom_information AS ci ON ci.sysid_classroom = scd.sysid_classroom
		INNER JOIN cte_loaded_schedule_details AS clsd ON clsd.sysid_scheddetails = scd.sysid_scheddetails
		INNER JOIN cte_loaded_schedule_information AS clsi ON clsi.sysid_schedule = sci.sysid_schedule
		WHERE
			(scd.is_marked_deleted = 0) AND
			(NOT scd.sysid_classroom IS NULL) AND
			(NOT clsd.sysid_employee IS NULL)
		ORDER BY 
			subject_code, sysid_schedule, sysid_scheddetails ASC
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student load', 'Student Load'		
	END
	
GO
-------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDEnrolmentLevelListScheduleDetailsStudentLoad TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDScheduleListStudentLoad" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDScheduleListStudentLoad')
   DROP PROCEDURE ums.SelectBySysIDScheduleListStudentLoad
GO

CREATE PROCEDURE ums.SelectBySysIDScheduleListStudentLoad

	@sysid_schedule_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfAcademicAffairsSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsOfficeUserSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCollegeRegistrarSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsHighSchoolGradeSchoolRegistrarSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT		--WITH COURSE AND WITH YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			emer_pri.last_name AS emer_last_name,
			emer_pri.first_name AS emer_first_name,
			emer_pri.middle_name AS emer_middle_name,
			emer_pri.present_address AS emer_present_address,
			emer_pri.present_phone_nos AS emer_present_phone_nos,
			emer_pri.home_address AS emer_home_address,
			emer_pri.home_phone_nos AS emer_home_phone_nos,
			emer_pri.relationship_description AS emer_relationship_description,

			sec.course_id AS course_id,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			sl.sysid_schedule AS sysid_schedule,
			sl.load_date AS load_date,
			sl.deload_date AS deload_date,
			sl.is_premature_deloaded AS is_premature_deloaded,
			sl.created_on AS enrolled_date,			
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

		LEFT JOIN
			(
				SELECT
					ppi.sysid_person AS sysid_person,
					pri_ppi.last_name AS last_name,
					pri_ppi.first_name AS first_name,
					pri_ppi.middle_name AS middle_name,
					pri_ppi.present_address AS present_address,
					pri_ppi.present_phone_nos AS present_phone_nos,
					pri_ppi.home_address AS home_address,
					pri_ppi.home_phone_nos AS home_phone_nos,
					rpt.relationship_description AS relationship_description
				FROM
					ums.person_relationship_information AS ppi
				INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
				INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
				WHERE
					(ppi.is_emergency_contact = 1)			
				
			) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.student_load AS sl ON sl.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.IterateListToTable(@sysid_schedule_list, ',') AS ssl_list ON ssl_list.var_str = sl.sysid_schedule
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
		ORDER BY
			pri.last_name ASC, pri.first_name ASC, pri.middle_name ASC, sl.created_on ASC
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student load', 'Student Load'		
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDScheduleListStudentLoad TO db_umsusers
GO
-------------------------------------------------------------

-- ################################################END TABLE "student_load" OBJECTS######################################################






-- ##################################TABLE "employee_information" and "student_information OBJECTS##############################################

-- verifies if the procedure "SelectByQueryStringStudentEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByQueryStringStudentEmployeeInformation')
   DROP PROCEDURE ums.SelectByQueryStringStudentEmployeeInformation
GO

CREATE PROCEDURE ums.SelectByQueryStringStudentEmployeeInformation

	@query_string varchar (50) = '',
	@include_emergency_contact bit = 0,

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (@include_emergency_contact = 1)
		BEGIN

			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,			
				ci.course_title AS course_title_department_name,
				ci.acronym AS acronym_employment_type,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			WHERE
				(sec.is_current_course = 1) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,			
				NULL AS course_title_department_name,
				NULL AS acronym_employment_type,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			WHERE
				(sec.course_id IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))		
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,	
				di.department_name AS course_title_department_name,
				et.type_acronym AS acronym_employment_type,
				
				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			INNER JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee 
			INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			WHERE
				((ei.employee_id LIKE @query_string) OR 
				((REPLACE(ei.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ei.card_number LIKE @query_string) OR 
				((REPLACE(ei.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee))	
			ORDER BY
				last_name, first_name, middle_name ASC		

		END
		ELSE
		BEGIN

			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,			
				ci.course_title AS course_title_department_name,
				ci.acronym AS acronym_employment_type,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			WHERE
				(sec.is_current_course = 1) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,			
				NULL AS course_title_department_name,
				NULL AS acronym_employment_type,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			WHERE
				(sec.course_id IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))		
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,	
				di.department_name AS course_title_department_name,
				et.type_acronym AS acronym_employment_type,
				
				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person
			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
			INNER JOIN ums.salary_information AS si ON si.sysid_employee = ei.sysid_employee 
			INNER JOIN ums.employment_type AS et ON et.employment_id = si.employment_id
			INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
			WHERE
				((ei.employee_id LIKE @query_string) OR 
				((REPLACE(ei.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ei.card_number LIKE @query_string) OR 
				((REPLACE(ei.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = ei.sysid_employee))	
			ORDER BY
				last_name, first_name, middle_name ASC	

		END
	
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query student and employee information', 'Student and Employee Information'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByQueryStringStudentEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectForCampusAccessStudentEmployeeInformation" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectForCampusAccessStudentEmployeeInformation')
   DROP PROCEDURE ums.SelectForCampusAccessStudentEmployeeInformation
GO

CREATE PROCEDURE ums.SelectForCampusAccessStudentEmployeeInformation

	@query_string varchar (50) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN

		DECLARE @years_add smallint

		SET @years_add = -2

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%')
		BEGIN

			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			INNER JOIN ums.person_image AS pmg ON pmg.sysid_person = si.sysid_person
			INNER JOIN
				(
					SELECT
						DISTINCT sec.sysid_student AS sysid_student
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.created_on BETWEEN DATEADD(yy, @years_add, GETDATE()) AND GETDATE())

				) AS inner_sel ON inner_sel.sysid_student = si.sysid_student
			WHERE
				((NOT si.card_number IS NULL) AND (NOT si.card_number = '')) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = si.sysid_person
			INNER JOIN
				(
					SELECT
						DISTINCT sec.sysid_student AS sysid_student
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.created_on BETWEEN DATEADD(yy, @years_add, GETDATE()) AND GETDATE())

				) AS inner_sel ON inner_sel.sysid_student = si.sysid_student
			WHERE
				(pmg.image_id IS NULL) AND
				((NOT si.card_number IS NULL) AND (NOT si.card_number = '')) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person			
			INNER JOIN ums.person_image AS pmg ON pmg.sysid_person = ei.sysid_person
			INNER JOIN 
				(
					SELECT
						sli.sysid_employee AS sysid_employee
					FROM
						ums.salary_information AS sli
					WHERE
						(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information AS t_sli WHERE t_sli.sysid_employee = sli.sysid_employee)) AND
						(sli.status_id <> 4)

				) AS inner_sli ON inner_sli.sysid_employee = ei.sysid_employee
			WHERE
				((NOT ei.card_number IS NULL) AND (NOT ei.card_number = '')) AND
				((ei.employee_id LIKE @query_string) OR 
				((REPLACE(ei.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ei.card_number LIKE @query_string) OR 
				((REPLACE(ei.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person			
			LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = ei.sysid_person
			INNER JOIN 
				(
					SELECT
						sli.sysid_employee AS sysid_employee
					FROM
						ums.salary_information AS sli
					WHERE
						(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information AS t_sli WHERE t_sli.sysid_employee = sli.sysid_employee)) AND
						(sli.status_id <> 4)

				) AS inner_sli ON inner_sli.sysid_employee = ei.sysid_employee
			WHERE
				(pmg.image_id IS NULL) AND
				((NOT ei.card_number IS NULL) AND (NOT ei.card_number = '')) AND
				((ei.employee_id LIKE @query_string) OR 
				((REPLACE(ei.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(ei.card_number LIKE @query_string) OR 
				((REPLACE(ei.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name ASC	

		END
		ELSE
		BEGIN

			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			INNER JOIN ums.person_image AS pmg ON pmg.sysid_person = si.sysid_person
			INNER JOIN
				(
					SELECT
						DISTINCT sec.sysid_student AS sysid_student
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.created_on BETWEEN DATEADD(yy, @years_add, GETDATE()) AND GETDATE())

				) AS inner_sel ON inner_sel.sysid_student = si.sysid_student
			WHERE
				((NOT si.card_number IS NULL) AND (NOT si.card_number = ''))
			UNION ALL
			SELECT		
				si.sysid_student AS sysid_student_employee,
				si.student_id AS student_employee_id,
				si.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'true' AS is_student
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = si.sysid_person
			INNER JOIN
				(
					SELECT
						DISTINCT sec.sysid_student AS sysid_student
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.created_on BETWEEN DATEADD(yy, @years_add, GETDATE()) AND GETDATE())

				) AS inner_sel ON inner_sel.sysid_student = si.sysid_student
			WHERE
				(pmg.image_id IS NULL) AND
				((NOT si.card_number IS NULL) AND (NOT si.card_number = ''))
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person			
			INNER JOIN ums.person_image AS pmg ON pmg.sysid_person = ei.sysid_person
			INNER JOIN 
				(
					SELECT
						sli.sysid_employee AS sysid_employee
					FROM
						ums.salary_information AS sli
					WHERE
						(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information AS t_sli WHERE t_sli.sysid_employee = sli.sysid_employee)) AND
						(sli.status_id <> 4)

				) AS inner_sli ON inner_sli.sysid_employee = ei.sysid_employee
			WHERE
				((NOT ei.card_number IS NULL) AND (NOT ei.card_number = ''))
			UNION ALL
			SELECT 
				ei.sysid_employee AS sysid_student_employee,
				ei.employee_id AS student_employee_id,
				ei.card_number AS card_number,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,

				pmg.original_name AS original_name,

				'false' AS is_student
			FROM
				ums.employee_information AS ei
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = ei.sysid_person			
			LEFT JOIN ums.person_image AS pmg ON pmg.sysid_person = ei.sysid_person
			INNER JOIN 
				(
					SELECT
						sli.sysid_employee AS sysid_employee
					FROM
						ums.salary_information AS sli
					WHERE
						(sli.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information AS t_sli WHERE t_sli.sysid_employee = sli.sysid_employee)) AND
						(sli.status_id <> 4)

				) AS inner_sli ON inner_sli.sysid_employee = ei.sysid_employee
			WHERE
				(pmg.image_id IS NULL) AND
				((NOT ei.card_number IS NULL) AND (NOT ei.card_number = ''))
			ORDER BY
				last_name, first_name, middle_name ASC	

		END	

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query student and employee information', 'Student and Employee Information'
	END
	
GO
-------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectForCampusAccessStudentEmployeeInformation TO db_umsusers
GO
-------------------------------------------------------------

-- ##################################END TABLE "employee_information" and "student_information OBJECTS##############################################





-- ################################################TABLE "student_enrolment_course" OBJECTS######################################################

--verifies that the trigger "Student_Enrolment_Course_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Enrolment_Course_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Course_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Enrolment_Course_Trigger_Insert
	ON  ums.student_enrolment_course
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentcourse varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @course_id varchar (50)	
	DECLARE @sysid_schoolfee varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_current_course bit
	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	DECLARE @current_course varchar (100)
	
	SELECT 
		@sysid_enrolmentcourse = i.sysid_enrolmentcourse,
		@sysid_student = i.sysid_student,
		@course_id = i.course_id,
		@sysid_schoolfee = i.sysid_schoolfee,
		@sysid_semester = i.sysid_semester,
		@is_current_course = i.is_current_course,
		@is_semestral = cg.is_semestral,
		@year_id = sfi.year_id,
		@created_by = i.created_by
	FROM INSERTED AS i	
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = i.sysid_schoolfee
	INNER JOIN ums.course_information AS ci ON ci.course_id = i.course_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	IF (@is_current_course = 1)
	BEGIN
		SET @current_course = 'YES'
	END
	ELSE
	BEGIN
		SET @current_course = 'NO'
	END

	SET @transaction_done = 'CREATED a new student enrolment course ' + 
							'[Enrolment Course ID: ' + ISNULL(@sysid_enrolmentcourse, '') +
							'][Student ID: ' + ISNULL((SELECT student_id 
														FROM ums.student_information WHERE sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
															FROM
																ums.person_information AS pri
															INNER JOIN ums.student_information AS sti ON sti.sysid_person = pri.sysid_person
															WHERE 
																(sti.sysid_student = @sysid_student)), '') +
							'][Course Title: ' + ISNULL((SELECT course_title FROM ums.course_information WHERE course_id = @course_id), '') +	
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +													
							'][Is Current Course: ' + ISNULL(CONVERT(varchar, @current_course), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
/*-----------------------------------------------------------------*/

-- verifies that the trigger "Student_Enrolment_Course_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Enrolment_Course_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Course_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Enrolment_Course_Trigger_Instead_Update
	ON  ums.student_enrolment_course
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentcourse varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @course_id varchar (50)	
	DECLARE @sysid_schoolfee varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_current_course bit
	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @edited_by varchar (50)

	DECLARE @sysid_semester_b varchar (50)
	DECLARE @is_current_course_b bit
	DECLARE @is_semestral_b bit
	DECLARE @year_id_b varchar (50)
	
	DECLARE @current_course varchar (100)
	DECLARE @current_course_b varchar (100)
	
	DECLARE @year_semester_description varchar (100)
	DECLARE @year_semester_description_b varchar (100)	

	DECLARE @has_update bit

	DECLARE student_enrolment_course_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_enrolmentcourse, i.sysid_student, i.course_id, i.sysid_schoolfee, i.sysid_semester,
				i.is_current_course,  cg.is_semestral, sfi.year_id, i.edited_by
				FROM INSERTED AS i	
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = i.sysid_schoolfee
				INNER JOIN ums.course_information AS ci ON ci.course_id = i.course_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id

	OPEN student_enrolment_course_update_cursor

	FETCH NEXT FROM student_enrolment_course_update_cursor
		INTO @sysid_enrolmentcourse, @sysid_student, @course_id, @sysid_schoolfee, @sysid_semester,
				@is_current_course, @is_semestral, @year_id, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		SELECT 
			@sysid_semester_b = sec.sysid_semester,
			@is_current_course_b = sec.is_current_course,
			@is_semestral_b = cg.is_semestral,
			@year_id_b = sfi.year_id
		FROM 
			ums.student_enrolment_course AS sec
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sec.sysid_schoolfee
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		WHERE 
			sec.sysid_enrolmentcourse = @sysid_enrolmentcourse

		SET @transaction_done = ''
		SET @has_update = 0
		
		IF NOT (ISNULL(@sysid_semester, '')) = (ISNULL(@sysid_semester_b, '')) OR
			NOT (@is_semestral = @is_semestral_b) OR
			NOT (ISNULL(@year_id, '')) = (ISNULL(@year_id_b, ''))
		BEGIN

			SET @year_semester_description_b = ''

			IF (@is_semestral_b = 0) AND (NOT @year_id_b IS NULL)
			BEGIN
				SELECT @year_semester_description_b = year_description FROM ums.school_year WHERE year_id = @year_id_b
			END
			ELSE IF (@is_semestral_b = 1) AND (NOT @sysid_semester_b IS NULL)
			BEGIN
				SELECT @year_semester_description_b = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester_b
			END

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			SET @transaction_done = @transaction_done + '[School Year / Semester Before: ' + ISNULL(@year_semester_description_b, '') + ']' +
														'[School Year / Semester After: ' + ISNULL(@year_semester_description, '') +  ']'
			SET @has_update = 1

		END
		ELSE
		BEGIN

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			SET @transaction_done = @transaction_done + '[School Year / Semester: ' + ISNULL(@year_semester_description, '') + ']'

		END

		IF NOT (@is_current_course = @is_current_course_b)
		BEGIN

			IF (@is_current_course = 1)
			BEGIN
				SET @current_course = 'YES'
			END
			ELSE
			BEGIN
				SET @current_course = 'NO'
			END

			IF (@is_current_course_b = 1)
			BEGIN
				SET @current_course_b = 'YES'
			END
			ELSE
			BEGIN
				SET @current_course_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Current Course Before: ' + ISNULL(CONVERT(varchar, @current_course_b), '') + ']' +
														'[Is Current Course After: ' + ISNULL(CONVERT(varchar, @current_course), '') +  ']'
			SET @has_update = 1
		END	

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_enrolment_course SET
				sysid_schoolfee = @sysid_schoolfee,
				sysid_semester = @sysid_semester,
				is_current_course = @is_current_course,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				sysid_enrolmentcourse = @sysid_enrolmentcourse

			SET @transaction_done = 'UPDATED a student enrolment course ' + 
									'[Enrolment Course ID: ' + ISNULL(@sysid_enrolmentcourse, '') +
									'][Student ID: ' + ISNULL((SELECT student_id 
																FROM ums.student_information WHERE sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '')
																	FROM
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS sti ON sti.sysid_person = pri.sysid_person
																	WHERE 
																		(sti.sysid_student = @sysid_student)), '') +
									'][Course Title: ' + ISNULL((SELECT course_title FROM ums.course_information WHERE course_id = @course_id), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

		END
		
		FETCH NEXT FROM student_enrolment_course_update_cursor
			INTO @sysid_enrolmentcourse, @sysid_student, @course_id, @sysid_schoolfee, @sysid_semester,
					@is_current_course, @is_semestral, @year_id, @edited_by

	END

	CLOSE student_enrolment_course_update_cursor
	DEALLOCATE student_enrolment_course_update_cursor
	
GO
-------------------------------------------------------------------------

--verifies that the trigger "Student_Enrolment_Course_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Enrolment_Course_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Course_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Enrolment_Course_Trigger_Instead_Delete
	ON  ums.student_enrolment_course
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	EXECUTE ums.ShowErrorMsg 'Delete a student enrolment course', 'Student Enrolment Course'

GO
-----------------------------------------------------------------

-- ##############################################END TABLE "student_enrolment_course" OBJECTS######################################################




-- ################################################TABLE "student_enrolment_level" OBJECTS######################################################

--verifies that the trigger "Student_Enrolment_Level_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Enrolment_Level_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Level_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Enrolment_Level_Trigger_Insert
	ON  ums.student_enrolment_level
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_enrolmentcourse varchar (50)
	DECLARE @sysid_feelevel varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @sysid_financestd varchar (50)
	DECLARE @level_section varchar (100)
	DECLARE @is_entry_level bit
	DECLARE @is_graduate_student bit
	DECLARE @is_international bit 
	DECLARE @enrolment_level_no int
	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	DECLARE @entry_level varchar (100)
	DECLARE @graduate_student varchar (100)
	DECLARE @international varchar (50)
	
	SELECT 
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@sysid_enrolmentcourse = i.sysid_enrolmentcourse,
		@sysid_feelevel = i.sysid_feelevel,
		@sysid_semester = i.sysid_semester,
		@sysid_financestd = i.sysid_financestd,
		@level_section = i.level_section,
		@is_entry_level = i.is_entry_level,
		@is_graduate_student = i.is_graduate_student,
		@is_international = i.is_international,
		@enrolment_level_no = i.enrolment_level_no,
		@is_semestral = cg.is_semestral,
		@year_id = sfi.year_id,
		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = i.sysid_feelevel
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
	INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	IF (@is_entry_level = 1)
	BEGIN
		SET @entry_level = 'YES'
	END
	ELSE
	BEGIN
		SET @entry_level = 'NO'
	END

	IF (@is_graduate_student = 1)
	BEGIN
		SET @graduate_student = 'YES'
	END
	ELSE
	BEGIN
		SET @graduate_student = 'NO'
	END

	IF @is_international = 1
	BEGIN
		SET @international = 'YES'
	END
	ELSE
	BEGIN
		SET @international = 'NO'
	END

	SET @transaction_done = 'CREATED a new student enrolment level ' + 
							'[Enrolment Level ID: ' + ISNULL(@sysid_enrolmentlevel, '') +
							'][Student ID: ' + ISNULL((SELECT 
																si.student_id 
															FROM 
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															WHERE 
																sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
							'][Student Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															WHERE 
																sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
							'][Student Course: ' + ISNULL((SELECT 
																ci.course_title 
															FROM 
																ums.course_information AS ci 
															INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
															WHERE 
																sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +	
							'][Course Level: ' + ISNULL((SELECT 
																yli.year_level_description + ' (' + cg.group_description + ')'
															FROM 
																ums.year_level_information AS yli 
															INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
															INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id														
															WHERE 
																sfl.sysid_feelevel = @sysid_feelevel), '') +
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
							'][Finance Standard ID: ' + ISNULL(@sysid_financestd, '') +	
							'][Level Section: ' + ISNULL(@level_section, '') +
							'][Is Entry Level: ' + ISNULL(@entry_level, '') +	
							'][Is Student Graduating: ' + ISNULL(@graduate_student, '') +										
							'][Enrolment Level No: ' + ISNULL(CONVERT(varchar, @enrolment_level_no), '') +
							'][Is International Student: ' + ISNULL(@international, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

-- verifies that the trigger "Student_Enrolment_Level_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Enrolment_Level_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Level_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Enrolment_Level_Trigger_Instead_Update
	ON  ums.student_enrolment_level
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_enrolmentcourse varchar (50)
	DECLARE @sysid_feelevel varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @level_section varchar (100)
	DECLARE @is_entry_level bit
	DECLARE @is_graduate_student bit
	DECLARE @is_international bit
	DECLARE @is_marked_deleted bit
	DECLARE @enrolment_level_no int
	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @edited_by varchar (50)
	
	DECLARE @sysid_enrolmentcourse_b varchar (50)
	DECLARE @sysid_feelevel_b varchar (50)
	DECLARE @level_section_b varchar (100)
	DECLARE @is_entry_level_b bit
	DECLARE @is_graduate_student_b bit
	DECLARE @is_international_b bit
	
	DECLARE @year_semester_description varchar (100)

	DECLARE @entry_level varchar (100)
	DECLARE @entry_level_b varchar (100)
	DECLARE @graduate_student varchar (100)
	DECLARE @graduate_student_b varchar (100)
	DECLARE @international varchar (50)	
	DECLARE @international_b varchar (50)

	DECLARE @has_update bit

	DECLARE student_enrolment_level_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_enrolmentlevel, i.sysid_enrolmentcourse, i.sysid_feelevel, i.sysid_semester, i.level_section,
					i.is_entry_level, i.is_graduate_student, i.is_international, i.is_marked_deleted, i.enrolment_level_no,
					cg.is_semestral, sfi.year_id, i.edited_by
				FROM INSERTED AS i
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = i.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	OPEN student_enrolment_level_update_cursor

	FETCH NEXT FROM student_enrolment_level_update_cursor
		INTO @sysid_enrolmentlevel, @sysid_enrolmentcourse, @sysid_feelevel, @sysid_semester, @level_section,
			@is_entry_level, @is_graduate_student, @is_international, @is_marked_deleted, @enrolment_level_no, 
			@is_semestral, @year_id, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @is_marked_deleted = 0
		BEGIN

			SELECT
				@sysid_enrolmentcourse_b = sel.sysid_enrolmentcourse,
				@sysid_feelevel_b = sel.sysid_feelevel,
				@level_section_b = sel.level_section,
				@is_entry_level_b = sel.is_entry_level,
				@is_graduate_student_b = sel.is_graduate_student,
				@is_international_b = sel.is_international
			FROM
				ums.student_enrolment_level AS sel
			WHERE
				sel.sysid_enrolmentlevel = @sysid_enrolmentlevel

			SET @transaction_done = ''
			SET @has_update = 0

			IF NOT ISNULL(@sysid_enrolmentcourse COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_enrolmentcourse_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
			BEGIN
				SET @transaction_done = @transaction_done + '[Student Course Before: ' + ISNULL((SELECT 
																										ci.course_title 
																									FROM 
																										ums.course_information AS ci 
																									INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																									WHERE 
																										sysid_enrolmentcourse = @sysid_enrolmentcourse_b), '') + ']' +
															'[Student Course After: ' + ISNULL((SELECT 
																									ci.course_title 
																								FROM 
																									ums.course_information AS ci 
																								INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																								WHERE 
																									sysid_enrolmentcourse = @sysid_enrolmentcourse), '') + ']'
				SET @has_update = 1
			END
			ELSE
			BEGIN
				SET @transaction_done = @transaction_done + '[Student Course: ' + ISNULL((SELECT 
																								ci.course_title 
																							FROM 
																								ums.course_information AS ci 
																							INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																							WHERE 
																								sysid_enrolmentcourse = @sysid_enrolmentcourse), '') + ']'
			END

			IF NOT ISNULL(@sysid_feelevel COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_feelevel_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
			BEGIN
				SET @transaction_done = @transaction_done + '[Course Level Before: ' + ISNULL((SELECT 
																									yli.year_level_description + ' (' + cg.group_description + ')'
																								FROM 
																									ums.year_level_information AS yli 
																								INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																								INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id														
																								WHERE 
																									sfl.sysid_feelevel = @sysid_feelevel_b), '') + ']' +
															'[Course Level After: ' + ISNULL((SELECT 
																									yli.year_level_description + ' (' + cg.group_description + ')'
																								FROM 
																									ums.year_level_information AS yli 
																								INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																								INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id														
																								WHERE 
																									sfl.sysid_feelevel = @sysid_feelevel), '') + ']'
				SET @has_update = 1
			END
			ELSE
			BEGIN
				SET @transaction_done = @transaction_done + '[Course Level: ' + ISNULL((SELECT 
																							yli.year_level_description + ' (' + cg.group_description + ')'
																						FROM 
																							ums.year_level_information AS yli 
																						INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																						INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id														
																						WHERE 
																							sfl.sysid_feelevel = @sysid_feelevel), '') + ']'
			END

			IF NOT ISNULL(@level_section COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@level_section_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
			BEGIN
				SET @transaction_done = @transaction_done + '[Level Section Before: ' + ISNULL(@level_section_b, '') + ']' +
															'[Level Section After: ' + ISNULL(@level_section, '') + ']'
				SET @has_update = 1
			END

			IF NOT @is_entry_level = @is_entry_level_b
			BEGIN

				IF (@is_entry_level = 1)
				BEGIN
					SET @entry_level = 'YES'
				END
				ELSE
				BEGIN
					SET @entry_level = 'NO'
				END

				IF (@is_entry_level_b = 1)
				BEGIN
					SET @entry_level_b = 'YES'
				END
				ELSE
				BEGIN
					SET @entry_level_b = 'NO'
				END

				SET @transaction_done = @transaction_done + '[Is Entry Level Before: ' + ISNULL(@entry_level_b, '') + ']' +
															'[Is Entry Level After: ' + ISNULL(@entry_level, '') + ']'
				SET @has_update = 1
			END

			IF NOT @is_graduate_student = @is_graduate_student_b
			BEGIN

				IF (@is_graduate_student = 1)
				BEGIN
					SET @graduate_student = 'YES'
				END
				ELSE
				BEGIN
					SET @graduate_student = 'NO'
				END

				IF (@is_graduate_student_b = 1)
				BEGIN
					SET @graduate_student_b = 'YES'
				END
				ELSE
				BEGIN
					SET @graduate_student_b = 'NO'
				END

				SET @transaction_done = @transaction_done + '[Is Student Graduating Before: ' + ISNULL(@graduate_student_b, '') + ']' +
															'[Is Student Graduating After: ' + ISNULL(@graduate_student, '') + ']'
				SET @has_update = 1
			END

			IF NOT @is_international = @is_international_b
			BEGIN

				IF (@is_international = 1)
				BEGIN
					SET @international = 'YES'
				END
				ELSE
				BEGIN
					SET @international = 'NO'
				END

				IF (@is_international_b = 1)
				BEGIN
					SET @international_b = 'YES'
				END
				ELSE
				BEGIN
					SET @international_b = 'NO'
				END

				SET @transaction_done = @transaction_done + '[Is International Student Before: ' + ISNULL(@international_b, '') + ']' +
															'[Is International Student After: ' + ISNULL(@international, '') + ']'
				SET @has_update = 1
			END

			IF @has_update = 1
			BEGIN
				
				--deletes the course major if the course for the level does not have the current course major of the level (this is particulary in
				--shifting to another course and there is already a course major defined in the level before shift
				UPDATE ums.enrolment_course_major SET 
					edited_by = @edited_by 
				FROM
					ums.enrolment_course_major AS ecm
				INNER JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
				WHERE 
					(ecm.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(NOT cmi.course_id = (SELECT
												sec.course_id
											FROM
												ums.student_enrolment_course AS sec
											WHERE
												(sec.sysid_enrolmentcourse = @sysid_enrolmentcourse)))				

				DELETE ecm FROM ums.enrolment_course_major AS ecm
				INNER JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
				WHERE 
					(ecm.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(NOT cmi.course_id = (SELECT
												sec.course_id
											FROM
												ums.student_enrolment_course AS sec
											WHERE
												(sec.sysid_enrolmentcourse = @sysid_enrolmentcourse)))


				UPDATE ums.student_enrolment_level SET
					sysid_enrolmentcourse = @sysid_enrolmentcourse,
					sysid_feelevel = @sysid_feelevel,
					level_section = @level_section,
					is_entry_level = @is_entry_level,
					is_graduate_student = @is_graduate_student,
					is_international = @is_international,

					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					sysid_enrolmentlevel = @sysid_enrolmentlevel

				SET @year_semester_description = ''

				IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
				BEGIN
					SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
				END
				ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
				BEGIN
					SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
					FROM 
						ums.semester_information AS si
					INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
					INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
					WHERE 
						si.sysid_semester = @sysid_semester
				END

				SET @transaction_done = 'UPDATED a student enrolment level ' + 
										'[Enrolment Level ID: ' + ISNULL(@sysid_enrolmentlevel, '') +
										'][Student ID: ' + ISNULL((SELECT 
																			si.student_id 
																		FROM 
																			ums.student_information AS si
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																		WHERE 
																			sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
										'][Student Name: ' + ISNULL((SELECT 
																			pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																		FROM 
																			ums.person_information AS pri
																		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																		WHERE 
																			sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
										']' + @transaction_done +
										'[Enrolment Level No: ' + ISNULL(CONVERT(varchar, @enrolment_level_no), '') +
										']'


				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

			END
			ELSE IF NOT @edited_by IS NULL
			BEGIN
				
				--used for the delete trigger 
				UPDATE ums.student_enrolment_level SET
					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					sysid_enrolmentlevel = @sysid_enrolmentlevel

			END	

		END

		FETCH NEXT FROM student_enrolment_level_update_cursor
			INTO @sysid_enrolmentlevel, @sysid_enrolmentcourse, @sysid_feelevel, @sysid_semester, @level_section,
				@is_entry_level, @is_graduate_student, @is_international, @is_marked_deleted, @enrolment_level_no, 
				@is_semestral, @year_id, @edited_by
	END

	CLOSE student_enrolment_level_update_cursor
	DEALLOCATE student_enrolment_level_update_cursor
	
GO
-------------------------------------------------------------------------

/*verifies that the trigger "Student_Enrolment_Level_Trigger_Instead_Delete" already exist*/
IF OBJECT_ID ('ums.Student_Enrolment_Level_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Enrolment_Level_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Enrolment_Level_Trigger_Instead_Delete
	ON  ums.student_enrolment_level
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_enrolmentcourse varchar (50)
	DECLARE @sysid_feelevel varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @level_section varchar (100)
	DECLARE @is_entry_level bit
	DECLARE @is_graduate_student bit
	DECLARE @is_international bit
	DECLARE @is_marked_deleted bit
	DECLARE @enrolment_level_no int
	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_student varchar (50)
	DECLARE @deleted_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	DECLARE @entry_level varchar (100)
	DECLARE @graduate_student varchar (100)
	DECLARE @international varchar (50)

	DECLARE student_enrolment_level_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.sysid_enrolmentlevel, d.sysid_enrolmentcourse, d.sysid_feelevel, d.sysid_semester, d.level_section,
					d.is_entry_level, d.is_graduate_student, d.is_international, d.is_marked_deleted, d.enrolment_level_no,
					cg.is_semestral, sfi.year_id, sec.sysid_student, d.edited_by
				FROM DELETED AS d
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = d.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = d.sysid_enrolmentcourse

	OPEN student_enrolment_level_delete_cursor

	FETCH NEXT FROM student_enrolment_level_delete_cursor
		INTO @sysid_enrolmentlevel, @sysid_enrolmentcourse, @sysid_feelevel, @sysid_semester, @level_section,
			@is_entry_level, @is_graduate_student, @is_international, @is_marked_deleted, @enrolment_level_no, 
			@is_semestral, @year_id, @sysid_student, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @is_marked_deleted = 0
		BEGIN

			UPDATE ums.student_load SET edited_by = @deleted_by WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel
			DELETE FROM ums.student_load WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

--			student enrolment level		special class			student enrolment level			special class
--			@is_semestral				cg.is_semestral			@year_id	@sysid_semester		sci.year_id		sci.sysid_semester
--
--				0							0				|		1			0			=		1				0
--				0							1				|		1			0			=		0			get the year_id the semester belongs
--				1							0				|		1			0			=		1				0
--				1							1				|		0			1			=		0				1

			UPDATE ums.special_class_load SET 
				edited_by = @deleted_by
			FROM 
				ums.special_class_load AS scl
			INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			WHERE
				(((@is_semestral = 0) AND (cg.is_semestral = 0) AND (NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND (sci.year_id = @year_id)) OR  --00 | 10 = 10
				((@is_semestral = 0) AND (cg.is_semestral = 1) AND ((SELECT year_id FROM ums.semester_information WHERE sysid_semester = sci.sysid_semester) = @year_id)) OR --01 | 10 = 0year_id
				((@is_semestral = 1) AND (cg.is_semestral = 0) AND (NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND (sci.year_id = @year_id)) OR --10 | 10 = 10
				((@is_semestral = 1) AND (cg.is_semestral = 1) AND (NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND (sci.sysid_semester = @sysid_semester))) AND  --11 | 01 = 01
				(scl.sysid_student = @sysid_student)

			DELETE scl FROM ums.special_class_load AS scl
			INNER JOIN ums.special_class_information AS sci ON sci.sysid_special = scl.sysid_special
			INNER JOIN ums.subject_information AS si ON si.sysid_subject = sci.sysid_subject
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
			WHERE
				(((@is_semestral = 0) AND (cg.is_semestral = 0) AND (NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND (sci.year_id = @year_id)) OR  --00 | 10 = 10
				((@is_semestral = 0) AND (cg.is_semestral = 1) AND ((SELECT year_id FROM ums.semester_information WHERE sysid_semester = sci.sysid_semester) = @year_id)) OR --01 | 10 = 0year_id
				((@is_semestral = 1) AND (cg.is_semestral = 0) AND (NOT sci.year_id IS NULL AND NOT sci.year_id = '') AND (sci.year_id = @year_id)) OR --10 | 10 = 10
				((@is_semestral = 1) AND (cg.is_semestral = 1) AND (NOT sci.sysid_semester IS NULL AND NOT sci.sysid_semester = '') AND (sci.sysid_semester = @sysid_semester))) AND  --11 | 01 = 01
				(scl.sysid_student = @sysid_student)				
	
			UPDATE ums.student_additional_fee SET edited_by = @deleted_by, is_for_withdrawn_charge = 1 WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

			UPDATE ums.student_optional_fee SET edited_by = @deleted_by, is_for_withdrawn_charge = 1 WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

			UPDATE ums.student_scholarship SET edited_by = @deleted_by WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel
			DELETE FROM ums.student_scholarship WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

			UPDATE ums.enrolment_course_major SET edited_by = @deleted_by WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel
			DELETE FROM ums.enrolment_course_major WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

			UPDATE ums.student_enrolment_level SET is_marked_deleted = 1, edited_by = @deleted_by WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			IF (@is_entry_level = 1)
			BEGIN
				SET @entry_level = 'YES'
			END
			ELSE
			BEGIN
				SET @entry_level = 'NO'
			END

			IF (@is_graduate_student = 1)
			BEGIN
				SET @graduate_student = 'YES'
			END
			ELSE
			BEGIN
				SET @graduate_student = 'NO'
			END

			IF @is_international = 1
			BEGIN
				SET @international = 'YES'
			END
			ELSE
			BEGIN
				SET @international = 'NO'
			END

			SET @transaction_done = 'MARK AS DELETED a student enrolment level ' + 
									'[Enrolment Level ID: ' + ISNULL(@sysid_enrolmentlevel, '') +
									'][Student ID: ' + ISNULL((SELECT 
																		si.student_id
																	FROM 
																		ums.student_information AS si
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	WHERE 
																		sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
									'][Student Name: ' + ISNULL((SELECT 
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	WHERE 
																		sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +
									'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	WHERE 
																		sysid_enrolmentcourse = @sysid_enrolmentcourse), '') +	
									'][Course Level: ' + ISNULL((SELECT 
																		yli.year_level_description + ' (' + cg.group_description + ')'
																	FROM 
																		ums.year_level_information AS yli 
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id														
																	WHERE 
																		sfl.sysid_feelevel = @sysid_feelevel), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +		
									'][Level Section: ' + ISNULL(@level_section, '') +
									'][Is Entry Level: ' + ISNULL(@entry_level, '') +	
									'][Is Student Graduating: ' + ISNULL(@graduate_student, '') +	
									'][Is International Student: ' + ISNULL(@international, '') +									
									'][Enrolment Level No: ' + ISNULL(CONVERT(varchar, @enrolment_level_no), '') +
									']'


			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		END

		FETCH NEXT FROM student_enrolment_level_delete_cursor
			INTO @sysid_enrolmentlevel, @sysid_enrolmentcourse, @sysid_feelevel, @sysid_semester, @level_section,
				@is_entry_level, @is_graduate_student, @is_international, @is_marked_deleted, @enrolment_level_no, 
				@is_semestral, @year_id, @sysid_student, @deleted_by
	END

	CLOSE student_enrolment_level_delete_cursor
	DEALLOCATE student_enrolment_level_delete_cursor


GO
-----------------------------------------------------------------

-- ##############################################END TABLE "student_enrolment_level" OBJECTS######################################################




-- ################################################TABLE "student_additional_fee" OBJECTS######################################################

--verifies that the trigger "Student_Additional_Fee_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Additional_Fee_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Additional_Fee_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Additional_Fee_Trigger_Insert
	ON  ums.student_additional_fee
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @additional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feeparticular varchar (50)
	DECLARE @amount decimal (12, 2)
	DECLARE @remarks varchar (100)
	DECLARE @created_by varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@additional_fee_id = i.additional_fee_id,
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@sysid_feeparticular = i.sysid_feeparticular,
		@amount = i.amount,
		@remarks = i.remarks,
		@year_id = sfi.year_id,
		@sysid_semester = sel.sysid_semester,
		@is_semestral = cg.is_semestral,
		@created_by = i.created_by
	FROM INSERTED AS i	
	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
	INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'CREATED a new student additional fee ' + 
							'[Fee ID: ' + ISNULL(CONVERT(varchar, @additional_fee_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Course: ' + ISNULL((SELECT 
																ci.course_title 
															FROM 
																ums.course_information AS ci 
															INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Course Level: ' + ISNULL((SELECT 
																yli.year_level_description + ' (' + cg.group_description + ')'
															FROM 
																ums.year_level_information AS yli 
															INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
															INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
							'][Fee Particular: ' + ISNULL((SELECT
																sfp.particular_description + ' (' + sfc.category_description + ')'
															FROM
																ums.school_fee_category AS sfc
															INNER JOIN ums.school_fee_particular AS sfp ON sfp.fee_category_id = sfc.fee_category_id
															WHERE
																sfp.sysid_feeparticular = @sysid_feeparticular), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Remarks: ' + ISNULL(@remarks, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Additional_Fee_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Additional_Fee_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Additional_Fee_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Additional_Fee_Trigger_Instead_Update
	ON  ums.student_additional_fee
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @additional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feeparticular varchar (50)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_for_withdrawn_charge bit
	DECLARE @remarks varchar (100)
	DECLARE @edited_by varchar (50)

	DECLARE @sysid_feeparticular_b varchar (50)
	DECLARE @amount_b decimal (12, 2)
	DECLARE @is_for_withdrawn_charge_b bit
	DECLARE @remarks_b varchar (100)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)

	DECLARE @has_update bit

	DECLARE student_additional_fee_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.additional_fee_id, i.sysid_enrolmentlevel, i.sysid_feeparticular, i.amount,
						 i.is_for_withdrawn_charge, i.remarks, sfi.year_id, sel.sysid_semester, cg.is_semestral, i.edited_by
				FROM INSERTED AS i	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	

	OPEN student_additional_fee_update_cursor

	FETCH NEXT FROM student_additional_fee_update_cursor
		INTO @additional_fee_id, @sysid_enrolmentlevel, @sysid_feeparticular, @amount,
				@is_for_withdrawn_charge, @remarks, @year_id, @sysid_semester, @is_semestral, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT 
			@sysid_feeparticular_b = sysid_feeparticular,
			@amount_b = amount,
			@is_for_withdrawn_charge_b = is_for_withdrawn_charge,
			@remarks_b = remarks
		FROM 
			ums.student_additional_fee
		WHERE
			additional_fee_id = @additional_fee_id

		SET @transaction_done = ''
		SET @has_update = 0	

		IF NOT ISNULL(@sysid_feeparticular, '') = ISNULL(@sysid_feeparticular_b, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Fee Particular Before: ' + ISNULL((SELECT
																	sfp.particular_description + ' (' + sfc.category_description + ')'
																FROM
																	ums.school_fee_category AS sfc
																INNER JOIN ums.school_fee_particular AS sfp ON sfp.fee_category_id = sfc.fee_category_id
																WHERE
																	sfp.sysid_feeparticular = @sysid_feeparticular_b), '') + ']' +
														'[Fee Particular After: ' + ISNULL((SELECT
																	sfp.particular_description + ' (' + sfc.category_description + ')'
																FROM
																	ums.school_fee_category AS sfc
																INNER JOIN ums.school_fee_particular AS sfp ON sfp.fee_category_id = sfc.fee_category_id
																WHERE
																	sfp.sysid_feeparticular = @sysid_feeparticular), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Fee Particular : ' + ISNULL((SELECT
																	sfp.particular_description + ' (' + sfc.category_description + ')'
																FROM
																	ums.school_fee_category AS sfc
																INNER JOIN ums.school_fee_particular AS sfp ON sfp.fee_category_id = sfc.fee_category_id
																WHERE
																	sfp.sysid_feeparticular = @sysid_feeparticular), '') + ']'
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF NOT (@is_for_withdrawn_charge = @is_for_withdrawn_charge_b)
		BEGIN
			SET @transaction_done = @transaction_done + '[Marked the fee as FOR CHARGES BEFORE WITHDRAWN]'
			SET @has_update = 1
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') +  ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') +  ']'
			SET @has_update = 1
		END		

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_additional_fee SET
				sysid_feeparticular = @sysid_feeparticular,
				amount = @amount,
				is_for_withdrawn_charge = @is_for_withdrawn_charge,
				remarks = @remarks,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				additional_fee_id = @additional_fee_id

			SET @transaction_done = 'UPDATED a student additional fee ' + 
									'[Fee ID: ' + ISNULL(CONVERT(varchar, @additional_fee_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Course Level: ' + ISNULL((SELECT 
																		yli.year_level_description + ' (' + cg.group_description + ')'
																	FROM 
																		ums.year_level_information AS yli 
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +									
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN
			
			--used for the delete trigger
			UPDATE ums.student_additional_fee SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				additional_fee_id = @additional_fee_id

		END	

		FETCH NEXT FROM student_additional_fee_update_cursor
			INTO @additional_fee_id, @sysid_enrolmentlevel, @sysid_feeparticular, @amount,
					@is_for_withdrawn_charge, @remarks, @year_id, @sysid_semester, @is_semestral, @edited_by
	END

	CLOSE student_additional_fee_update_cursor
	DEALLOCATE student_additional_fee_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Additional_Fee_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Student_Additional_Fee_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Additional_Fee_Trigger_Delete
GO

CREATE TRIGGER ums.Student_Additional_Fee_Trigger_Delete
	ON  ums.student_additional_fee
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @additional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feeparticular varchar (50)
	DECLARE @amount decimal (12, 2)
	DECLARE @remarks varchar (100)
	DECLARE @deleted_by varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)

	DECLARE student_additional_fee_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.additional_fee_id, d.sysid_enrolmentlevel, d.sysid_feeparticular, d.amount, d.remarks,
					sfi.year_id, sel.sysid_semester, cg.is_semestral, d.edited_by
				FROM DELETED AS d	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = d.sysid_enrolmentlevel
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	OPEN student_additional_fee_delete_cursor

	FETCH NEXT FROM student_additional_fee_delete_cursor
		INTO @additional_fee_id, @sysid_enrolmentlevel, @sysid_feeparticular, @amount, @remarks,
				@year_id, @sysid_semester, @is_semestral, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @year_semester_description = ''

		IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
		BEGIN
			SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
		END
		ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
		BEGIN
			SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
			FROM 
				ums.semester_information AS si
			INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
			INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
			WHERE 
				si.sysid_semester = @sysid_semester
		END

		SET @transaction_done = 'DELETED a student additional fee ' + 
								'[Fee ID: ' + ISNULL(CONVERT(varchar, @additional_fee_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Course: ' + ISNULL((SELECT 
																	ci.course_title 
																FROM 
																	ums.course_information AS ci 
																INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Course Level: ' + ISNULL((SELECT 
																	yli.year_level_description + ' (' + cg.group_description + ')'
																FROM 
																	ums.year_level_information AS yli 
																INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
								'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
								'][Fee Particular: ' + ISNULL((SELECT
																	sfp.particular_description + ' (' + sfc.category_description + ')'
																FROM
																	ums.school_fee_category AS sfc
																INNER JOIN ums.school_fee_particular AS sfp ON sfp.fee_category_id = sfc.fee_category_id
																WHERE
																	sfp.sysid_feeparticular = @sysid_feeparticular), '') +
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Remarks: ' + ISNULL(@remarks, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM student_additional_fee_delete_cursor
			INTO @additional_fee_id, @sysid_enrolmentlevel, @sysid_feeparticular, @amount, @remarks,
					@year_id, @sysid_semester, @is_semestral, @deleted_by
	END

	CLOSE student_additional_fee_delete_cursor
	DEALLOCATE student_additional_fee_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectStudentAdditionalFee" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectStudentAdditionalFee')
   DROP PROCEDURE ums.SelectStudentAdditionalFee
GO

CREATE PROCEDURE ums.SelectStudentAdditionalFee

	@query_string varchar (50) = '',
	@date_start datetime,
	@date_end datetime,
	@course_id_list nvarchar (MAX) = '',
	@year_level_id_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN

		-- A - '*'
		-- B - Date Start / End
		-- C - Course
		-- D - Year Level

		--	A	B	C	D
		-- ===============
		--	0	0	0	0
		--	0	0	0	1
		--	0	0	1	0
		--	0	0	1	1
		--	0	1	0	0
		--	0	1	0	1
		--	0	1	1	0
		--	0	1	1	1
		--	1	0	0	0
		--	1	0	0	1
		--	1	0	1	0
		--	1	0	1	1
		--	1	1	0	0
		--	1	1	0	1
		--	1	1	1	0
		--	1	1	1	1

		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0000)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0001)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0010)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (0011)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0100)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--WITH CURRENT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH CURRENT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT CURRENT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT CURRENT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0101)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0110)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (0111)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sel.level_section LIKE @query_string) OR
				((REPLACE(sel.level_section, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(sfp.particular_description LIKE @query_string) OR
				((REPLACE(sfp.particular_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sfc.category_description LIKE @query_string) OR
				((REPLACE(sfc.category_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1000)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)			
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1001)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1010)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)			
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (1011)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1)
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL)
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1100)
				(ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)			
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1101)
				(ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1110)
				(NOT ISNULL(@course_id_list, '') = '') AND (ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (1111)
				(NOT ISNULL(@course_id_list, '') = '') AND (NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 1) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)	
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 0)
			UNION ALL
			SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
				si.sysid_student AS sysid_student,
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sec.course_id AS course_id,
				sec.is_current_course AS is_current_course,
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.sysid_semester AS sysid_semester,
				sel.is_graduate_student AS is_graduate_student,
				sel.level_section AS level_section,
				saf.additional_fee_id AS additional_fee_id,
				saf.sysid_feeparticular AS sysid_feeparticular,
				saf.amount AS amount,
				saf.remarks AS remarks,
				sfp.particular_description AS particular_description,
				sfc.category_description AS category_description,
				sfc.category_no AS category_no,
				yli.year_level_description AS year_level_description,
				yli.acronym AS year_level_acronym,
				ci.department_id AS department_id,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				cg.group_description AS group_description,
				sy.year_description AS year_description,
				ss.semester_description AS semester_description
			FROM
				ums.student_information AS si
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
			INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
			INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
			INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS ylil_list ON ylil_list.var_str = sfl.year_level_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
			WHERE
				(NOT sec.course_id IS NULL) AND
				(sec.is_current_course = 0) AND
				(NOT sel.sysid_enrolmentlevel IS NULL) AND
				(cg.is_semestral = 1)		
			ORDER BY
				last_name, first_name, middle_name, student_id, category_no, particular_description ASC
		END
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student additional fee', 'Student Additional Fee'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectStudentAdditionalFee TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectBySysIDStudentDateStartEndStudentAdditionalFee" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectBySysIDStudentDateStartEndStudentAdditionalFee')
   DROP PROCEDURE ums.SelectBySysIDStudentDateStartEndStudentAdditionalFee
GO

CREATE PROCEDURE ums.SelectBySysIDStudentDateStartEndStudentAdditionalFee

	@sysid_student varchar (50) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''
		
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR (ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN

		SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY YEAR)
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			emer_pri.last_name AS emer_last_name,
			emer_pri.first_name AS emer_first_name,
			emer_pri.middle_name AS emer_middle_name,
			emer_pri.present_address AS emer_present_address,
			emer_pri.present_phone_nos AS emer_present_phone_nos,
			emer_pri.home_address AS emer_home_address,
			emer_pri.home_phone_nos AS emer_home_phone_nos,
			emer_pri.relationship_description AS emer_relationship_description,

			sec.course_id AS course_id,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			saf.additional_fee_id AS additional_fee_id,
			saf.sysid_feeparticular AS sysid_feeparticular,
			saf.amount AS amount,
			saf.remarks AS remarks,
			sfp.particular_description AS particular_description,
			sfc.category_description AS category_description,
			sfc.category_no AS category_no,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

		LEFT JOIN
			(
				SELECT
					ppi.sysid_person AS sysid_person,
					pri_ppi.last_name AS last_name,
					pri_ppi.first_name AS first_name,
					pri_ppi.middle_name AS middle_name,
					pri_ppi.present_address AS present_address,
					pri_ppi.present_phone_nos AS present_phone_nos,
					pri_ppi.home_address AS home_address,
					pri_ppi.home_phone_nos AS home_phone_nos,
					rpt.relationship_description AS relationship_description
				FROM
					ums.person_relationship_information AS ppi
				INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
				INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
				WHERE
					(ppi.is_emergency_contact = 1)			
				
			) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 0) AND
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
		WHERE
			(NOT sec.course_id IS NULL) AND
			(sec.sysid_student = @sysid_student) AND
			(sec.is_current_course = 1) AND
			(NOT sel.sysid_enrolmentlevel IS NULL) AND
			(cg.is_semestral = 0)
		UNION ALL
		SELECT		--WITH COURSE AND WITH YEAR LEVEL (BY SEMESTER)
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			emer_pri.last_name AS emer_last_name,
			emer_pri.first_name AS emer_first_name,
			emer_pri.middle_name AS emer_middle_name,
			emer_pri.present_address AS emer_present_address,
			emer_pri.present_phone_nos AS emer_present_phone_nos,
			emer_pri.home_address AS emer_home_address,
			emer_pri.home_phone_nos AS emer_home_phone_nos,
			emer_pri.relationship_description AS emer_relationship_description,

			sec.course_id AS course_id,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			saf.additional_fee_id AS additional_fee_id,
			saf.sysid_feeparticular AS sysid_feeparticular,
			saf.amount AS amount,
			saf.remarks AS remarks,
			sfp.particular_description AS particular_description,
			sfc.category_description AS category_description,
			sfc.category_no AS category_no,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

		LEFT JOIN
			(
				SELECT
					ppi.sysid_person AS sysid_person,
					pri_ppi.last_name AS last_name,
					pri_ppi.first_name AS first_name,
					pri_ppi.middle_name AS middle_name,
					pri_ppi.present_address AS present_address,
					pri_ppi.present_phone_nos AS present_phone_nos,
					pri_ppi.home_address AS home_address,
					pri_ppi.home_phone_nos AS home_phone_nos,
					rpt.relationship_description AS relationship_description
				FROM
					ums.person_relationship_information AS ppi
				INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
				INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
				WHERE
					(ppi.is_emergency_contact = 1)			
				
			) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
		WHERE
			(NOT sec.course_id IS NULL) AND
			(sec.sysid_student = @sysid_student) AND
			(sec.is_current_course = 1) AND
			(NOT sel.sysid_enrolmentlevel IS NULL) AND
			(cg.is_semestral = 1)
		UNION ALL
		SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY YEAR)
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			emer_pri.last_name AS emer_last_name,
			emer_pri.first_name AS emer_first_name,
			emer_pri.middle_name AS emer_middle_name,
			emer_pri.present_address AS emer_present_address,
			emer_pri.present_phone_nos AS emer_present_phone_nos,
			emer_pri.home_address AS emer_home_address,
			emer_pri.home_phone_nos AS emer_home_phone_nos,
			emer_pri.relationship_description AS emer_relationship_description,

			sec.course_id AS course_id,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			saf.additional_fee_id AS additional_fee_id,
			saf.sysid_feeparticular AS sysid_feeparticular,
			saf.amount AS amount,
			saf.remarks AS remarks,
			sfp.particular_description AS particular_description,
			sfc.category_description AS category_description,
			sfc.category_no AS category_no,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

		LEFT JOIN
			(
				SELECT
					ppi.sysid_person AS sysid_person,
					pri_ppi.last_name AS last_name,
					pri_ppi.first_name AS first_name,
					pri_ppi.middle_name AS middle_name,
					pri_ppi.present_address AS present_address,
					pri_ppi.present_phone_nos AS present_phone_nos,
					pri_ppi.home_address AS home_address,
					pri_ppi.home_phone_nos AS home_phone_nos,
					rpt.relationship_description AS relationship_description
				FROM
					ums.person_relationship_information AS ppi
				INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
				INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
				WHERE
					(ppi.is_emergency_contact = 1)			
				
			) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 0) AND
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
		WHERE
			(NOT sec.course_id IS NULL) AND
			(sec.sysid_student = @sysid_student) AND
			(sec.is_current_course = 0) AND
			(NOT sel.sysid_enrolmentlevel IS NULL) AND
			(cg.is_semestral = 0)
		UNION ALL
		SELECT		--WITH NOT COURSE AND WITH YEAR LEVEL (BY SEMESTER)
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,

			emer_pri.last_name AS emer_last_name,
			emer_pri.first_name AS emer_first_name,
			emer_pri.middle_name AS emer_middle_name,
			emer_pri.present_address AS emer_present_address,
			emer_pri.present_phone_nos AS emer_present_phone_nos,
			emer_pri.home_address AS emer_home_address,
			emer_pri.home_phone_nos AS emer_home_phone_nos,
			emer_pri.relationship_description AS emer_relationship_description,

			sec.course_id AS course_id,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			saf.additional_fee_id AS additional_fee_id,
			saf.sysid_feeparticular AS sysid_feeparticular,
			saf.amount AS amount,
			saf.remarks AS remarks,
			sfp.particular_description AS particular_description,
			sfc.category_description AS category_description,
			sfc.category_no AS category_no,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

		LEFT JOIN
			(
				SELECT
					ppi.sysid_person AS sysid_person,
					pri_ppi.last_name AS last_name,
					pri_ppi.first_name AS first_name,
					pri_ppi.middle_name AS middle_name,
					pri_ppi.present_address AS present_address,
					pri_ppi.present_phone_nos AS present_phone_nos,
					pri_ppi.home_address AS home_address,
					pri_ppi.home_phone_nos AS home_phone_nos,
					rpt.relationship_description AS relationship_description
				FROM
					ums.person_relationship_information AS ppi
				INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
				INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
				WHERE
					(ppi.is_emergency_contact = 1)			
				
			) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		INNER JOIN ums.student_additional_fee AS saf ON saf.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular
		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id
		WHERE
			(NOT sec.course_id IS NULL) AND
			(sec.sysid_student = @sysid_student) AND
			(sec.is_current_course = 0) AND
			(NOT sel.sysid_enrolmentlevel IS NULL) AND
			(cg.is_semestral = 1)			
		ORDER BY
			last_name, first_name, middle_name, student_id, category_no, particular_description ASC
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student additional fee', 'Student Additional Fee'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectBySysIDStudentDateStartEndStudentAdditionalFee TO db_umsusers
GO
-------------------------------------------------------------


-- ##############################################END TABLE "student_additional_fee" OBJECTS######################################################





-- ################################################TABLE "student_optional_fee" OBJECTS#######################################################

--verifies that the trigger "Student_Optional_Fee_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Optional_Fee_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Optional_Fee_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Optional_Fee_Trigger_Insert
	ON  ums.student_optional_fee
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @optional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feedetails varchar (50)
	DECLARE @created_by varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@optional_fee_id = i.optional_fee_id,
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@sysid_feedetails = i.sysid_feedetails,
		@year_id = sfi.year_id,
		@sysid_semester = sel.sysid_semester,
		@is_semestral = cg.is_semestral,
		@created_by = i.created_by
	FROM INSERTED AS i		
	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
	INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'CREATED a new student optional fee ' + 
							'[Fee ID: ' + ISNULL(CONVERT(varchar, @optional_fee_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN	ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Course: ' + ISNULL((SELECT 
																ci.course_title 
															FROM 
																ums.course_information AS ci 
															INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Course Level: ' + ISNULL((SELECT 
																yli.year_level_description + ' (' + cg.group_description + ')'
															FROM 
																ums.year_level_information AS yli 
															INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
															INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
							'][Fee Particular: ' + ISNULL((SELECT
																sfp.particular_description + ' (' + sfc.category_description + ')'
															FROM
																ums.school_fee_details AS sfd
															INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
															INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
															WHERE
																sfd.sysid_feedetails = @sysid_feedetails), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, (SELECT
																						sfd.amount
																					FROM
																						ums.school_fee_details AS sfd
																					WHERE
																						sfd.sysid_feedetails = @sysid_feedetails)), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

-- verifies that the trigger "Student_Optional_Fee_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Optional_Fee_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Optional_Fee_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Optional_Fee_Trigger_Instead_Update
	ON  ums.student_optional_fee
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @optional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feedetails varchar (50)
	DECLARE @is_for_withdrawn_charge bit
	DECLARE @edited_by varchar (50)

	DECLARE @is_for_withdrawn_charge_b bit

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)

	DECLARE @has_update bit
	
	DECLARE student_optional_fee_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.optional_fee_id, i.sysid_enrolmentlevel, i.sysid_feedetails, i.is_for_withdrawn_charge,
					sfi.year_id, sel.sysid_semester, is_semestral, i.edited_by
				FROM INSERTED AS i
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	OPEN student_optional_fee_update_cursor

	FETCH NEXT FROM student_optional_fee_update_cursor
		INTO @optional_fee_id, @sysid_enrolmentlevel, @sysid_feedetails, @is_for_withdrawn_charge, 
				@year_id, @sysid_semester, @is_semestral, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@is_for_withdrawn_charge_b = sof.is_for_withdrawn_charge
		FROM
			ums.student_optional_fee AS sof
		WHERE
			sof.optional_fee_id = @optional_fee_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF NOT (@is_for_withdrawn_charge = @is_for_withdrawn_charge_b)
		BEGIN
			SET @transaction_done = @transaction_done + '[Marked the fee as FOR CHARGES BEFORE WITHDRAWN]'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_optional_fee SET
				is_for_withdrawn_charge = @is_for_withdrawn_charge,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				optional_fee_id = @optional_fee_id

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			SET @transaction_done = 'UPDATED a student optional fee ' + 
									'[Fee ID: ' + ISNULL(CONVERT(varchar, @optional_fee_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																	FROM 
																		ums.student_information AS si
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN	ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Course: ' + ISNULL((SELECT 
																		ci.course_title 
																	FROM 
																		ums.course_information AS ci 
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Course Level: ' + ISNULL((SELECT 
																		yli.year_level_description + ' (' + cg.group_description + ')'
																	FROM 
																		ums.year_level_information AS yli 
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
									'][Fee Particular: ' + ISNULL((SELECT
																		sfp.particular_description + ' (' + sfc.category_description + ')'
																	FROM
																		ums.school_fee_details AS sfd
																	INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
																	INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
																	WHERE
																		sfd.sysid_feedetails = @sysid_feedetails), '') +
									'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, (SELECT
																						sfd.amount
																					FROM
																						ums.school_fee_details AS sfd
																					WHERE
																						sfd.sysid_feedetails = @sysid_feedetails)), 1), '0.00') +
									']' + @transaction_done


			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN
			
			--used for the delete trigger
			UPDATE ums.student_optional_fee SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				optional_fee_id = @optional_fee_id

		END	

		FETCH NEXT FROM student_optional_fee_update_cursor
			INTO @optional_fee_id, @sysid_enrolmentlevel, @sysid_feedetails, @is_for_withdrawn_charge, 
					@year_id, @sysid_semester, @is_semestral, @edited_by
	END

	CLOSE student_optional_fee_update_cursor
	DEALLOCATE student_optional_fee_update_cursor
	
GO
-------------------------------------------------------------------------

--verifies that the trigger "Student_Optional_Fee_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Student_Optional_Fee_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Optional_Fee_Trigger_Delete
GO

CREATE TRIGGER ums.Student_Optional_Fee_Trigger_Delete
	ON  ums.student_optional_fee
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @optional_fee_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @sysid_feedetails varchar (50)
	DECLARE @deleted_by varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @year_semester_description varchar (100)
	
	DECLARE student_optional_fee_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.optional_fee_id, d.sysid_enrolmentlevel, d.sysid_feedetails, sfi.year_id,
					sel.sysid_semester, cg.is_semestral, d.edited_by
				FROM DELETED AS d		
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = d.sysid_enrolmentlevel
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id

	OPEN student_optional_fee_delete_cursor

	FETCH NEXT FROM student_optional_fee_delete_cursor
		INTO @optional_fee_id, @sysid_enrolmentlevel, @sysid_feedetails, @year_id,
			@sysid_semester, @is_semestral, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @year_semester_description = ''

		IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
		BEGIN
			SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
		END
		ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
		BEGIN
			SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
			FROM 
				ums.semester_information AS si
			INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
			INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
			WHERE 
				si.sysid_semester = @sysid_semester
		END

		SET @transaction_done = 'DELETED a student optional fee ' + 
								'[Fee ID: ' + ISNULL(CONVERT(varchar, @optional_fee_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN	ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Student Course: ' + ISNULL((SELECT 
																	ci.course_title 
																FROM 
																	ums.course_information AS ci 
																INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
								'][Course Level: ' + ISNULL((SELECT 
																	yli.year_level_description + ' (' + cg.group_description + ')'
																FROM 
																	ums.year_level_information AS yli 
																INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
																WHERE 
																	sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +							
								'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
								'][Fee Particular: ' + ISNULL((SELECT
																	sfp.particular_description + ' (' + sfc.category_description + ')'
																FROM
																	ums.school_fee_details AS sfd
																INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
																INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
																WHERE
																	sfd.sysid_feedetails = @sysid_feedetails), '') +
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, (SELECT
																							sfd.amount
																						FROM
																							ums.school_fee_details AS sfd
																						WHERE
																							sfd.sysid_feedetails = @sysid_feedetails)), 1), '0.00') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM student_optional_fee_delete_cursor
			INTO @optional_fee_id, @sysid_enrolmentlevel, @sysid_feedetails, @year_id,
				@sysid_semester, @is_semestral, @deleted_by
	END

	CLOSE student_optional_fee_delete_cursor
	DEALLOCATE student_optional_fee_delete_cursor	

GO
-----------------------------------------------------------------

-- ##############################################END TABLE "student_optional_fee" OBJECTS#######################################################



-- ################################################TABLE "student_payments" OBJECTS######################################################

--verifies that the trigger "Student_Payments_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Payments_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Payments_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Payments_Trigger_Insert
	ON  ums.student_payments
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @is_downpayment bit
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @sysid_account_credit varchar (50)
	DECLARE @is_miscellaneous_income bit

	DECLARE @created_by varchar (50)

	DECLARE @downpayment varchar (50)
	DECLARE @miscellaneous_income varchar (50)
	
	SELECT 
		@payment_id = i.payment_id,
		@sysid_student = i.sysid_student,
		@payment_date = i.payment_date,
		@receipt_date = i.receipt_date,
		@receipt_no = i.receipt_no,
		@remarks = i.remarks,
		@is_downpayment = i.is_downpayment,
		@amount = i.amount,
		@discount_amount = i.discount_amount,		
		@amount_tendered = i.amount_tendered,
		@bank = i.bank,
		@check_no = i.check_no,
		@sysid_account_credit = i.sysid_account_credit,
		@is_miscellaneous_income = i.is_miscellaneous_income,

		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_downpayment = 1)
	BEGIN
		SET @downpayment = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment = 'NO'
	END

	IF (@is_miscellaneous_income = 1)
	BEGIN
		SET @miscellaneous_income = 'YES'
	END
	ELSE
	BEGIN
		SET @miscellaneous_income = 'NO'
	END

	SET @transaction_done = 'CREATED a new student payment ' + 
							'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') +
							'][Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') +
							'][Receipt No.: ' + ISNULL(@receipt_no, '') +
							'][Remarks: ' + ISNULL(@remarks, '') + 
							'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Discounted Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +
							'][Amount Tendered: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +
							'][Bank: ' + ISNULL(@bank, '') +
							'][Check No.: ' + ISNULL(@check_no, '') +
							'][Credit Entry: ' + ISNULL((SELECT
																coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
															FROM
																ums.chart_of_accounts AS coa
															INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
															WHERE
																(coa.sysid_account = @sysid_account_credit)), '') +
							'][Is Miscellaneous Income: ' + ISNULL(@miscellaneous_income, '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Payments_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Payments_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Payments_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Payments_Trigger_Instead_Update
	ON  ums.student_payments
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @is_downpayment bit
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @sysid_account_credit varchar (50)
	DECLARE @is_miscellaneous_income bit

	DECLARE @edited_by varchar (50)
	
	DECLARE @payment_date_b datetime
	DECLARE @receipt_date_b datetime
	DECLARE @receipt_no_b varchar (50)
	DECLARE @remarks_b varchar (100)
	DECLARE @is_downpayment_b bit
	DECLARE @amount_b decimal (12, 2)
	DECLARE @discount_amount_b decimal (12, 2)
	DECLARE @amount_tendered_b decimal (12, 2)
	DECLARE @bank_b varchar (50)
	DECLARE @check_no_b varchar (50)
	DECLARE @sysid_account_credit_b varchar (50)
	DECLARE @is_miscellaneous_income_b bit
	
	DECLARE @downpayment varchar (50)
	DECLARE @downpayment_b varchar (50)
	DECLARE @miscellaneous_income varchar (50)
	DECLARE @miscellaneous_income_b varchar (50)

	DECLARE @has_update bit

	DECLARE student_payments_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.payment_id, i.sysid_student, i.payment_date, i.receipt_date, i.receipt_no, i.remarks, 
				i.is_downpayment, i.amount, i.discount_amount, i.amount_tendered,
				i.bank, i.check_no, i.sysid_account_credit, i.is_miscellaneous_income, i.edited_by
			FROM INSERTED AS i

	OPEN student_payments_update_cursor

	FETCH NEXT FROM student_payments_update_cursor
		INTO @payment_id, @sysid_student, @payment_date, @receipt_date, @receipt_no, @remarks, 
				@is_downpayment, @amount, @discount_amount, @amount_tendered,
				@bank, @check_no, @sysid_account_credit, @is_miscellaneous_income, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@payment_date_b = stp.payment_date,
			@receipt_date_b = stp.receipt_date,
			@receipt_no_b = stp.receipt_no,
			@remarks_b = stp.remarks,
			@is_downpayment_b = stp.is_downpayment,
			@amount_b = stp.amount,
			@discount_amount_b = stp.discount_amount,
			@amount_tendered_b = stp.amount_tendered,
			@bank_b = stp.bank, 
			@check_no_b = stp.check_no,
			@sysid_account_credit_b = stp.sysid_account_credit,
			@is_miscellaneous_income_b = stp.is_miscellaneous_income
		FROM
			ums.student_payments AS stp
		WHERE
			stp.payment_id = @payment_id

		SET @transaction_done = ''
		SET @has_update = 0
		
		IF (NOT ISNULL(CONVERT(varchar, @payment_date, 101), '') = ISNULL(CONVERT(varchar, @payment_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Reflected Date Before: ' + ISNULL(CONVERT(varchar, @payment_date_b, 101), '') + ']' +
														'[Reflected Date After: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') + ']'
		END

		IF (NOT ISNULL(CONVERT(varchar, @receipt_date, 101), '') = ISNULL(CONVERT(varchar, @receipt_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt Date Before: ' + ISNULL(CONVERT(varchar, @receipt_date_b, 101), '') + ']' +
														'[Receipt Date After: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') + ']'
		END

		IF NOT ISNULL(@receipt_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@receipt_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt No. Before: ' + ISNULL(@receipt_no_b, '') + ']' +
														'[Receipt No. After: ' + ISNULL(@receipt_no, '') + ']'
			SET @has_update = 1
		END		
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt No.: ' + ISNULL(@receipt_no, '') + ']'
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') +  ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') +  ']'
			SET @has_update = 1
		END		

		IF NOT @is_downpayment = @is_downpayment_b
		BEGIN

			IF (@is_downpayment = 1)
			BEGIN
				SET @downpayment = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment = 'NO'
			END

			IF (@is_downpayment_b = 1)
			BEGIN
				SET @downpayment_b = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Downpayment Before: ' + ISNULL(@downpayment_b, '') + ']' +
														'[Is Downpayment After: ' + ISNULL(@downpayment, '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') +  ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Discounted Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount_b), 1), '0.00') +  ']' +
														'[Discounted Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Tendered Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered_b), 1), '0.00') +  ']' +
														'[Amount Tendered After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@bank COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@bank_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Bank Before: ' + ISNULL(@bank_b, '') +  ']' +
														'[Bank After: ' + ISNULL(@bank, '') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@check_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@check_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Check No. Before: ' + ISNULL(@check_no_b, '') +  ']' +
														'[Check No. After: ' + ISNULL(@check_no, '') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@sysid_account_credit COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_account_credit_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Credit Entry Before: ' + ISNULL((SELECT
																								coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																							FROM
																								ums.chart_of_accounts AS coa
																							INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																							WHERE
																								(coa.sysid_account = @sysid_account_credit_b)), '') +  ']' +
														'[Credit Entry After: ' + ISNULL((SELECT
																								coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																							FROM
																								ums.chart_of_accounts AS coa
																							INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																							WHERE
																								(coa.sysid_account = @sysid_account_credit)), '') +  ']'
			SET @has_update = 1
		END		

		IF NOT @is_miscellaneous_income = @is_miscellaneous_income_b
		BEGIN

			IF (@is_miscellaneous_income = 1)
			BEGIN
				SET @miscellaneous_income = 'YES'
			END
			ELSE
			BEGIN
				SET @miscellaneous_income = 'NO'
			END

			IF (@is_miscellaneous_income_b = 1)
			BEGIN
				SET @miscellaneous_income_b = 'YES'
			END
			ELSE
			BEGIN
				SET @miscellaneous_income_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Miscellaneous Income Before: ' + ISNULL(@miscellaneous_income_b, '') + ']' +
														'[Is Miscellaneous Income After: ' + ISNULL(@miscellaneous_income, '') +  ']'
			SET @has_update = 1
		END


		IF @has_update = 1
		BEGIN

			UPDATE ums.student_payments SET
				payment_date = @payment_date,
				receipt_date = @receipt_date,
				receipt_no = @receipt_no,
				remarks = @remarks,
				is_downpayment = @is_downpayment,
				amount = @amount,
				discount_amount = @discount_amount,			
				amount_tendered = @amount_tendered,
				bank = @bank,
				check_no = @check_no,
				sysid_account_credit = @sysid_account_credit,
				is_miscellaneous_income = @is_miscellaneous_income,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				payment_id = @payment_id

			SET @transaction_done = 'UPDATED a student payment ' + 
									'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																	FROM 
																		ums.student_information AS si
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.student_payments SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				payment_id = @payment_id

		END	

		FETCH NEXT FROM student_payments_update_cursor
			INTO @payment_id, @sysid_student, @payment_date, @receipt_date, @receipt_no, @remarks, 
					@is_downpayment, @amount, @discount_amount, @amount_tendered,
					@bank, @check_no, @sysid_account_credit, @is_miscellaneous_income, @edited_by


	END

	CLOSE student_payments_update_cursor
	DEALLOCATE student_payments_update_cursor

GO
-------------------------------------------------------------------

--verifies that the trigger "Student_Payments_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Payments_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Payments_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Payments_Trigger_Instead_Delete
	ON  ums.student_payments
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @is_downpayment bit
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @deleted_by varchar (50)
	DECLARE @sysid_account_credit varchar (50)
	DECLARE @is_miscellaneous_income bit

	DECLARE @downpayment varchar (50)
	DECLARE @miscellaneous_income varchar (50)

	DECLARE student_payments_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.payment_id, d.sysid_student, d.payment_date, d.receipt_date, d.receipt_no, d.remarks,
				d.is_downpayment, d.amount, d.discount_amount, d.amount_tendered,
				d.bank, d.check_no, d.sysid_account_credit, d.is_miscellaneous_income, d.edited_by
			FROM 
				DELETED AS d

	OPEN student_payments_delete_cursor

	FETCH NEXT FROM student_payments_delete_cursor
		INTO @payment_id, @sysid_student, @payment_date, @receipt_date, @receipt_no, @remarks, 
				@is_downpayment, @amount, @discount_amount, @amount_tendered,
				@bank, @check_no, @sysid_account_credit, @is_miscellaneous_income, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_downpayment = 1)
		BEGIN
			SET @downpayment = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment = 'NO'
		END

		IF (@is_miscellaneous_income = 1)
		BEGIN
			SET @miscellaneous_income = 'YES'
		END
		ELSE
		BEGIN
			SET @miscellaneous_income = 'NO'
		END

		SET @transaction_done = 'DELETED a student payment ' + 
								'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') +
								'][Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') +
								'][Receipt No.: ' + ISNULL(@receipt_no, '') +
								'][Remarks: ' + ISNULL(@remarks, '') + 
								'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Discounted Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +
								'][Amount Tendered: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +
								'][Bank: ' + ISNULL(@bank, '') +
								'][Check No.: ' + ISNULL(@check_no, '') +
								'][Credit Entry: ' + ISNULL((SELECT
																	coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																FROM
																	ums.chart_of_accounts AS coa
																INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																WHERE
																	(coa.sysid_account = @sysid_account_credit)), '') +
								'][Is Miscellaneous Income: ' + ISNULL(@miscellaneous_income, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM student_payments_delete_cursor
			INTO @payment_id, @sysid_student, @payment_date, @receipt_date, @receipt_no, @remarks, 
					@is_downpayment, @amount, @discount_amount, @amount_tendered,
					@bank, @check_no, @sysid_account_credit, @is_miscellaneous_income, @deleted_by


	END

	CLOSE student_payments_delete_cursor
	DEALLOCATE student_payments_delete_cursor	

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectByDateStartEndCashDiscountsStudentPaymentMiscellaneousIncome" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndCashDiscountsStudentPaymentMiscellaneousIncome')
   DROP PROCEDURE ums.SelectByDateStartEndCashDiscountsStudentPaymentMiscellaneousIncome
GO

CREATE PROCEDURE ums.SelectByDateStartEndCashDiscountsStudentPaymentMiscellaneousIncome
	
	@date_start datetime,
	@date_end datetime,
	@is_consolidated bit = 0,

	@system_user_id varchar(50) = ''
	
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN

		WITH cte_student_payments(payment_id, received_from, sysid_student, received_date, receipt_no, amount, discount_amount,
				sysid_account_credit, is_miscellaneous_income) AS
		(
			SELECT	--STUDENT PAYMENTS
				stp.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				stp.sysid_student AS sysid_student,
				stp.created_on AS received_date,
				stp.receipt_no AS receipt_no,
				stp.amount AS amount,
				stp.discount_amount AS discount_amount,
				stp.sysid_account_credit AS sysid_account_credit,
				'false' AS is_miscellaneous_income
			FROM
				ums.student_payments AS stp
			INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(stp.is_miscellaneous_income = 0) AND				
				(NOT stp.sysid_account_credit IS NULL) AND
				(stp.receipt_date BETWEEN @date_start AND @date_end) AND
				(((@is_consolidated = 0) AND (stp.created_by = @system_user_id)) OR
				(@is_consolidated = 1)) AND
				(stp.discount_amount > 0)
		),
		cte_miscellaneous_income(payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount,  discount_amount,
				sysid_account_credit, is_miscellaneous_income) AS
		(
			SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
				stp.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				stp.sysid_student AS sysid_student,
				NULL AS sysid_employee,
				stp.created_on AS received_date,
				stp.receipt_no AS receipt_no,
				stp.amount AS amount,
				stp.discount_amount AS discount_amount,
				stp.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.student_payments AS stp
			INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(stp.is_miscellaneous_income = 1) AND
				(NOT stp.sysid_account_credit IS NULL) AND
				(stp.receipt_date BETWEEN @date_start AND @date_end) AND
				(((@is_consolidated = 0) AND (stp.created_by = @system_user_id)) OR
				(@is_consolidated = 1)) AND
				(stp.discount_amount > 0)
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
				mci.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				mci.sysid_student AS sysid_student,
				NULL AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.discount_amount AS discount_amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
			LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(NOT mci.sysid_student IS NULL) AND
				(mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @date_start AND @date_end) AND
				(((@is_consolidated = 0) AND (mci.created_by = @system_user_id)) OR
				(@is_consolidated = 1)) AND
				(mci.discount_amount > 0)
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
				mci.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
				NULL AS sysid_student,
				mci.sysid_employee AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.discount_amount AS discount_amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
			LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(mci.sysid_student IS NULL) AND
				(NOT mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @date_start AND @date_end) AND
				(((@is_consolidated = 0) AND (mci.created_by = @system_user_id)) OR
				(@is_consolidated = 1)) AND
				(mci.discount_amount > 0)
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
				mci.payment_id AS payment_id,
				mci.received_from AS received_from,
				NULL AS sysid_student,
				NULL AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.discount_amount AS discount_amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(mci.sysid_student IS NULL) AND
				(mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @date_start AND @date_end) AND
				(((@is_consolidated = 0) AND (mci.created_by = @system_user_id)) OR
				(@is_consolidated = 1)) AND
				(mci.discount_amount > 0)
		)		

		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end)        
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_student_payments AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id 
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_student_payments AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(sec.sysid_enrolmentcourse IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(del_sel.is_marked_deleted = 1) AND
				(NOT del_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(NOT pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										cte_student_payments AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
									INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
									INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
									WHERE
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 0) AND 
										(not_sel.sysid_semester IS NULL) AND 
										((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
									UNION ALL
									SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										cte_student_payments AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
									INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
									WHERE
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 1) AND 
										(NOT not_sel.sysid_semester IS NULL) AND 
										((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no	
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id 
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sec.sysid_enrolmentcourse IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(NOT del_pmi.sysid_student IS NULL) AND
				(del_sel.is_marked_deleted = 1) AND
				(NOT del_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(NOT not_pmi.sysid_student IS NULL) AND
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(NOT not_pmi.sysid_student IS NULL) AND
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		WHERE
			(NOT pmi.sysid_student IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(NOT pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										cte_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
									INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
									INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
									WHERE
										(NOT not_pmi.sysid_student IS NULL) AND
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 0) AND 
										(not_sel.sysid_semester IS NULL) AND 
										((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
									UNION ALL
									SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										cte_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
									INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
									WHERE
										(NOT not_pmi.sysid_student IS NULL) AND
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 1) AND 
										(NOT not_sel.sysid_semester IS NULL) AND 
										((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS MISCELLENOUS INCOME AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no		
		WHERE
			(NOT pmi.sysid_student IS NULL)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	RELATED TO AN EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_employee AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			di.department_id AS course_department_id,
			di.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account		
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = pmi.sysid_employee
		INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
		WHERE
			(NOT pmi.sysid_employee IS NULL) AND
			(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = pmi.sysid_employee AND
												effectivity_date <= pmi.received_date))
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	NOT RELATED TO A STUDENT OR EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.discount_amount AS discount_amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		WHERE
			(pmi.sysid_student IS NULL) AND
			(pmi.sysid_employee IS NULL)
		ORDER BY
			pmi.receipt_no ASC, pmi.received_date ASC
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a miscellaneous income', 'Miscellaneous Income'
	END
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndCashDiscountsStudentPaymentMiscellaneousIncome TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "student_payments" OBJECTS######################################################





-- ################################################TABLE "student_scholarship" OBJECTS######################################################

--verifies that the trigger "Student_Scholarship_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Scholarship_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Scholarship_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Scholarship_Trigger_Insert
	ON  ums.student_scholarship
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @sysid_scholarship varchar (50)
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @created_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@sysid_studentscholarship = i.sysid_studentscholarship,
		@sysid_scholarship = i.sysid_scholarship,
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@year_id = sfi.year_id,
		@sysid_semester = sel.sysid_semester,
		@is_semestral = cg.is_semestral,
		@created_by = i.created_by
	FROM INSERTED AS i
	INNER JOIN ums.scholarship_information AS si ON si.sysid_scholarship = i.sysid_scholarship
	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
	INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	--course group is based on the enrolment level because
																					--the year_id and the sysid_semester is taken from the enrolment level

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'CREATED a new student scholarship ' + 
							'[Scholarship ID: ' + ISNULL(@sysid_studentscholarship, '') +
							'][Student ID: ' + ISNULL((SELECT 
																si.student_id
															FROM 												
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 			
																ums.person_information AS pri									
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Student Course: ' + ISNULL((SELECT 
																ci.course_title 
															FROM 
																ums.course_information AS ci 
															INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Course Level: ' + ISNULL((SELECT 
																yli.year_level_description + ' (' + cg.group_description + ') '
															FROM 
																ums.year_level_information AS yli 
															INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel	
															INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id													
															WHERE 
																sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
							'][Scholarship Description: ' + ISNULL((SELECT
																		si.scholarship_description + ' (' + cg.group_description + ')'
																	FROM
																		ums.scholarship_information AS si
																	INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
																	WHERE
																		si.sysid_scholarship = @sysid_scholarship), '') +
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Scholarship_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Scholarship_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Scholarship_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Scholarship_Trigger_Instead_Update
	ON  ums.student_scholarship
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @sysid_scholarship varchar (50)
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @is_marked_deleted bit
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @edited_by varchar (50)

	DECLARE @sysid_scholarship_b varchar (50)

	DECLARE @year_semester_description varchar (100)

	DECLARE @has_update bit

	DECLARE student_scholarship_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.sysid_studentscholarship, i.sysid_scholarship, i.sysid_enrolmentlevel,
				i.is_marked_deleted, sfi.year_id, sel.sysid_semester, cg.is_semestral, i.edited_by
			FROM INSERTED AS i
			INNER JOIN ums.scholarship_information AS si ON si.sysid_scholarship = i.sysid_scholarship
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	--course group is based on the enrolment level because
																							--the year_id and the sysid_semester is taken from the enrolment level

	OPEN student_scholarship_update_cursor

	FETCH NEXT FROM student_scholarship_update_cursor
		INTO @sysid_studentscholarship, @sysid_scholarship, @sysid_enrolmentlevel,
				@is_marked_deleted, @year_id, @sysid_semester, @is_semestral, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @is_marked_deleted = 0
		BEGIN

			SELECT
				@sysid_scholarship_b = sysid_scholarship
			FROM
				ums.student_scholarship
			WHERE
				sysid_studentscholarship = @sysid_studentscholarship

			SET @transaction_done = ''
			SET @has_update = 0	

			IF (NOT @sysid_scholarship = @sysid_scholarship_b)
			BEGIN

				SET @transaction_done = @transaction_done + '[Scholarship Description Before: ' + ISNULL((SELECT
																				si.scholarship_description + ' (' + cg.group_description + ')'
																			FROM
																				ums.scholarship_information AS si
																			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
																			WHERE
																				si.sysid_scholarship = @sysid_scholarship_b), '') + ']' +
															'[Scholarship Description After: ' + ISNULL((SELECT
																				si.scholarship_description + ' (' + cg.group_description + ')'
																			FROM
																				ums.scholarship_information AS si
																			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
																			WHERE
																				si.sysid_scholarship = @sysid_scholarship), '') + ']'
				SET @has_update = 1
			END			


			IF @has_update = 1
			BEGIN

				UPDATE ums.student_scholarship SET
					sysid_scholarship = @sysid_scholarship,
					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					sysid_studentscholarship = @sysid_studentscholarship

				SET @year_semester_description = ''

				IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
				BEGIN
					SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
				END
				ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
				BEGIN
					SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
					FROM 
						ums.semester_information AS si
					INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
					INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
					WHERE 
						si.sysid_semester = @sysid_semester
				END

				SET @transaction_done = 'UPDATED a student scholarship ' + 
										'[Scholarship ID: ' + ISNULL(@sysid_studentscholarship, '') +
										'][Student ID: ' + ISNULL((SELECT 
																			si.student_id
																		FROM 												
																			ums.student_information AS si
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Student Name: ' + ISNULL((SELECT 
																			pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																		FROM 			
																			ums.person_information AS pri									
																		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Student Course: ' + ISNULL((SELECT 
																			ci.course_title 
																		FROM 
																			ums.course_information AS ci 
																		INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][Course Level: ' + ISNULL((SELECT 
																			yli.year_level_description + ' (' + cg.group_description + ') '
																		FROM 
																			ums.year_level_information AS yli 
																		INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel	
																		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id													
																		WHERE 
																			sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
										'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
										']' + @transaction_done
										

				IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
				BEGIN
					SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
				END
						
				EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

			END
			ELSE IF NOT @edited_by IS NULL
			BEGIN

				--used for the delete trigger
				UPDATE ums.student_scholarship SET
					edited_on = GETDATE(),
					edited_by = @edited_by
				WHERE
					sysid_studentscholarship = @sysid_studentscholarship

			END	

		END

		FETCH NEXT FROM student_scholarship_update_cursor
		INTO @sysid_studentscholarship, @sysid_scholarship, @sysid_enrolmentlevel,
				@is_marked_deleted, @year_id, @sysid_semester, @is_semestral, @edited_by

	END

	CLOSE student_scholarship_update_cursor
	DEALLOCATE student_scholarship_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Scholarship_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Scholarship_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Scholarship_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Scholarship_Trigger_Instead_Delete
	ON  ums.student_scholarship
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @sysid_scholarship varchar (50)
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @is_marked_deleted bit
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)
	DECLARE @is_semestral bit	
	DECLARE @deleted_by varchar (50)

	DECLARE @year_semester_description varchar (100)

	DECLARE student_scholarship_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.sysid_studentscholarship, d.sysid_scholarship, d.sysid_enrolmentlevel,
				d.is_marked_deleted, sfi.year_id, sel.sysid_semester, cg.is_semestral, d.edited_by
			FROM DELETED AS d
			INNER JOIN ums.scholarship_information AS si ON si.sysid_scholarship = d.sysid_scholarship
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = d.sysid_enrolmentlevel
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	--course group is based on the enrolment level because
																							--the year_id and the sysid_semester is taken from the enrolment level

	OPEN student_scholarship_delete_cursor

	FETCH NEXT FROM student_scholarship_delete_cursor
		INTO @sysid_studentscholarship, @sysid_scholarship, @sysid_enrolmentlevel,
				@is_marked_deleted, @year_id, @sysid_semester, @is_semestral, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF @is_marked_deleted = 0
		BEGIN

			SET @year_semester_description = ''

			IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
			BEGIN
				SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
			END
			ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
			BEGIN
				SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
				FROM 
					ums.semester_information AS si
				INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
				INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
				WHERE 
					si.sysid_semester = @sysid_semester
			END

			UPDATE ums.student_discounts SET edited_by = @deleted_by WHERE sysid_studentscholarship = @sysid_studentscholarship
			DELETE FROM ums.student_discounts WHERE sysid_studentscholarship = @sysid_studentscholarship

			UPDATE ums.student_scholarship SET is_marked_deleted = 1, edited_by = @deleted_by WHERE sysid_studentscholarship = @sysid_studentscholarship

			SET @transaction_done = 'MARK AS DELETED a student scholarship ' + 
									'[Scholarship ID: ' + ISNULL(@sysid_studentscholarship, '') +
									'][Student ID: ' + ISNULL((SELECT 
																		si.student_id
																	FROM 												
																		ums.student_information AS si
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Student Name: ' + ISNULL((SELECT 
																		pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 			
																		ums.person_information AS pri									
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	WHERE 
																		sel.sysid_enrolmentlevel = @sysid_enrolmentlevel), '') +
									'][Scholarship Description: ' + ISNULL((SELECT
																				si.scholarship_description + ' (' + cg.group_description + ')'
																			FROM
																				ums.scholarship_information AS si
																			INNER JOIN ums.course_group AS cg ON cg.course_group_id = si.course_group_id
																			WHERE
																				si.sysid_scholarship = @sysid_scholarship), '') +
									'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +
									']'

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
			END
					
			EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done

			

		END

		FETCH NEXT FROM student_scholarship_delete_cursor
		INTO @sysid_studentscholarship, @sysid_scholarship, @sysid_enrolmentlevel,
				@is_marked_deleted, @year_id, @sysid_semester, @is_semestral, @deleted_by

	END

	CLOSE student_scholarship_delete_cursor
	DEALLOCATE student_scholarship_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectStudentScholarship" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectStudentScholarship')
   DROP PROCEDURE ums.SelectStudentScholarship
GO

CREATE PROCEDURE ums.SelectStudentScholarship

	@query_string varchar (100) = '',
	@date_start datetime,
	@date_end datetime,
	@sysid_scholarship_list nvarchar (MAX) = '',
	@department_id_list nvarchar (MAX) = '',
	@year_level_id_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS	
	

	IF ums.IsActiveSystemUserInfo(@system_user_id) = 1 
	BEGIN

		-- A - query_string '*' OR student_id, card_number, last_name, first_name
		-- B - date_start / date_end
		-- C - sysid_scholarship_list
		-- D - department_id_list
		-- E - year_level_id_list

		--	A	B	C	D	E
		-- ===================
		--	0	0	0	0	0
		--	0	0	0	0	1
		--	0	0	0	1	0
		--	0	0	0	1	1
		--	0	0	1	0	0
		--	0	0	1	0	1
		--	0	0	1	1	0
		--	0	0	1	1	1
		--	0	1	0	0	0
		--	0	1	0	0	1
		--	0	1	0	1	0
		--	0	1	0	1	1
		--	0	1	1	0	0
		--	0	1	1	0	1
		--	0	1	1	1	0
		--	0	1	1	1	1
		--	1	0	0	0	0
		--	1	0	0	0	1
		--	1	0	0	1	0
		--	1	0	0	1	1
		--	1	0	1	0	0
		--	1	0	1	0	1
		--	1	0	1	1	0
		--	1	0	1	1	1
		--	1	1	0	0	0
		--	1	1	0	0	1
		--	1	1	0	1	0
		--	1	1	0	1	1
		--	1	1	1	0	0
		--	1	1	1	0	1
		--	1	1	1	1	0
		--	1	1	1	1	1
		
		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00000)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	
	
			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
		
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00001)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,				
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id		
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person	

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
		
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00010)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00011)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00100)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00101)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00110)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (00111)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01000)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL 
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01001)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01010)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01011)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01100)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN
			
			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01101)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN
			
			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC

		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01110)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (01111)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				((si.student_id LIKE @query_string) OR 
				((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(si.card_number LIKE @query_string) OR 
				((REPLACE(si.card_number, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(sci.scholarship_description LIKE @query_string) OR 
				((REPLACE(sci.scholarship_description, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(di.department_name LIKE @query_string) OR 
				((REPLACE(di.department_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				(pri.last_name LIKE @query_string) OR 
				((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				(pri.first_name LIKE @query_string) OR
				((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
				((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
				((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
				((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', ''))) AND
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10000)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC			

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10001)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC			

		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10010)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10011)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10100)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10101)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10110)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (10111)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11000)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11001)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11010)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11011)
				(ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			
			
			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			
			
			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11100)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11101)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11110)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)			
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END	
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (11111)
				(NOT ISNULL(@sysid_scholarship_list, '') = '') AND (NOT ISNULL(@department_id_list, '') = '') AND
				(NOT ISNULL(@year_level_id_list, '') = '')
		BEGIN

			SELECT		--CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--CURRENT SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 1) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL --
			SELECT		--NOT CURRENT COURSE YEARLY SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no	
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
					INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 0) AND
						((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			UNION ALL
			SELECT		--NOT CURRENT COURSE SEMESTRAL SCHOLARSHIP
				sts.sysid_studentscholarship AS sysid_studentscholarship,
				sts.sysid_scholarship AS sysid_scholarship,
				sts.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				
				si.student_id AS student_id,
				si.card_number AS card_number,
				si.scholarship AS scholarship,
				si.is_international AS is_international,
				si.is_no_downpayment_required AS is_no_downpayment_required,
				pri.sysid_person AS sysid_person,
				pri.last_name AS last_name,
				pri.first_name AS first_name,
				pri.middle_name AS middle_name,
				pri.present_address AS present_address,
				pri.present_phone_nos AS present_phone_nos,
				pri.home_address AS home_address,
				pri.home_phone_nos AS home_phone_nos,

				--pri.life_status_code
				crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
				crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
				crf_life_status_code.reference_code AS life_status_code_reference_code,
				crf_life_status_code.code_description AS life_status_code_code_description,

				--pri.gender_code
				crf_gender_code.code_reference_id AS gender_code_code_reference_id,
				crf_gender_code.code_entity_id AS gender_code_code_entity_id,
				crf_gender_code.reference_code AS gender_code_reference_code,
				crf_gender_code.code_description AS gender_code_code_description,

				emer_pri.last_name AS emer_last_name,
				emer_pri.first_name AS emer_first_name,
				emer_pri.middle_name AS emer_middle_name,
				emer_pri.present_address AS emer_present_address,
				emer_pri.present_phone_nos AS emer_present_phone_nos,
				emer_pri.home_address AS emer_home_address,
				emer_pri.home_phone_nos AS emer_home_phone_nos,
				emer_pri.relationship_description AS emer_relationship_description,

				sci.scholarship_description AS scholarship_description,
				sci.is_non_academic AS is_non_academic,
				sec.sysid_student AS sysid_student,
				di.department_name AS department_name,
				di.acronym AS department_acronym,
				ci.course_title AS course_title,
				ci.acronym AS course_acronym,
				yli.year_level_description AS year_level_description,
				sy.year_description AS year_description,
				sy.year_id AS year_id,
				sri.sysid_semester AS sysid_semester,
				ss.semester_description AS semester_description,				
				cg.is_semestral AS is_semestral
			FROM
				ums.student_scholarship AS sts
			INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship			
			INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssp_list ON ssp_list.var_str = sci.sysid_scholarship
			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
			INNER JOIN ums.IterateListToTable (@department_id_list, ',') AS dil_list ON dil_list.var_str = di.department_id
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sts.sysid_enrolmentlevel
			INNER JOIN 
				( 
					SELECT
						sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
						MAX(sel.enrolment_level_no)	AS enrolment_level_no
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
					INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
					WHERE
						(sel.is_marked_deleted = 0) AND
						(sec.is_current_course = 0) AND
						(cg.is_semestral = 1) AND
						(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
						((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
					GROUP BY
						sel.sysid_enrolmentcourse
				) AS sel_max ON sel_max.enrolment_level_no = sel.enrolment_level_no
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.IterateListToTable (@year_level_id_list, ',') AS yli_list ON yli_list.var_str = yli.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
			LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
			LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

			INNER JOIN ums.student_information AS si ON si.sysid_student = sec.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			
			LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
			LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code

			LEFT JOIN
				(
					SELECT
						ppi.sysid_person AS sysid_person,
						pri_ppi.last_name AS last_name,
						pri_ppi.first_name AS first_name,
						pri_ppi.middle_name AS middle_name,
						pri_ppi.present_address AS present_address,
						pri_ppi.present_phone_nos AS present_phone_nos,
						pri_ppi.home_address AS home_address,
						pri_ppi.home_phone_nos AS home_phone_nos,
						rpt.relationship_description AS relationship_description
					FROM
						ums.person_relationship_information AS ppi
					INNER JOIN ums.person_information AS pri_ppi ON pri_ppi.sysid_person = ppi.in_relationship_with_sysid_person
					INNER JOIN ums.relationship_type AS rpt ON rpt.relationship_type_id = ppi.relationship_type_id
					WHERE
						(ppi.is_emergency_contact = 1)			
					
				) AS emer_pri ON emer_pri.sysid_person = pri.sysid_person			

			WHERE
				(sts.is_marked_deleted = 0) AND
				(sel.is_marked_deleted = 0)
			ORDER BY
				last_name, first_name, middle_name, student_id, scholarship_description, department_name ASC
			
		END	
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student scholarship', 'Student Scholarship'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectStudentScholarship TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "student_scholarship" OBJECTS######################################################





-- ################################################TABLE "student_discounts" OBJECTS######################################################

--verifies that the trigger "Student_Discounts_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Discounts_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Discounts_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Discounts_Trigger_Insert
	ON  ums.student_discounts
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @discount_id bigint
	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @discount_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @created_by varchar (50)

	DECLARE @downpayment varchar (50)
	
	SELECT 
		@discount_id = i.discount_id,
		@sysid_studentscholarship = i.sysid_studentscholarship,
		@discount_date = i.discount_date,
		@remarks = i.remarks,
		@amount = i.amount,
		@is_downpayment = i.is_downpayment,
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_downpayment = 1)
	BEGIN
		SET @downpayment = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment = 'NO'
	END

	SET @transaction_done = 'CREATED a new student discount ' + 
							'[Discount ID: ' + ISNULL(CONVERT(varchar, @discount_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
															WHERE 
																sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
															WHERE 
																sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
							'][Discount Description: ' + ISNULL((SELECT 
																		sci.scholarship_description + ' (' + di.department_name + ')'
																	FROM
																		ums.scholarship_information AS sci
																	INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
																	INNER JOIN ums.student_scholarship AS sts ON sts.sysid_scholarship = sci.sysid_scholarship
																	WHERE 
																		sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
							'][Discount Date: ' + ISNULL(CONVERT(varchar, @discount_date, 101), '') +
							'][Remarks: ' + ISNULL(@remarks, '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Discounts_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Discounts_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Discounts_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Discounts_Trigger_Instead_Update
	ON  ums.student_discounts
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @discount_id bigint
	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @discount_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @edited_by varchar (50)

	DECLARE @discount_date_b datetime
	DECLARE @remarks_b varchar (100)
	DECLARE @amount_b decimal (12, 2)
	DECLARE @is_downpayment_b bit
	
	DECLARE @downpayment varchar (50)
	DECLARE @downpayment_b varchar (50)

	DECLARE @has_update bit

	DECLARE student_discounts_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.discount_id, i.sysid_studentscholarship, i.discount_date, i.remarks, i.amount, i.is_downpayment, i.edited_by
				FROM INSERTED AS i

	OPEN student_discounts_update_cursor

	FETCH NEXT FROM student_discounts_update_cursor
		INTO @discount_id, @sysid_studentscholarship, @discount_date, @remarks, @amount, @is_downpayment, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@discount_date_b = sd.discount_date,
			@remarks_b = sd.remarks,
			@amount_b = sd.amount,
			@is_downpayment_b = sd.is_downpayment
		FROM
			ums.student_discounts AS sd
		WHERE
			sd.discount_id = @discount_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF NOT ISNULL(CONVERT(varchar, @discount_date, 101), '') = ISNULL(CONVERT(varchar, @discount_date_b, 101), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Discount Date Before: ' + ISNULL(CONVERT(varchar, @discount_date_b, 101), '') + ']' +
														'[Discount Date After: ' + ISNULL(CONVERT(varchar, @discount_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') + ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
			SET @has_update = 1
		END		

		IF NOT @is_downpayment = @is_downpayment_b
		BEGIN

			IF (@is_downpayment = 1)
			BEGIN
				SET @downpayment = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment = 'NO'
			END

			IF (@is_downpayment_b = 1)
			BEGIN
				SET @downpayment_b = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Downpayment Before: ' + ISNULL(@downpayment_b, '') + ']' +
														'[Is Downpayment After: ' + ISNULL(@downpayment, '') + ']'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_discounts SET
				discount_date = @discount_date,
				remarks = @remarks,
				amount = @amount,
				is_downpayment = @is_downpayment,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				discount_id = @discount_id

			SET @transaction_done = 'UPDATED a student discount ' + 
									'[Discount ID: ' + ISNULL(CONVERT(varchar, @discount_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																	FROM 
																		ums.student_information AS si
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
																	WHERE 
																		sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																	INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
																	WHERE 
																		sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
									'][Discount Description: ' + ISNULL((SELECT 
																				sci.scholarship_description + ' (' + di.department_name + ')'
																			FROM
																				ums.scholarship_information AS sci
																			INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
																			INNER JOIN ums.student_scholarship AS sts ON sts.sysid_scholarship = sci.sysid_scholarship
																			WHERE 
																				sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.student_discounts SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				discount_id = @discount_id

		END	

		FETCH NEXT FROM student_discounts_update_cursor
			INTO @discount_id, @sysid_studentscholarship, @discount_date, @remarks, @amount, @is_downpayment, @edited_by

	END

	CLOSE student_discounts_update_cursor
	DEALLOCATE student_discounts_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Discounts_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Discounts_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Discounts_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Discounts_Trigger_Instead_Delete
	ON  ums.student_discounts
	INSTEAD OF DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @discount_id bigint
	DECLARE @sysid_studentscholarship varchar (50)
	DECLARE @discount_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @deleted_by varchar (50)

	DECLARE @downpayment varchar (50)

	DECLARE student_discounts_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.discount_id, d.sysid_studentscholarship, d.discount_date, d.remarks, d.amount, d.is_downpayment, d.edited_by
				FROM DELETED AS d

	OPEN student_discounts_delete_cursor

	FETCH NEXT FROM student_discounts_delete_cursor
		INTO @discount_id, @sysid_studentscholarship, @discount_date, @remarks, @amount, @is_downpayment, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		DELETE FROM ums.student_discounts WHERE discount_id = @discount_id

		IF (@is_downpayment = 1)
		BEGIN
			SET @downpayment = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment = 'NO'
		END

		SET @transaction_done = 'DELETED a student discount ' + 
								'[Discount ID: ' + ISNULL(CONVERT(varchar, @discount_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id 
																FROM 
																	ums.student_information AS si
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
																WHERE 
																	sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
																WHERE 
																	sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
								'][Discount Description: ' + ISNULL((SELECT 
																			sci.scholarship_description + ' (' + di.department_name + ')'
																		FROM
																			ums.scholarship_information AS sci
																		INNER JOIN ums.department_information AS di ON di.department_id = sci.department_id
																		INNER JOIN ums.student_scholarship AS sts ON sts.sysid_scholarship = sci.sysid_scholarship
																		WHERE 
																			sts.sysid_studentscholarship = @sysid_studentscholarship), '') +
								'][Discount Date: ' + ISNULL(CONVERT(varchar, @discount_date, 101), '') +
								'][Remarks: ' + ISNULL(@remarks, '') +
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
								']'


		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		FETCH NEXT FROM student_discounts_delete_cursor
			INTO @discount_id, @sysid_studentscholarship, @discount_date, @remarks, @amount, @is_downpayment, @deleted_by

	END

	CLOSE student_discounts_delete_cursor
	DEALLOCATE student_discounts_delete_cursor

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectByDateStartEndCourseScholarshipListStudentDiscounts" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndCourseScholarshipListStudentDiscounts')
   DROP PROCEDURE ums.SelectByDateStartEndCourseScholarshipListStudentDiscounts
GO

CREATE PROCEDURE ums.SelectByDateStartEndCourseScholarshipListStudentDiscounts

	@date_start datetime,
	@date_end datetime,
	@course_id_list nvarchar (MAX) = '',
	@sysid_scholarship_list nvarchar (MAX) = '',

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		SELECT		--YEARLY WITH CURRENT COURSE
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,

			sts.sysid_studentscholarship AS sysid_studentscholarship,
			sts.sysid_scholarship AS sysid_scholarship,
			sci.scholarship_description AS scholarship_description,
			sci.is_non_academic AS is_non_academic,
			std.discount_id AS discount_id,
			std.discount_date AS reflected_date,
			std.created_on AS received_date,
			std.remarks AS remarks,
			std.amount AS amount,
			std.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 0) AND
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
		INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssl_list ON ssl_list.var_str = sci.sysid_scholarship
		INNER JOIN ums.student_discounts AS std ON std.sysid_studentscholarship = sts.sysid_studentscholarship
		WHERE
			(sts.is_marked_deleted = 0)
		UNION ALL
		SELECT		--SEMESTRAL WITH CURRENT COURSE
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,

			sts.sysid_studentscholarship AS sysid_studentscholarship,
			sts.sysid_scholarship AS sysid_scholarship,
			sci.scholarship_description AS scholarship_description,
			sci.is_non_academic AS is_non_academic,
			std.discount_id AS discount_id,
			std.discount_date AS reflected_date,
			std.created_on AS received_date,
			std.remarks AS remarks,
			std.amount AS amount,
			std.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
		INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssl_list ON ssl_list.var_str = sci.sysid_scholarship
		INNER JOIN ums.student_discounts AS std ON std.sysid_studentscholarship = sts.sysid_studentscholarship
		WHERE
			(sts.is_marked_deleted = 0)
		UNION ALL
		SELECT		--YEARLY NOT CURRENT COURSE
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,

			sts.sysid_studentscholarship AS sysid_studentscholarship,
			sts.sysid_scholarship AS sysid_scholarship,
			sci.scholarship_description AS scholarship_description,
			sci.is_non_academic AS is_non_academic,
			std.discount_id AS discount_id,
			std.discount_date AS reflected_date,
			std.created_on AS received_date,
			std.remarks AS remarks,
			std.amount AS amount,
			std.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id	
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 0) AND
					((sy.date_start BETWEEN @date_start AND @date_end) AND (sy.date_end BETWEEN @date_start AND @date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
		INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssl_list ON ssl_list.var_str = sci.sysid_scholarship
		INNER JOIN ums.student_discounts AS std ON std.sysid_studentscholarship = sts.sysid_studentscholarship
		WHERE
			(sts.is_marked_deleted = 0)
		UNION ALL
		SELECT		--SEMESTRAL NOT CURRENT COURSE
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,

			sts.sysid_studentscholarship AS sysid_studentscholarship,
			sts.sysid_scholarship AS sysid_scholarship,
			sci.scholarship_description AS scholarship_description,
			sci.is_non_academic AS is_non_academic,
			std.discount_id AS discount_id,
			std.discount_date AS reflected_date,
			std.created_on AS received_date,
			std.remarks AS remarks,
			std.amount AS amount,
			std.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.IterateListToTable (@course_id_list, ',') AS cil_list ON cil_list.var_str = sec.course_id

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					((@date_start BETWEEN sri.date_start AND sri.date_end) AND (@date_end BETWEEN sri.date_start AND sri.date_end))
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN ums.student_scholarship AS sts ON sts.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		INNER JOIN ums.scholarship_information AS sci ON sci.sysid_scholarship = sts.sysid_scholarship
		INNER JOIN ums.IterateListToTable (@sysid_scholarship_list, ',') AS ssl_list ON ssl_list.var_str = sci.sysid_scholarship
		INNER JOIN ums.student_discounts AS std ON std.sysid_studentscholarship = sts.sysid_studentscholarship
		WHERE
			(sts.is_marked_deleted = 0)
		ORDER BY
			course_title, scholarship_description, last_name, first_name, middle_name, student_id  ASC
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student discounts', 'Student Discounts'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndCourseScholarshipListStudentDiscounts TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "student_discounts" OBJECTS######################################################



-- ################################################TABLE "student_reimbursements" OBJECTS######################################################

--verifies that the trigger "Student_Reimbursements_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Reimbursements_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Reimbursements_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Reimbursements_Trigger_Insert
	ON  ums.student_reimbursements
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @reimbursement_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @reimbursement_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @created_by varchar (50)

	DECLARE @downpayment varchar (50)
	
	SELECT 
		@reimbursement_id = i.reimbursement_id,
		@sysid_student = i.sysid_student,
		@reimbursement_date = i.reimbursement_date,
		@remarks = i.remarks,
		@amount = i.amount,
		@is_downpayment = i.is_downpayment,
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_downpayment = 1)
	BEGIN
		SET @downpayment = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment = 'NO'
	END

	SET @transaction_done = 'CREATED a new student reimbursement ' + 
							'[Reimbursement ID: ' + ISNULL(CONVERT(varchar, @reimbursement_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Reimbursement Date: ' + ISNULL(CONVERT(varchar, @reimbursement_date, 101), '') +
							'][Remarks: ' + ISNULL(@remarks, '') + 
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Reimbursements_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Reimbursements_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Reimbursements_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Reimbursements_Trigger_Instead_Update
	ON  ums.student_reimbursements
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @reimbursement_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @reimbursement_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @edited_by varchar (50)

	DECLARE @reimbursement_date_b datetime
	DECLARE @remarks_b varchar (100)
	DECLARE @amount_b decimal (12, 2)
	DECLARE @is_downpayment_b bit

	DECLARE @downpayment varchar (50)
	DECLARE @downpayment_b varchar (50)
	DECLARE @has_update bit

	DECLARE student_reimbursements_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.reimbursement_id, i.sysid_student, i.reimbursement_date, i.remarks, i.amount, i.is_downpayment, i.edited_by
				FROM INSERTED AS i

	OPEN student_reimbursements_update_cursor

	FETCH NEXT FROM student_reimbursements_update_cursor
		INTO @reimbursement_id, @sysid_student, @reimbursement_date, @remarks, @amount, @is_downpayment, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@reimbursement_date_b = srb.reimbursement_date,
			@remarks_b = srb.remarks,
			@amount_b = srb.amount,
			@is_downpayment_b = srb.is_downpayment
		FROM
			ums.student_reimbursements AS srb
		WHERE
			srb.reimbursement_id = @reimbursement_id

		SET @transaction_done = ''
		SET @has_update = 0
		
		IF NOT ISNULL(CONVERT(varchar, @reimbursement_date, 101), '') = ISNULL(CONVERT(varchar, @reimbursement_date_b, 101), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Reimbursement Date Before: ' + ISNULL(CONVERT(varchar, @reimbursement_date_b, 101), '') + ']' +
														'[Reimbursement Date After: ' + ISNULL(CONVERT(varchar, @reimbursement_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Reimbursement Date: ' + ISNULL(CONVERT(varchar, @reimbursement_date, 101), '') + ']'
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') + ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF NOT @is_downpayment = @is_downpayment_b
		BEGIN

			IF (@is_downpayment = 1)
			BEGIN
				SET @downpayment = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment = 'NO'
			END

			IF (@is_downpayment_b = 1)
			BEGIN
				SET @downpayment_b = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Downpayment Before: ' + ISNULL(@downpayment_b, '') + ']' +
														'[Is Downpayment After: ' + ISNULL(@downpayment, '') + ']'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_reimbursements SET
				reimbursement_date = @reimbursement_date,
				remarks = @remarks,
				amount = @amount,
				is_downpayment = @is_downpayment,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				reimbursement_id = @reimbursement_id

			SET @transaction_done = 'UPDATED a student reimbursement ' + 
									'[Reimbursement ID: ' + ISNULL(CONVERT(varchar, @reimbursement_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.student_reimbursements SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				reimbursement_id = @reimbursement_id

		END	

		FETCH NEXT FROM student_reimbursements_update_cursor
			INTO @reimbursement_id, @sysid_student, @reimbursement_date, @remarks, @amount, @is_downpayment, @edited_by

	END

	CLOSE student_reimbursements_update_cursor
	DEALLOCATE student_reimbursements_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Reimbursements_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Reimbursements_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Reimbursements_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Reimbursements_Trigger_Instead_Delete
	ON  ums.student_reimbursements
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @reimbursement_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @reimbursement_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @deleted_by varchar (50)

	DECLARE @downpayment varchar (50)

	DECLARE student_reimbursements_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.reimbursement_id, d.sysid_student, d.reimbursement_date, d.remarks,
				d.amount, d.is_downpayment, d.edited_by
			FROM 
				DELETED AS d

	OPEN student_reimbursements_delete_cursor

	FETCH NEXT FROM student_reimbursements_delete_cursor
		INTO @reimbursement_id, @sysid_student, @reimbursement_date, @remarks,
				@amount, @is_downpayment, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_downpayment = 1)
		BEGIN
			SET @downpayment = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment = 'NO'
		END

		SET @transaction_done = 'DELETED a student reimbursement ' + 
								'[Reimbursement ID: ' + ISNULL(CONVERT(varchar, @reimbursement_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Reimbursement Date: ' + ISNULL(CONVERT(varchar, @reimbursement_date, 101), '') +
								'][Remarks: ' + ISNULL(@remarks, '') + 
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done

		FETCH NEXT FROM student_reimbursements_delete_cursor
			INTO @reimbursement_id, @sysid_student, @reimbursement_date, @remarks,
					@amount, @is_downpayment, @deleted_by

	END

	CLOSE student_reimbursements_delete_cursor
	DEALLOCATE student_reimbursements_delete_cursor

GO
-----------------------------------------------------------------

-- ##############################################END TABLE "student_reimbursements" OBJECTS######################################################






-- ################################################TABLE "student_credit_memo" OBJECTS######################################################

--verifies that the trigger "Student_Credit_Memo_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Credit_Memo_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Credit_Memo_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Credit_Memo_Trigger_Insert
	ON  ums.student_credit_memo
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @memo_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @memo_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @created_by varchar (50)

	DECLARE @downpayment varchar (50)
	
	SELECT 
		@memo_id = i.memo_id,
		@sysid_student = i.sysid_student,
		@memo_date = i.memo_date,
		@remarks = i.remarks,
		@amount = i.amount,
		@is_downpayment = i.is_downpayment,
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_downpayment = 1)
	BEGIN
		SET @downpayment = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment = 'NO'
	END

	SET @transaction_done = 'CREATED a new student credit memo ' + 
							'[Memo ID: ' + ISNULL(CONVERT(varchar, @memo_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Memo Date: ' + ISNULL(CONVERT(varchar, @memo_date, 101), '') +
							'][Remarks: ' + ISNULL(@remarks, '') + 
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Credit_Memo_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Credit_Memo_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Credit_Memo_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Credit_Memo_Trigger_Instead_Update
	ON  ums.student_credit_memo
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @memo_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @memo_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @edited_by varchar (50)

	DECLARE @memo_date_b datetime
	DECLARE @remarks_b varchar (100)
	DECLARE @amount_b decimal (12, 2)
	DECLARE @is_downpayment_b bit

	DECLARE @downpayment varchar (50)
	DECLARE @downpayment_b varchar (50)

	DECLARE @has_update bit

	DECLARE student_credit_memo_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.memo_id, i.sysid_student, i.memo_date, i.remarks, i.amount, i.is_downpayment, i.edited_by
				FROM INSERTED AS i

	OPEN student_credit_memo_update_cursor

	FETCH NEXT FROM student_credit_memo_update_cursor
		INTO @memo_id, @sysid_student, @memo_date, @remarks, @amount, @is_downpayment, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@memo_date_b = scm.memo_date,
			@remarks_b = scm.remarks,
			@amount_b = scm.amount,
			@is_downpayment_b = scm.is_downpayment
		FROM
			ums.student_credit_memo AS scm
		WHERE
			scm.memo_id = @memo_id

		SET @transaction_done = ''
		SET @has_update = 0
		
		IF NOT ISNULL(CONVERT(varchar, @memo_date, 101), '') = ISNULL(CONVERT(varchar, @memo_date_b, 101), '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Memo Date Before: ' + ISNULL(CONVERT(varchar, @memo_date_b, 101), '') + ']' +
														'[Memo Date After: ' + ISNULL(CONVERT(varchar, @memo_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Memo Date: ' + ISNULL(CONVERT(varchar, @memo_date, 101), '') + ']'
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') + ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') + ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') + ']'
			SET @has_update = 1
		END

		IF NOT @is_downpayment = @is_downpayment_b
		BEGIN

			IF (@is_downpayment = 1)
			BEGIN
				SET @downpayment = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment = 'NO'
			END

			IF (@is_downpayment_b = 1)
			BEGIN
				SET @downpayment_b = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Downpayment Before: ' + ISNULL(@downpayment_b, '') + ']' +
														'[Is Downpayment After: ' + ISNULL(@downpayment, '') + ']'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_credit_memo SET
				memo_date = @memo_date,
				remarks = @remarks,
				amount = @amount,
				is_downpayment = @is_downpayment,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				memo_id = @memo_id

			SET @transaction_done = 'UPDATED a student credit memo ' + 
									'[Memo ID: ' + ISNULL(CONVERT(varchar, @memo_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.student_credit_memo SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				memo_id = @memo_id

		END	

		FETCH NEXT FROM student_credit_memo_update_cursor
			INTO @memo_id, @sysid_student, @memo_date, @remarks, @amount, @is_downpayment, @edited_by

	END

	CLOSE student_credit_memo_update_cursor
	DEALLOCATE student_credit_memo_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Credit_Memo_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Student_Credit_Memo_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Credit_Memo_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Student_Credit_Memo_Trigger_Instead_Delete
	ON  ums.student_credit_memo
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @memo_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @memo_date datetime
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @is_downpayment bit
	DECLARE @deleted_by varchar (50)

	DECLARE @downpayment varchar (50)

	DECLARE student_credit_memo_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.memo_id, d.sysid_student, d.memo_date, d.remarks, d.amount, d.is_downpayment, d.edited_by
				FROM 
					DELETED AS d

	OPEN student_credit_memo_delete_cursor

	FETCH NEXT FROM student_credit_memo_delete_cursor
		INTO @memo_id, @sysid_student, @memo_date, @remarks, @amount, @is_downpayment, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_downpayment = 1)
		BEGIN
			SET @downpayment = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment = 'NO'
		END

		SET @transaction_done = 'DELETED a student credit memo ' + 
								'[Memo ID: ' + ISNULL(CONVERT(varchar, @memo_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Memo Date: ' + ISNULL(CONVERT(varchar, @memo_date, 101), '') +
								'][Remarks: ' + ISNULL(@remarks, '') + 
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done			

		FETCH NEXT FROM student_credit_memo_delete_cursor
			INTO @memo_id, @sysid_student, @memo_date, @remarks, @amount, @is_downpayment, @deleted_by

	END

	CLOSE student_credit_memo_delete_cursor
	DEALLOCATE student_credit_memo_delete_cursor	

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectByDateStartEndStudentCreditMemo" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndStudentCreditMemo')
   DROP PROCEDURE ums.SelectByDateStartEndStudentCreditMemo
GO

CREATE PROCEDURE ums.SelectByDateStartEndStudentCreditMemo

	@date_start datetime,
	@date_end datetime,
	@is_consolidated bit = 0,

	@system_user_id varchar (50) = ''
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1)
	BEGIN

		DECLARE @student_credit_memo TABLE (memo_id bigint NOT NULL PRIMARY KEY,
											sysid_student varchar (50) NOT NULL,
											reflected_date datetime NOT NULL,
											received_date datetime NOT NULL,
											remarks varchar (100) NULL,
											amount decimal (12, 2) NOT NULL,
											is_downpayment bit NOT NULL DEFAULT (0))

		IF (@is_consolidated = 1)
		BEGIN

			INSERT INTO @student_credit_memo(memo_id, sysid_student, reflected_date, received_date, remarks, amount, is_downpayment)
				SELECT
					scm.memo_id AS memo_id,
					scm.sysid_student AS sysid_student,
					scm.memo_date AS reflected_date,
					scm.created_on AS received_date,
					scm.remarks AS remarks,
					scm.amount AS amount,
					scm.is_downpayment AS is_downpayment	
				FROM
					ums.student_credit_memo AS scm
				WHERE
					(scm.memo_date BETWEEN @date_start AND @date_end)			--credit memo based on reflected date
				ORDER BY 
					scm.memo_date

		END
		ELSE
		BEGIN

			INSERT INTO @student_credit_memo(memo_id, sysid_student, reflected_date, received_date, remarks, amount, is_downpayment)
				SELECT
					scm.memo_id AS memo_id,
					scm.sysid_student AS sysid_student,
					scm.memo_date AS reflected_date,
					scm.created_on AS received_date,
					scm.remarks AS remarks,
					scm.amount AS amount,
					scm.is_downpayment AS is_downpayment	
				FROM
					ums.student_credit_memo AS scm
				WHERE
					(scm.memo_date BETWEEN @date_start AND @date_end) AND		--credit memo based on reflected date
					(((scm.edited_by IS NULL) AND (scm.created_by = @system_user_id)) OR
					(scm.edited_by = @system_user_id))
				ORDER BY 
					scm.memo_date

		END		

		SELECT		--YEARLY WITH CURRENT COURSE AND YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id					
				INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = sec.sysid_student
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 0) AND
					(scm.reflected_date BETWEEN sy.date_start AND sy.date_end)
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		UNION ALL
		SELECT		--SEMESTRAL WITH CURRENT COURSE AND YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = sec.sysid_student
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 1) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(scm.reflected_date BETWEEN sri.date_start AND sri.date_end)
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		UNION ALL
		SELECT		--YEARLY NOT CURRENT COURSE AND YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no	
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse	
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
				INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id					
				INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = sec.sysid_student
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 0) AND
					(scm.reflected_date BETWEEN sy.date_start AND sy.date_end)
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		UNION ALL
		SELECT		--SEMESTRAL NOT CURRENT COURSE AND YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
			sel.sysid_feelevel AS sysid_feelevel,
			sel.sysid_semester AS sysid_semester,
			sel.is_graduate_student AS is_graduate_student,
			sel.level_section AS level_section,
			cmi.course_major_title AS course_major_title,
			cmi.acronym AS course_major_title_acronym,
			yli.year_level_description AS year_level_description,
			yli.acronym AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			sy.year_description AS year_description,
			ss.semester_description AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student

		INNER JOIN 
			( 
				SELECT
					sel.sysid_enrolmentcourse AS sysid_enrolmentcourse,
					MAX(sel.enrolment_level_no)	AS enrolment_level_no
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse		
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id				
				INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
				INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = sec.sysid_student
				WHERE
					(sel.is_marked_deleted = 0) AND
					(sec.is_current_course = 0) AND
					(cg.is_semestral = 1) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(scm.reflected_date BETWEEN sri.date_start AND sri.date_end)
				GROUP BY
					sel.sysid_enrolmentcourse
			) AS sel_max ON sel_max.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN ums.student_enrolment_level AS sel ON sel.enrolment_level_no = sel_max.enrolment_level_no
		LEFT JOIN ums.enrolment_course_major AS ecm ON ecm.sysid_enrolmentlevel = sel.sysid_enrolmentlevel
		LEFT JOIN ums.course_major_information AS cmi ON cmi.major_information_id = ecm.major_information_id
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
		LEFT JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		LEFT JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		LEFT JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		LEFT JOIN ums.school_semester AS ss ON ss.semester_id = sri.semester_id

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		UNION ALL
		SELECT		--WITH CURRENT COURSE BUT WITHOUT YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			sec.course_id AS course_id,
			sec.is_current_course AS is_current_course,
			NULL AS sysid_enrolmentlevel,
			NULL AS sysid_feelevel,
			NULL AS sysid_semester,
			NULL AS is_graduate_student,
			NULL AS level_section,
			NULL AS course_major_title,
			NULL AS course_major_title_acronym,
			NULL AS year_level_description,
			NULL AS year_level_acronym,
			ci.department_id AS department_id,
			ci.course_title AS course_title,
			ci.acronym AS course_acronym,
			di.department_name AS department_name,
			di.acronym AS department_acronym,
			cg.course_group_id AS course_group_id,
			cg.group_description AS group_description,
			NULL AS year_description,
			NULL AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.department_information AS di ON di.department_id = ci.department_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		WHERE
			(sec.is_current_course = 1) AND
			(NOT EXISTS (SELECT 
								t_sel.sysid_enrolmentlevel 
							FROM 
								ums.student_enrolment_level AS t_sel 
							WHERE 
								(t_sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse) AND
								(t_sel.is_marked_deleted = 0)))
		UNION ALL
		SELECT		--WITHOUT COURSE AND WITHOUT YEAR LEVEL
			si.sysid_student AS sysid_student,
			si.student_id AS student_id,
			si.card_number AS card_number,
			si.scholarship AS scholarship,
			si.is_international AS is_international,
			si.is_no_downpayment_required AS is_no_downpayment_required,
			pri.sysid_person AS sysid_person,
			pri.last_name AS last_name,
			pri.first_name AS first_name,
			pri.middle_name AS middle_name,
			pri.present_address AS present_address,
			pri.present_phone_nos AS present_phone_nos,
			pri.home_address AS home_address,
			pri.home_phone_nos AS home_phone_nos,

			--pri.life_status_code
			crf_life_status_code.code_reference_id AS life_status_code_code_reference_id,
			crf_life_status_code.code_entity_id AS life_status_code_code_entity_id,
			crf_life_status_code.reference_code AS life_status_code_reference_code,
			crf_life_status_code.code_description AS life_status_code_code_description,

			--pri.gender_code
			crf_gender_code.code_reference_id AS gender_code_code_reference_id,
			crf_gender_code.code_entity_id AS gender_code_code_entity_id,
			crf_gender_code.reference_code AS gender_code_reference_code,
			crf_gender_code.code_description AS gender_code_code_description,
			crf_gender_code.reference_flag AS gender_code_reference_flag,

			NULL AS course_id,
			'false' AS is_current_course,
			NULL AS sysid_enrolmentlevel,
			NULL AS sysid_feelevel,
			NULL AS sysid_semester,
			'false' AS is_graduate_student,
			NULL AS level_section,
			NULL AS course_major_title,
			NULL AS course_major_title_acronym,
			NULL AS year_level_description,
			NULL AS year_level_acronym,
			NULL AS department_id,
			NULL AS course_title,
			NULL AS course_acronym,
			NULL AS department_name,
			NULL AS department_acronym,
			NULL AS course_group_id,
			NULL AS group_description,
			NULL AS year_description,
			NULL AS semester_description,
	
			scm.memo_id AS memo_id,
			scm.reflected_date AS reflected_date,
			scm.received_date AS received_date,
			scm.remarks AS remarks,
			scm.amount AS amount,
			scm.is_downpayment AS is_downpayment
		FROM
			ums.student_information AS si
		INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
		LEFT JOIN ums.code_reference AS crf_life_status_code ON crf_life_status_code.code_reference_id = pri.life_status_code
		LEFT JOIN ums.code_reference AS crf_gender_code ON crf_gender_code.code_reference_id = pri.gender_code
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse

		INNER JOIN @student_credit_memo AS scm ON scm.sysid_student = si.sysid_student
		WHERE
			(sec.course_id IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL)
		ORDER BY
			last_name, first_name, middle_name, student_id  ASC
				
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a student discounts', 'Student Discounts'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndStudentCreditMemo TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "student_credit_memo" OBJECTS######################################################





-- ################################################TABLE "student_promissory_note" OBJECTS######################################################

--verifies that the trigger "Student_Promissory_Note_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Promissory_Note_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Promissory_Note_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Promissory_Note_Trigger_Insert
	ON  ums.student_promissory_note
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @promissory_note_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @note_received_date datetime
	DECLARE @reference_no varchar (50)
	DECLARE @promissory_note varchar (MAX)
	DECLARE @is_downpayment bit
	DECLARE @created_by varchar (50)

	DECLARE @downpayment varchar (50)
	
	SELECT 
		@promissory_note_id = i.promissory_note_id,
		@sysid_student = i.sysid_student,
		@note_received_date = i.note_received_date,
		@reference_no = i.reference_no,
		@promissory_note = i.promissory_note,
		@is_downpayment = i.is_downpayment,
		@created_by = i.created_by
	FROM INSERTED AS i

	IF (@is_downpayment = 1)
	BEGIN
		SET @downpayment = 'YES'
	END
	ELSE
	BEGIN
		SET @downpayment = 'NO'
	END

	SET @transaction_done = 'CREATED a new student promissory note ' + 
							'[Promissory Note ID: ' + ISNULL(CONVERT(varchar, @promissory_note_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Note Received Date: ' + ISNULL(CONVERT(varchar, @note_received_date, 101), '') +
							'][Reference No.: ' + ISNULL(@reference_no, '') +
							'][Promissory Note: ' + ISNULL(@promissory_note, '') + 
							'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

-- verifies that the trigger "Student_Promissory_Note_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Promissory_Note_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Promissory_Note_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Promissory_Note_Trigger_Instead_Update
	ON  ums.student_promissory_note
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @promissory_note_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @note_received_date datetime
	DECLARE @reference_no varchar (50)
	DECLARE @promissory_note varchar (MAX)
	DECLARE @is_downpayment bit
	DECLARE @edited_by varchar (50)
	
	DECLARE @note_received_date_b datetime
	DECLARE @reference_no_b varchar (50)
	DECLARE @promissory_note_b varchar (MAX)
	DECLARE @is_downpayment_b bit
	
	DECLARE @downpayment varchar (50)
	DECLARE @downpayment_b varchar (50)

	DECLARE @has_update bit

	DECLARE student_promissory_note_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.promissory_note_id, i.sysid_student, i.note_received_date, i.reference_no,
				i.promissory_note, i.is_downpayment, i.edited_by
			FROM INSERTED AS i

	OPEN student_promissory_note_update_cursor

	FETCH NEXT FROM student_promissory_note_update_cursor
		INTO @promissory_note_id, @sysid_student, @note_received_date, @reference_no,
				@promissory_note, @is_downpayment, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@note_received_date_b = spn.note_received_date,
			@reference_no_b = spn.reference_no,
			@promissory_note_b = spn.promissory_note,
			@is_downpayment_b = spn.is_downpayment
		FROM
			ums.student_promissory_note AS spn
		WHERE
			spn.promissory_note_id = @promissory_note_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(CONVERT(varchar, @note_received_date, 101), '') = ISNULL(CONVERT(varchar, @note_received_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Note Received Date Before: ' + ISNULL(CONVERT(varchar, @note_received_date_b, 101), '') + ']' +
														'[Note Received Date After: ' + ISNULL(CONVERT(varchar, @note_received_date, 101), '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(@reference_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@reference_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Reference No. Before: ' + ISNULL(@reference_no_b, '') + ']' +
														'[Reference No. After: ' + ISNULL(@reference_no, '') + ']'
			SET @has_update = 1
		END

		IF NOT ISNULL(@promissory_note COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@promissory_note_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Promissory Note Before: ' + ISNULL(@promissory_note_b, '') + ']' +
														'[Promissory Note After: ' + ISNULL(@promissory_note, '') + ']'
			SET @has_update = 1
		END

		IF NOT @is_downpayment = @is_downpayment_b
		BEGIN

			IF (@is_downpayment = 1)
			BEGIN
				SET @downpayment = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment = 'NO'
			END

			IF (@is_downpayment_b = 1)
			BEGIN
				SET @downpayment_b = 'YES'
			END
			ELSE
			BEGIN
				SET @downpayment_b = 'NO'
			END

			SET @transaction_done = @transaction_done + '[Is Downpayment Before: ' + ISNULL(@downpayment_b, '') + ']' +
														'[Is Downpayment After: ' + ISNULL(@downpayment, '') + ']'
			SET @has_update = 1
		END

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_promissory_note SET
				note_received_date = @note_received_date,
				reference_no = @reference_no,
				promissory_note = @promissory_note,
				is_downpayment = @is_downpayment,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				promissory_note_id = @promissory_note_id

			SET @transaction_done = 'UPDATED a student promissory note ' + 
									'[Promissory Note ID: ' + ISNULL(CONVERT(varchar, @promissory_note_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																	FROM 
																		ums.student_information AS si
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		si.sysid_student = @sysid_student), '') +	
									']' + @transaction_done


			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	

		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN
			
			--used for the delete trigger 
			UPDATE ums.student_promissory_note SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				promissory_note_id = @promissory_note_id

		END	

		FETCH NEXT FROM student_promissory_note_update_cursor
			INTO @promissory_note_id, @sysid_student, @note_received_date, @reference_no,
					@promissory_note, @is_downpayment, @edited_by
	END

	CLOSE student_promissory_note_update_cursor
	DEALLOCATE student_promissory_note_update_cursor
	
GO
-------------------------------------------------------------------------

--verifies that the trigger "Student_Promissory_Note_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Student_Promissory_Note_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Promissory_Note_Trigger_Delete
GO

CREATE TRIGGER ums.Student_Promissory_Note_Trigger_Delete
	ON  ums.student_promissory_note
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @promissory_note_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @note_received_date datetime
	DECLARE @reference_no varchar (50)
	DECLARE @promissory_note varchar (MAX)
	DECLARE @is_downpayment bit

	DECLARE @deleted_by varchar (50)

	DECLARE @downpayment varchar (50)

	DECLARE student_promissory_note_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.promissory_note_id, d.sysid_student, d.note_received_date, d.reference_no,
				d.promissory_note, d.is_downpayment, d.edited_by
			FROM DELETED AS d

	OPEN student_promissory_note_delete_cursor

	FETCH NEXT FROM student_promissory_note_delete_cursor
		INTO @promissory_note_id, @sysid_student, @note_received_date, @reference_no,
				@promissory_note, @is_downpayment, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		IF (@is_downpayment = 1)
		BEGIN
			SET @downpayment = 'YES'
		END
		ELSE
		BEGIN
			SET @downpayment = 'NO'
		END

		SET @transaction_done = 'DELETED a student promissory note ' + 
								'[Promissory Note ID: ' + ISNULL(CONVERT(varchar, @promissory_note_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Note Received Date: ' + ISNULL(CONVERT(varchar, @note_received_date, 101), '') +
								'][Reference No.: ' + ISNULL(@reference_no, '') +
								'][Promissory Note: ' + ISNULL(@promissory_note, '') + 
								'][Is Downpayment: ' + ISNULL(@downpayment, '') + 
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM student_promissory_note_delete_cursor
			INTO @promissory_note_id, @sysid_student, @note_received_date, @reference_no,
					@promissory_note, @is_downpayment, @deleted_by
	END

	CLOSE student_promissory_note_delete_cursor
	DEALLOCATE student_promissory_note_delete_cursor

GO
-----------------------------------------------------------------


-- ##############################################END TABLE "student_promissory_note" OBJECTS######################################################




-- ################################################TABLE "student_balance_forwarded" OBJECTS######################################################

--verifies that the trigger "Student_Balance_Forwarded_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Student_Balance_Forwarded_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Balance_Forwarded_Trigger_Insert
GO

CREATE TRIGGER ums.Student_Balance_Forwarded_Trigger_Insert
	ON  ums.student_balance_forwarded
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @balance_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @amount decimal (12, 2)
	DECLARE @created_by varchar (50)
	
	SELECT 
		@balance_id = i.balance_id,
		@sysid_student = i.sysid_student,
		@amount = i.amount,
		@created_by = i.created_by
	FROM INSERTED AS i

	SET @transaction_done = 'CREATED a new student balance forwarded ' + 
							'[Balance ID: ' + ISNULL(CONVERT(varchar, @balance_id), '') +
							'][Student ID: ' + ISNULL((SELECT si.student_id
															FROM 
																ums.student_information AS si
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), '') +
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Balance_Forwarded_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Student_Balance_Forwarded_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Balance_Forwarded_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Student_Balance_Forwarded_Trigger_Instead_Update
	ON  ums.student_balance_forwarded
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @balance_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @edited_by varchar (50)
	
	DECLARE @amount_b decimal (12, 2)

	DECLARE @has_update bit

	DECLARE student_balance_forwarded_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.balance_id, i.sysid_student, i.amount, i.edited_by
			FROM INSERTED AS i

	OPEN student_balance_forwarded_update_cursor

	FETCH NEXT FROM student_balance_forwarded_update_cursor
		INTO @balance_id, @sysid_student, @amount, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@amount_b = sbf.amount
		FROM
			ums.student_balance_forwarded AS sbf
		WHERE
			sbf.balance_id = @balance_id

		SET @transaction_done = ''
		SET @has_update = 0
		
		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') +  ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF @has_update = 1
		BEGIN

			UPDATE ums.student_balance_forwarded SET
				amount = @amount,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				balance_id = @balance_id

			SET @transaction_done = 'UPDATED a student balance forwarded ' + 
									'[Balance ID: ' + ISNULL(CONVERT(varchar, @balance_id), '') +
									'][Student ID: ' + ISNULL((SELECT si.student_id
																	FROM 
																		ums.student_information AS si
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																	FROM 
																		ums.person_information AS pri
																	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																	WHERE 
																		si.sysid_student = @sysid_student), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.student_balance_forwarded SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				balance_id = @balance_id

		END	

		FETCH NEXT FROM student_balance_forwarded_update_cursor
			INTO @balance_id, @sysid_student, @amount, @edited_by


	END

	CLOSE student_balance_forwarded_update_cursor
	DEALLOCATE student_balance_forwarded_update_cursor

GO
-----------------------------------------------------------------

--verifies that the trigger "Student_Balance_Forwarded_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Student_Balance_Forwarded_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Student_Balance_Forwarded_Trigger_Delete
GO

CREATE TRIGGER ums.Student_Balance_Forwarded_Trigger_Delete
	ON  ums.student_balance_forwarded
	FOR DELETE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @balance_id bigint
	DECLARE @sysid_student varchar (50)
	DECLARE @amount decimal (12, 2)

	DECLARE @deleted_by varchar (50)

	DECLARE student_balance_forwarded_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.balance_id, d.sysid_student, d.amount, d.edited_by
			FROM 
				DELETED AS d

	OPEN student_balance_forwarded_delete_cursor

	FETCH NEXT FROM student_balance_forwarded_delete_cursor
		INTO @balance_id, @sysid_student, @amount, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @transaction_done = 'DELETED a student balance forwarded ' + 
								'[Balance ID: ' + ISNULL(CONVERT(varchar, @balance_id), '') +
								'][Student ID: ' + ISNULL((SELECT si.student_id
																FROM 
																	ums.student_information AS si
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Student Name: ' + ISNULL((SELECT pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), '') +
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM student_balance_forwarded_delete_cursor
			INTO @balance_id, @sysid_student, @amount, @deleted_by


	END

	CLOSE student_balance_forwarded_delete_cursor
	DEALLOCATE student_balance_forwarded_delete_cursor	

GO
-----------------------------------------------------------------

-- ##############################################END TABLE "student_balance_forwarded" OBJECTS######################################################





-- ################################################TABLE "miscellaneous_income" OBJECTS######################################################


--verifies that the trigger "Miscellaneous_Income_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Miscellaneous_Income_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Miscellaneous_Income_Trigger_Insert
GO

CREATE TRIGGER ums.Miscellaneous_Income_Trigger_Insert
	ON  ums.miscellaneous_income
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @received_from varchar (150)
	DECLARE @sysid_student varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @sysid_account_credit varchar (50)

	DECLARE @created_by varchar (50)
	
	SELECT 
		@payment_id = i.payment_id,
		@received_from = i.received_from,
		@sysid_student = i.sysid_student,
		@sysid_employee = i.sysid_employee,
		@payment_date = i.payment_date,
		@receipt_date = i.receipt_date,
		@receipt_no = i.receipt_no,
		@remarks = i.remarks,
		@amount = i.amount,
		@discount_amount = i.discount_amount,		
		@amount_tendered = i.amount_tendered,
		@bank = i.bank,
		@check_no = i.check_no,
		@sysid_account_credit = i.sysid_account_credit,

		@created_by = i.created_by
	FROM INSERTED AS i

	SET @transaction_done = 'CREATED a new miscellaneous income ' + 
							'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
							'][Received From: ' + ISNULL((SELECT '(' + si.student_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															WHERE 
																si.sysid_student = @sysid_student), 
													ISNULL((SELECT '(' + epi.employee_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
															WHERE 
																epi.sysid_employee = @sysid_employee), ISNULL(@received_from, ''))) +
							'][Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') +
							'][Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') +
							'][Receipt No.: ' + ISNULL(@receipt_no, '') +
							'][Remarks: ' + ISNULL(@remarks, '') + 
							'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
							'][Discounted Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +
							'][Amount Tendered: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +
							'][Bank: ' + ISNULL(@bank, '') +
							'][Check No.: ' + ISNULL(@check_no, '') +
							'][Credit Entry: ' + ISNULL((SELECT
																coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
															FROM
																ums.chart_of_accounts AS coa
															INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
															WHERE
																(coa.sysid_account = @sysid_account_credit)), '') +
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

--verifies that the trigger "Miscellaneous_Income_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Miscellaneous_Income_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Miscellaneous_Income_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Miscellaneous_Income_Trigger_Instead_Update
	ON  ums.miscellaneous_income
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @received_from varchar (150)
	DECLARE @sysid_student varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @sysid_account_credit varchar (50)

	DECLARE @edited_by varchar (50)
	
	DECLARE @received_from_b varchar (150)
	DECLARE @sysid_student_b varchar (50)
	DECLARE @sysid_employee_b varchar (50)
	DECLARE @payment_date_b datetime
	DECLARE @receipt_date_b datetime
	DECLARE @receipt_no_b varchar (50)
	DECLARE @remarks_b varchar (100)
	DECLARE @amount_b decimal (12, 2)
	DECLARE @discount_amount_b decimal (12, 2)
	DECLARE @amount_tendered_b decimal (12, 2)
	DECLARE @bank_b varchar (50)
	DECLARE @check_no_b varchar (50)
	DECLARE @sysid_account_credit_b varchar (50)

	DECLARE @has_update bit

	DECLARE miscellaneous_income_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.payment_id, i.received_from, i.sysid_student, i.sysid_employee, i.payment_date, i.receipt_date, i.receipt_no, i.remarks, 
				i.amount, i.discount_amount, i.amount_tendered, i.bank, i.check_no, i.sysid_account_credit, i.edited_by
			FROM INSERTED AS i

	OPEN miscellaneous_income_update_cursor

	FETCH NEXT FROM miscellaneous_income_update_cursor
		INTO @payment_id, @received_from, @sysid_student, @sysid_employee, @payment_date, @receipt_date, @receipt_no, @remarks, 
				@amount, @discount_amount, @amount_tendered, @bank, @check_no, @sysid_account_credit, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT
			@received_from_b = mci.received_from,
			@sysid_student_b = mci.sysid_student,
			@sysid_employee_b = mci.sysid_employee,
			@payment_date_b = mci.payment_date,
			@receipt_date_b = mci.receipt_date,
			@receipt_no_b = mci.receipt_no,
			@remarks_b = mci.remarks,
			@amount_b = mci.amount,
			@discount_amount_b = mci.discount_amount,
			@amount_tendered_b = mci.amount_tendered,
			@bank_b = mci.bank, 
			@check_no_b = mci.check_no,
			@sysid_account_credit_b = mci.sysid_account_credit
		FROM
			ums.miscellaneous_income AS mci
		WHERE
			mci.payment_id = @payment_id

		SET @transaction_done = ''
		SET @has_update = 0

		IF (NOT ISNULL(@received_from COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@received_from_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@sysid_student COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_student_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')) OR
			(NOT ISNULL(@sysid_employee COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_employee_b COLLATE SQL_Latin1_General_CP1_CS_AS, ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Received From Before: ' + ISNULL((SELECT '(' + si.student_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																								FROM 
																									ums.person_information AS pri
																								INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																								WHERE 
																									si.sysid_student = @sysid_student_b), 
																						ISNULL((SELECT '(' + epi.employee_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																								FROM 
																									ums.person_information AS pri
																								INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																								WHERE 
																									epi.sysid_employee = @sysid_employee_b), ISNULL(@received_from_b, ''))) + ']' +
														'[Received From After: ' + ISNULL((SELECT '(' + si.student_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																								FROM 
																									ums.person_information AS pri
																								INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																								WHERE 
																									si.sysid_student = @sysid_student), 
																						ISNULL((SELECT '(' + epi.employee_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																								FROM 
																									ums.person_information AS pri
																								INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																								WHERE 
																									epi.sysid_employee = @sysid_employee), ISNULL(@received_from, ''))) + ']'
			SET @has_update = 1
		END		
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Received From: ' + ISNULL((SELECT '(' + si.student_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																					FROM 
																						ums.person_information AS pri
																					INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																					WHERE 
																						si.sysid_student = @sysid_student), 
																			ISNULL((SELECT '(' + epi.employee_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																					FROM 
																						ums.person_information AS pri
																					INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																					WHERE 
																						epi.sysid_employee = @sysid_employee), ISNULL(@received_from, ''))) + ']'
		END
		
		IF (NOT ISNULL(CONVERT(varchar, @payment_date, 101), '') = ISNULL(CONVERT(varchar, @payment_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Reflected Date Before: ' + ISNULL(CONVERT(varchar, @payment_date_b, 101), '') + ']' +
														'[Reflected Date After: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') + ']'
		END

		IF (NOT ISNULL(CONVERT(varchar, @receipt_date, 101), '') = ISNULL(CONVERT(varchar, @receipt_date_b, 101), ''))
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt Date Before: ' + ISNULL(CONVERT(varchar, @receipt_date_b, 101), '') + ']' +
														'[Receipt Date After: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') + ']'
			SET @has_update = 1
		END
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') + ']'
		END

		IF NOT ISNULL(@receipt_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@receipt_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt No. Before: ' + ISNULL(@receipt_no_b, '') + ']' +
														'[Receipt No. After: ' + ISNULL(@receipt_no, '') + ']'
			SET @has_update = 1
		END		
		ELSE
		BEGIN
			SET @transaction_done = @transaction_done + '[Receipt No.: ' + ISNULL(@receipt_no, '') + ']'
		END

		IF NOT ISNULL(@remarks COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@remarks_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Remarks Before: ' + ISNULL(@remarks_b, '') +  ']' +
														'[Remarks After: ' + ISNULL(@remarks, '') +  ']'
			SET @has_update = 1
		END	

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_b), 1), '0.00') +  ']' +
														'[Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Discounted Amount Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount_b), 1), '0.00') +  ']' +
														'[Discounted Amount After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') = ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered_b), 1), '0.00')
		BEGIN
			SET @transaction_done = @transaction_done + '[Amount Tendered Before: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered_b), 1), '0.00') +  ']' +
														'[Amount Tendered After: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@bank COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@bank_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Bank Before: ' + ISNULL(@bank_b, '') +  ']' +
														'[Bank After: ' + ISNULL(@bank, '') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@check_no COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@check_no_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Check No. Before: ' + ISNULL(@check_no_b, '') +  ']' +
														'[Check No. After: ' + ISNULL(@check_no, '') +  ']'
			SET @has_update = 1
		END		

		IF NOT ISNULL(@sysid_account_credit COLLATE SQL_Latin1_General_CP1_CS_AS, '') = ISNULL(@sysid_account_credit_b COLLATE SQL_Latin1_General_CP1_CS_AS, '')
		BEGIN
			SET @transaction_done = @transaction_done + '[Credit Entry Before: ' + ISNULL((SELECT
																								coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																							FROM
																								ums.chart_of_accounts AS coa
																							INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																							WHERE
																								(coa.sysid_account = @sysid_account_credit_b)), '') +  ']' +
														'[Credit Entry After: ' + ISNULL((SELECT
																								coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																							FROM
																								ums.chart_of_accounts AS coa
																							INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																							WHERE
																								(coa.sysid_account = @sysid_account_credit)), '') +  ']'
			SET @has_update = 1
		END		

		IF @has_update = 1
		BEGIN

			UPDATE ums.miscellaneous_income SET
				received_from = @received_from,
				sysid_student = @sysid_student,
				sysid_employee = @sysid_employee,
				payment_date = @payment_date,
				receipt_date = @receipt_date,
				receipt_no = @receipt_no,
				remarks = @remarks,
				amount = @amount,
				discount_amount = @discount_amount,			
				amount_tendered = @amount_tendered,
				bank = @bank,
				check_no = @check_no,
				sysid_account_credit = @sysid_account_credit,

				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				payment_id = @payment_id

			SET @transaction_done = 'UPDATED a miscellaneous income ' + 
									'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
									']' + @transaction_done

			IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
			BEGIN
				SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @edited_by
			END
					
			EXECUTE ums.InsertTransactionLog @edited_by, @network_information, @transaction_done	
		END
		ELSE IF NOT @edited_by IS NULL
		BEGIN

			--used for the delete trigger
			UPDATE ums.miscellaneous_income SET
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				payment_id = @payment_id

		END	

		FETCH NEXT FROM miscellaneous_income_update_cursor
			INTO @payment_id, @received_from, @sysid_student, @sysid_employee, @payment_date, @receipt_date, @receipt_no, @remarks, 
					@amount, @discount_amount, @amount_tendered, @bank, @check_no, @sysid_account_credit, @edited_by


	END

	CLOSE miscellaneous_income_update_cursor
	DEALLOCATE miscellaneous_income_update_cursor

GO
-------------------------------------------------------------------

--verifies that the trigger "Miscellaneous_Income_Trigger_Instead_Delete" already exist
IF OBJECT_ID ('ums.Miscellaneous_Income_Trigger_Instead_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Miscellaneous_Income_Trigger_Instead_Delete
GO

CREATE TRIGGER ums.Miscellaneous_Income_Trigger_Instead_Delete
	ON  ums.miscellaneous_income
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE @payment_id bigint
	DECLARE @received_from varchar (150)
	DECLARE @sysid_student varchar (50)
	DECLARE @sysid_employee varchar (50)
	DECLARE @payment_date datetime
	DECLARE @receipt_date datetime
	DECLARE @receipt_no varchar (50)
	DECLARE @remarks varchar (100)
	DECLARE @amount decimal (12, 2)
	DECLARE @discount_amount decimal (12, 2)
	DECLARE @amount_tendered decimal (12, 2)
	DECLARE @bank varchar (50)
	DECLARE @check_no varchar (50)
	DECLARE @sysid_account_credit varchar (50)
	
	DECLARE @deleted_by varchar (50)

	DECLARE miscellaneous_income_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.payment_id, d.received_from, d.sysid_student, d.sysid_employee, d.payment_date, d.receipt_date, d.receipt_no, d.remarks,
				d.amount, d.discount_amount, d.amount_tendered, d.bank, d.check_no, d.sysid_account_credit, d.edited_by
			FROM 
				DELETED AS d

	OPEN miscellaneous_income_delete_cursor

	FETCH NEXT FROM miscellaneous_income_delete_cursor
		INTO @payment_id, @received_from, @sysid_student, @sysid_employee, @payment_date, @receipt_date, @receipt_no, @remarks, 
				@amount, @discount_amount, @amount_tendered, @bank, @check_no, @sysid_account_credit, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @transaction_done = 'DELETED a miscellaneous income ' + 
								'[Payment ID: ' + ISNULL(CONVERT(varchar, @payment_id), '') +
								'][Received From: ' + ISNULL((SELECT '(' + si.student_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
																WHERE 
																	si.sysid_student = @sysid_student), 
														ISNULL((SELECT '(' + epi.employee_id + ') ' + pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
																FROM 
																	ums.person_information AS pri
																INNER JOIN ums.employee_information AS epi ON epi.sysid_person = pri.sysid_person
																WHERE 
																	epi.sysid_employee = @sysid_employee), ISNULL(@received_from, ''))) +
								'][Reflected Date: ' + ISNULL(CONVERT(varchar, @payment_date, 101), '') +
								'][Receipt Date: ' + ISNULL(CONVERT(varchar, @receipt_date, 101), '') +
								'][Receipt No.: ' + ISNULL(@receipt_no, '') +
								'][Remarks: ' + ISNULL(@remarks, '') + 
								'][Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount), 1), '0.00') +
								'][Discounted Amount: ' + ISNULL(CONVERT(varchar, CONVERT(money, @discount_amount), 1), '0.00') +
								'][Amount Tendered: ' + ISNULL(CONVERT(varchar, CONVERT(money, @amount_tendered), 1), '0.00') +
								'][Bank: ' + ISNULL(@bank, '') +
								'][Check No.: ' + ISNULL(@check_no, '') +
								'][Credit Entry: ' + ISNULL((SELECT
																	coa.account_code + ' - ' + coa.account_name + ' (' + acg.category_description + ')'
																FROM
																	ums.chart_of_accounts AS coa
																INNER JOIN ums.accounting_category AS acg ON acg.accounting_category_id = coa.accounting_category_id
																WHERE
																	(coa.sysid_account = @sysid_account_credit)), '') +
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM miscellaneous_income_delete_cursor
			INTO @payment_id, @received_from, @sysid_student, @sysid_employee, @payment_date, @receipt_date, @receipt_no, @remarks, 
					@amount, @discount_amount, @amount_tendered, @bank, @check_no, @sysid_account_credit, @deleted_by


	END

	CLOSE miscellaneous_income_delete_cursor
	DEALLOCATE miscellaneous_income_delete_cursor	

GO
-----------------------------------------------------------------

-- verifies if the procedure "SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome')
   DROP PROCEDURE ums.SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome
GO

CREATE PROCEDURE ums.SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome
	
	@date_start datetime,
	@date_end datetime,
	@is_consolidated bit = 0,

	@system_user_id varchar(50) = ''
	
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN
	
		--NOTE: should not use INSERT... SELECT because this will called in another function

		DECLARE @sniff_date_start datetime
		DECLARE @sniff_date_end datetime
		DECLARE @sniff_is_consolidated bit
		DECLARE @sniff_system_user_id varchar(50)

		SET @sniff_date_start = @date_start
		SET @sniff_date_end = @date_end
		SET @sniff_is_consolidated = @is_consolidated
		SET @sniff_system_user_id = @system_user_id;

		WITH cte_student_payments(payment_id, received_from, sysid_student, received_date, receipt_no, amount, 
				sysid_account_credit, is_miscellaneous_income) AS
		(
			SELECT	--STUDENT PAYMENTS
				stp.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				stp.sysid_student AS sysid_student,
				stp.created_on AS received_date,
				stp.receipt_no AS receipt_no,
				stp.amount AS amount,
				stp.sysid_account_credit AS sysid_account_credit,
				'false' AS is_miscellaneous_income
			FROM
				ums.student_payments AS stp
			INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(stp.is_miscellaneous_income = 0) AND				
				(NOT stp.sysid_account_credit IS NULL) AND
				(stp.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (stp.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
		),
		cte_miscellaneous_income(payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
				sysid_account_credit, is_miscellaneous_income) AS
		(
			SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
				stp.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				stp.sysid_student AS sysid_student,
				NULL AS sysid_employee,
				stp.created_on AS received_date,
				stp.receipt_no AS receipt_no,
				stp.amount AS amount,
				stp.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.student_payments AS stp
			INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
			INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(stp.is_miscellaneous_income = 1) AND
				(NOT stp.sysid_account_credit IS NULL) AND
				(stp.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (stp.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
				mci.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
				mci.sysid_student AS sysid_student,
				NULL AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
			LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(NOT mci.sysid_student IS NULL) AND
				(mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (mci.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
				mci.payment_id AS payment_id,
				pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
				NULL AS sysid_student,
				mci.sysid_employee AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
			LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(mci.sysid_student IS NULL) AND
				(NOT mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (mci.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
			UNION ALL
			SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
				mci.payment_id AS payment_id,
				mci.received_from AS received_from,
				NULL AS sysid_student,
				NULL AS sysid_employee,
				mci.created_on AS received_date,
				mci.receipt_no AS receipt_no,
				mci.amount AS amount,
				mci.sysid_account_credit AS sysid_account_credit,
				'true' AS is_miscellaneous_income
			FROM
				ums.miscellaneous_income AS mci
			WHERE
				(NOT mci.sysid_account_credit IS NULL) AND
				(mci.sysid_student IS NULL) AND
				(mci.sysid_employee IS NULL) AND
				(mci.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (mci.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
		),
		cte_cancelled_receipt_no(payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
				sysid_account_credit, is_miscellaneous_income) AS
		(
			SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
				0 AS payment_id,
				'CANCELLED RECEIPT' AS received_from,
				NULL AS sysid_student,
				NULL AS sysid_employee,
				crn.receipt_date AS received_date,
				crn.receipt_no AS receipt_no,
				0.00 AS amount,
				NULL AS sysid_account_credit,
				'false' AS is_miscellaneous_income
			FROM
				ums.cancelled_receipt_no AS crn
			WHERE
				(crn.receipt_date BETWEEN @sniff_date_start AND @sniff_date_end) AND
				(((@sniff_is_consolidated = 0) AND (crn.created_by = @sniff_system_user_id)) OR
				(@sniff_is_consolidated = 1))
		)			

		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end)        
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_student_payments AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id 
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_student_payments AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(sec.sysid_enrolmentcourse IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(del_sel.is_marked_deleted = 1) AND
				(NOT del_pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
													DISTINCT not_pmi.sysid_student AS sysid_student
												FROM
													cte_student_payments AS not_pmi
												INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
												INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
												WHERE 
													(not_sel.is_marked_deleted = 0)))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		UNION ALL
		SELECT DISTINCT										--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,				--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(NOT pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
											DISTINCT not_pmi.sysid_student AS sysid_student
										FROM
											cte_student_payments AS not_pmi
										INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
										INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
										WHERE 
											(not_sel.is_marked_deleted = 0)))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,					
			summary_coa.sysid_account AS sysid_account_summary,	
			summary_coa.account_code AS account_code_summary,	
			summary_coa.account_name AS account_name_summary,	
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_student_payments AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_student_payments AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_student_payments AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no	
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id 
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN cte_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sec.sysid_enrolmentcourse IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(NOT del_pmi.sysid_student IS NULL) AND
				(del_sel.is_marked_deleted = 1) AND
				(NOT del_pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
													DISTINCT not_pmi.sysid_student AS sysid_student
												FROM
													cte_miscellaneous_income AS not_pmi
												INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
												INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
												WHERE 
													(not_sel.is_marked_deleted = 0)))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		WHERE
			(NOT pmi.sysid_student IS NULL)
		UNION ALL
		SELECT DISTINCT									--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(NOT pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
											DISTINCT not_pmi.sysid_student AS sysid_student
										FROM
											cte_student_payments AS not_pmi
										INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
										INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
										WHERE 
											(not_sel.is_marked_deleted = 0)))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,					
			summary_coa.sysid_account AS sysid_account_summary,	
			summary_coa.account_code AS account_code_summary,	
			summary_coa.account_name AS account_name_summary,	
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN cte_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												cte_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no		
		WHERE
			(NOT pmi.sysid_student IS NULL)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	RELATED TO AN EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_employee AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			di.department_id AS course_department_id,
			di.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account		
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = pmi.sysid_employee
		INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
		WHERE
			(NOT pmi.sysid_employee IS NULL) AND
			(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = pmi.sysid_employee AND
												effectivity_date <= pmi.received_date))
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	NOT RELATED TO A STUDENT OR EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN cte_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		WHERE
			(pmi.sysid_student IS NULL) AND
			(pmi.sysid_employee IS NULL)
		UNION ALL
		SELECT		--RECEIPT NO. THAT HAS BEEN CANCELLED	
			NULL AS sysid_account,
			'CANCELLED' AS account_code,
			crn.remarks AS account_name,	
			NULL AS sysid_account_summary,
			NULL AS account_code_summary,
			NULL AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			'CANCELLED' AS course_department_id,
			'CANCELLED' AS acronym
		FROM
			cte_cancelled_receipt_no AS pmi
		INNER JOIN ums.cancelled_receipt_no AS crn ON crn.receipt_no = pmi.receipt_no
		ORDER BY
			pmi.receipt_no ASC, pmi.received_date ASC
			
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a miscellaneous income', 'Miscellaneous Income'
	END
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome TO db_umsusers
GO
------------------------------------------------------------

-- verifies if the procedure "SelectByDateStartEndCashReceiptsSummarizedStudentPaymentMiscellaneousIncome" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByDateStartEndCashReceiptsSummarizedStudentPaymentMiscellaneousIncome')
   DROP PROCEDURE ums.SelectByDateStartEndCashReceiptsSummarizedStudentPaymentMiscellaneousIncome
GO

CREATE PROCEDURE ums.SelectByDateStartEndCashReceiptsSummarizedStudentPaymentMiscellaneousIncome
	
	@date_start datetime,
	@date_end datetime,
	@is_consolidated bit = 0,

	@system_user_id varchar(50) = ''
	
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN

		DECLARE @cash_receipts_detailed TABLE (table_id bigint IDENTITY(1, 1) NOT NULL PRIMARY KEY,
												sysid_account varchar (50) NULL,
												account_code varchar (50) NOT NULL,
												account_name varchar (150) NOT NULL,
												sysid_account_summary varchar (50) NULL,
												account_code_summary varchar (50) NULL,
												account_name_summary varchar (150) NULL,
												received_from varchar (150) NOT NULL,
												sysid_student_employee varchar (50) NULL,	
												received_date datetime NOT NULL,
												receipt_no varchar (50) NOT NULL,		
												amount decimal (12, 2) NOT NULL,
												is_miscellaneous_income bit NOT NULL,
												course_department_id varchar (50) NULL,
												acronym varchar (50) NULL)


		INSERT INTO @cash_receipts_detailed (sysid_account, account_code, account_name, sysid_account_summary, account_code_summary,
				account_name_summary, received_from, sysid_student_employee, received_date, receipt_no, amount, is_miscellaneous_income, course_department_id, 
				acronym)
		EXECUTE 
				ums.SelectByDateStartEndCashReceiptsDetailedStudentPaymentMiscellaneousIncome @date_start, @date_end, @is_consolidated, @system_user_id

		SELECT	--SUMMARY OF PAYMENTS AS STUDENT PAYMENTS BY COURSE_ID AND SYSID_ACCOUNT
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			ci.acronym AS acronym,
			coa.account_code AS account_code_subsidiary,
			coa.account_name AS account_name_subsidiary,
			summary_crd.amount AS total_amount,
			'false' AS is_miscellaneous_income
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN
		(
			SELECT
				sum_crd.course_department_id AS course_department_id,
				sum_crd.sysid_account AS sysid_account,
				SUM(sum_crd.amount) AS amount
			FROM
				@cash_receipts_detailed AS sum_crd
			WHERE
				(NOT sum_crd.course_department_id IS NULL) AND
				(NOT sum_crd.acronym IS NULL) AND
				(sum_crd.is_miscellaneous_income = 0)
			GROUP BY
				sum_crd.course_department_id, sum_crd.sysid_account
		) AS summary_crd ON summary_crd.sysid_account = coa.sysid_account
		LEFT JOIN ums.course_information AS ci ON ci.course_id = summary_crd.course_department_id
		LEFT JOIN ums.department_information AS di ON di.department_id = summary_crd.course_department_id
		WHERE
			(di.department_id IS NULL)
		UNION ALL
		SELECT	--SUMMARY OF PAYMENTS AS STUDENT PAYMENTS BY SYSID_ACCOUNT (STUDENT MIGRATED BUT NOT ENROLLED SO COURSE_ID AND ACRONYM IS NULL)
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			NULL AS acronym,
			coa.account_code AS account_code_subsidiary,
			coa.account_name AS account_name_subsidiary,
			summary_crd.amount AS total_amount,
			'false' AS is_miscellaneous_income
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN
		(
			SELECT
				sum_crd.sysid_account AS sysid_account,
				SUM(sum_crd.amount) AS amount
			FROM
				@cash_receipts_detailed AS sum_crd
			WHERE
				(sum_crd.course_department_id IS NULL) AND
				(sum_crd.acronym IS NULL) AND
				(sum_crd.is_miscellaneous_income = 0)
			GROUP BY
				sum_crd.sysid_account
		) AS summary_crd ON summary_crd.sysid_account = coa.sysid_account
		UNION ALL
		SELECT	--SUMMARY OF PAYMENTS AS MISCELLANEOUS INCOME BY DEPARTMENT ID AND SYSID_ACCOUNT (FOR EMPLOYEES)
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			di.acronym AS acronym,
			coa.account_code AS account_code_subsidiary,
			coa.account_name AS account_name_subsidiary,
			summary_crd.amount AS total_amount,
			'true' AS is_miscellaneous_income
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN
		(
			SELECT
				sum_crd.course_department_id AS course_department_id,
				sum_crd.sysid_account AS sysid_account,
				SUM(sum_crd.amount) AS amount
			FROM
				@cash_receipts_detailed AS sum_crd
			WHERE
				(NOT sum_crd.course_department_id IS NULL) AND
				(NOT sum_crd.acronym IS NULL) AND
				(sum_crd.is_miscellaneous_income = 1)
			GROUP BY
				sum_crd.course_department_id, sum_crd.sysid_account
		) AS summary_crd ON summary_crd.sysid_account = coa.sysid_account
		LEFT JOIN ums.course_information AS ci ON ci.course_id = summary_crd.course_department_id
		LEFT JOIN ums.department_information AS di ON di.department_id = summary_crd.course_department_id
		WHERE
			(ci.course_id IS NULL)
		UNION ALL
		SELECT	--SUMMARY OF PAYMENTS AS MISCELLANEOUS ACCOUNT BY SYSID_ACCOUNT (STUDENT PAYMENTS AS MISCELLANEOUS INCOME OR ANY MISCELLANEOUS INCOME
			summary_coa.account_code AS account_code_summary,						--EXCLUDING EMPLOYEES)
			summary_coa.account_name AS account_name_summary,
			NULL AS acronym,
			coa.account_code AS account_code_subsidiary,
			coa.account_name AS account_name_subsidiary,
			summary_crd.amount AS total_amount,
			'true' AS is_miscellaneous_income
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN
		(
			SELECT
				sum_crd.sysid_account AS sysid_account,
				SUM(sum_crd.amount) AS amount
			FROM
				@cash_receipts_detailed AS sum_crd
			LEFT JOIN ums.department_information AS di ON di.department_id = sum_crd.course_department_id
			WHERE
				(sum_crd.is_miscellaneous_income = 1) AND
				(di.department_id IS NULL)
			GROUP BY
				sum_crd.sysid_account
		) AS summary_crd ON summary_crd.sysid_account = coa.sysid_account
		ORDER BY
			is_miscellaneous_income ASC, account_code_summary ASC, acronym ASC

	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a miscellaneous income', 'Miscellaneous Income'
	END
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByDateStartEndCashReceiptsSummarizedStudentPaymentMiscellaneousIncome TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByQueryStringDateStartEndCashReceiptsQueryStudentPaymentMiscellaneousIncome" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByQueryStringDateStartEndCashReceiptsQueryStudentPaymentMiscellaneousIncome')
   DROP PROCEDURE ums.SelectByQueryStringDateStartEndCashReceiptsQueryStudentPaymentMiscellaneousIncome
GO

CREATE PROCEDURE ums.SelectByQueryStringDateStartEndCashReceiptsQueryStudentPaymentMiscellaneousIncome
	
	@query_string varchar (50) = '',
	@date_start datetime,
	@date_end datetime,
	@sysid_account_credit_list nvarchar (MAX) = '',

	@system_user_id varchar(50) = ''
	
AS

	IF ((ums.IsSystemAdminSystemUserInfo(@system_user_id) = 1) OR 
		(ums.IsCashierSystemUserInfo(@system_user_id) = 1) OR
		(ums.IsVpOfFinanceSystemUserInfo(@system_user_id) = 1))
	BEGIN
	
		DECLARE @payments_miscellaneous_income TABLE (table_id int IDENTITY(1, 1) NOT NULL PRIMARY KEY,
														payment_id bigint NOT NULL,		
														received_from varchar (150) NOT NULL, 
														sysid_student varchar (50) NULL, 
														sysid_employee varchar (50) NULL, 
														received_date datetime NOT NULL,
														receipt_no varchar (50) NOT NULL,
														amount decimal (12, 2) NOT NULL,
														sysid_account_credit varchar (50) NULL,
														is_student_payment bit NOT NULL DEFAULT (0),
														is_miscellaneous_income bit NOT NULL DEFAULT (0),
														is_cancelled_receipt bit NOT NULL DEFAULT (0))

		--	A - query_string (*)
		--	B - date_start date_end
		--	C - sysid_account_credit_list
		
		--	A	B	C
		-- =============
		--	0	0	0
		--	0	0	1
		--	0	1	0
		--	0	1	1
		--	1	0	0
		--	1	0	1
		--	1	1	0
		--	1	1	1
		
		SELECT @query_string = '%' + RTRIM(LTRIM(@query_string)) + '%'

		IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (000)
				(ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(epi.employee_id LIKE @query_string) OR 
					((REPLACE(epi.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(mci.received_from LIKE @query_string) OR 
					((REPLACE(mci.received_from, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--CANCELLED RECEIPTS
					0 AS payment_id,
					'CANCELLED RECEIPT' AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					crn.receipt_date AS received_date,
					crn.receipt_no AS receipt_no,
					0.00 AS amount,
					NULL AS sysid_account_credit,
					'false' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'true' AS is_cancelled_receipt
				FROM
					ums.cancelled_receipt_no AS crn
				WHERE
					((crn.receipt_no LIKE @query_string) OR 
					((REPLACE(crn.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					('CANCELLED RECEIPT' LIKE @query_string) OR 
					((REPLACE('CANCELLED RECEIPT', ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
		
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (001)
				(NOT ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(epi.employee_id LIKE @query_string) OR 
					((REPLACE(epi.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(mci.received_from LIKE @query_string) OR 
					((REPLACE(mci.received_from, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
		
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (010)
				(ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(epi.employee_id LIKE @query_string) OR 
					((REPLACE(epi.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(mci.received_from LIKE @query_string) OR 
					((REPLACE(mci.received_from, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--CANCELLED RECEIPTS
					0 AS payment_id,
					'CANCELLED RECEIPT' AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					crn.receipt_date AS received_date,
					crn.receipt_no AS receipt_no,
					0.00 AS amount,
					NULL AS sysid_account_credit,
					'false' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'true' AS is_cancelled_receipt
				FROM
					ums.cancelled_receipt_no AS crn
				WHERE
					(crn.receipt_date BETWEEN @date_start AND @date_end) AND
					((crn.receipt_no LIKE @query_string) OR 
					((REPLACE(crn.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					('CANCELLED RECEIPT' LIKE @query_string) OR 
					((REPLACE('CANCELLED RECEIPT', ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
		
		END
		ELSE IF (NOT ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (011)
				(NOT ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL) AND
					((stp.receipt_no LIKE @query_string) OR 
					((REPLACE(stp.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(si.student_id LIKE @query_string) OR 
					((REPLACE(si.student_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(epi.employee_id LIKE @query_string) OR 
					((REPLACE(epi.employee_id, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.last_name LIKE @query_string) OR 
					((REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					(pri.first_name LIKE @query_string) OR
					((REPLACE(pri.first_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR 
					((pri.last_name + ', ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.last_name + ' ' + pri.first_name + ' ' + pri.middle_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.middle_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.first_name + ' ' + pri.last_name) LIKE @query_string) OR
					((pri.last_name + ',' + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.last_name + pri.first_name + pri.middle_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.middle_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((pri.first_name + pri.last_name) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + ',' + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.last_name, ' ', '') + REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.middle_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					((REPLACE(pri.first_name, ' ', '') + REPLACE(pri.last_name, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL) AND
					((mci.receipt_no LIKE @query_string) OR 
					((REPLACE(mci.receipt_no, ' ', '')) LIKE REPLACE(@query_string, ' ', '')) OR
					(mci.received_from LIKE @query_string) OR 
					((REPLACE(mci.received_from, ' ', '')) LIKE REPLACE(@query_string, ' ', '')))
					
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (100)
				(ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--CANCELLED RECEIPTS
					0 AS payment_id,
					'CANCELLED RECEIPT' AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					crn.receipt_date AS received_date,
					crn.receipt_no AS receipt_no,
					0.00 AS amount,
					NULL AS sysid_account_credit,
					'false' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'true' AS is_cancelled_receipt
				FROM
					ums.cancelled_receipt_no AS crn
		
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((@date_start IS NULL) OR (@date_end IS NULL)) AND			-- (101)
				(NOT ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				WHERE
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
		
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (110)
				(ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--CANCELLED RECEIPTS
					0 AS payment_id,
					'CANCELLED RECEIPT' AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					crn.receipt_date AS received_date,
					crn.receipt_no AS receipt_no,
					0.00 AS amount,
					NULL AS sysid_account_credit,
					'false' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'true' AS is_cancelled_receipt
				FROM
					ums.cancelled_receipt_no AS crn
				WHERE
					(crn.receipt_date BETWEEN @date_start AND @date_end)
		
		END
		ELSE IF (ISNULL(@query_string, '') = '%*%') AND ((NOT @date_start IS NULL) AND (NOT @date_end IS NULL)) AND			-- (111)
				(NOT ISNULL(@sysid_account_credit_list, '') = '') 
		BEGIN
		
			INSERT INTO @payments_miscellaneous_income (payment_id, received_from, sysid_student, sysid_employee, received_date, receipt_no, amount, 
														sysid_account_credit, is_student_payment, is_miscellaneous_income, is_cancelled_receipt)
				SELECT	--STUDENT PAYMENTS
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'true' AS is_student_payment,
					'false' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 0) AND				
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--STUDENT PAYMENTS THAT IS CONSIDERED AS MISCELLANEOUS INCOME
					stp.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					stp.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					stp.created_on AS received_date,
					stp.receipt_no AS receipt_no,
					stp.amount AS amount,
					stp.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.student_payments AS stp
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = stp.sysid_account_credit
				INNER JOIN ums.student_information AS si ON si.sysid_student = stp.sysid_student
				INNER JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(stp.receipt_date BETWEEN @date_start AND @date_end) AND
					(stp.is_miscellaneous_income = 1) AND
					(NOT stp.sysid_account_credit IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO STUDENT
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + si.student_id + ')' AS received_from,
					mci.sysid_student AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.student_information AS si ON si.sysid_student = mci.sysid_student
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = si.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(NOT mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME RELATED TO EMPLOYEE
					mci.payment_id AS payment_id,
					pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') + '  (' + epi.employee_id + ')' AS received_from,
					NULL AS sysid_student,
					mci.sysid_employee AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				LEFT JOIN ums.employee_information AS epi ON epi.sysid_employee = mci.sysid_employee
				LEFT JOIN ums.person_information AS pri ON pri.sysid_person = epi.sysid_person
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(NOT mci.sysid_employee IS NULL)
				UNION ALL
				SELECT	--MISCELLANEOUS INCOME NOT RELATED TO A STUDENT OR AN EMPLOYEE
					mci.payment_id AS payment_id,
					mci.received_from AS received_from,
					NULL AS sysid_student,
					NULL AS sysid_employee,
					mci.created_on AS received_date,
					mci.receipt_no AS receipt_no,
					mci.amount AS amount,
					mci.sysid_account_credit AS sysid_account_credit,
					'false' AS is_student_payment,
					'true' AS is_miscellaneous_income,
					'false' AS is_cancelled_receipt
				FROM
					ums.miscellaneous_income AS mci
				INNER JOIN ums.IterateListToTable (@sysid_account_credit_list, ',') AS sac_list ON sac_list.var_str = mci.sysid_account_credit
				WHERE
					(mci.receipt_date BETWEEN @date_start AND @date_end) AND
					(NOT mci.sysid_account_credit IS NULL) AND
					(mci.sysid_student IS NULL) AND
					(mci.sysid_employee IS NULL)
					
		END
		

		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end) AND
			(pmi.is_student_payment = 1)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end) AND
			(pmi.is_student_payment = 1)        
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(max_pmi.is_student_payment = 1) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN @payments_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id 
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end) AND
												(ex_pmi.is_student_payment = 1)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end) AND
			(pmi.is_student_payment = 1)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(max_pmi.is_student_payment = 1) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN @payments_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end) AND
												(ex_pmi.is_student_payment = 1)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end) AND
			(pmi.is_student_payment = 1)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(sec.sysid_enrolmentcourse IS NULL) AND
			(pmi.is_student_payment = 1)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(del_sel.is_marked_deleted = 1) AND
				(del_pmi.is_student_payment = 1) AND
				(NOT del_pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
													DISTINCT not_pmi.sysid_student AS sysid_student
												FROM
													@payments_miscellaneous_income AS not_pmi
												INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
												INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
												WHERE 
													(not_sel.is_marked_deleted = 0) AND
													(not_pmi.is_student_payment = 1)))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		WHERE
			(pmi.is_student_payment = 1)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(pmi.is_student_payment = 1) AND
			(NOT pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										@payments_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
									INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
									INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
									WHERE
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 0) AND 
										(not_sel.sysid_semester IS NULL) AND
										(not_pmi.is_student_payment = 1) AND 
										((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
									UNION ALL
									SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										@payments_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
									INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
									WHERE
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 1) AND 
										(NOT not_sel.sysid_semester IS NULL) AND
										(not_pmi.is_student_payment = 1) AND 
										((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,					
			summary_coa.sysid_account AS sysid_account_summary,	
			summary_coa.account_code AS account_code_summary,	
			summary_coa.account_name AS account_name_summary,	
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_pmi.is_student_payment = 1) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												@payments_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND
												(not_pmi.is_student_payment = 1) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												@payments_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND
												(not_pmi.is_student_payment = 1) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no	
		WHERE
			(pmi.is_student_payment = 1)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id 
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND 
			(pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT IS ENROLLED WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)		
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND 
			(pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SCHOOL YEAR)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee
		INNER JOIN ums.school_year AS sy ON sy.year_id = sfi.year_id
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id	
			INNER JOIN ums.school_fee_information AS max_sfi ON max_sfi.sysid_schoolfee = max_sfl.sysid_schoolfee
			INNER JOIN ums.school_year AS max_sy ON max_sy.year_id = max_sfi.year_id
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 0) AND 
				(max_sel.sysid_semester IS NULL) AND
				(max_pmi.is_miscellaneous_income = 1) AND 
				(max_pmi.received_date > max_sy.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN @payments_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.school_fee_information AS ex_sfi ON ex_sfi.sysid_schoolfee = ex_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS ex_sy ON ex_sy.year_id = ex_sfi.year_id
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 0) AND 
												(ex_sel.sysid_semester IS NULL) AND
												(ex_pmi.is_miscellaneous_income = 1) AND 
												(ex_pmi.received_date BETWEEN ex_sy.date_start AND ex_sy.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 0) AND 
			(sel.sysid_semester IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND 
			(NOT pmi.received_date BETWEEN sy.date_start AND sy.date_end)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT WITH NO ENROLMENT WITHIN THE RANGE OF THE RECEIVED DATE (SEMESTER)			
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
		INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
		INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
		INNER JOIN ums.semester_information AS sri ON sri.sysid_semester = sel.sysid_semester
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT BECAUSE WE NEED THE LAST ENROLMENT LEVEL PRIOR
		(			--TO THE RECEIVED DATE BECAUSE OF THE FACT THAT THERE IS NO ENROLMENT LEVEL WITHIN THE RANGE OF THE RECEIVED DATE

			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			INNER JOIN ums.school_fee_level AS max_sfl ON max_sfl.sysid_feelevel = max_sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS max_yli ON max_yli.year_level_id = max_sfl.year_level_id	
			INNER JOIN ums.course_group AS max_cg ON max_cg.course_group_id = max_yli.course_group_id
			INNER JOIN ums.semester_information AS max_sri ON max_sri.sysid_semester = max_sel.sysid_semester
			WHERE
				(NOT max_pmi.sysid_student IS NULL) AND
				(max_sel.is_marked_deleted = 0) AND
				(max_cg.is_semestral = 1) AND 
				(NOT max_sel.sysid_semester IS NULL) AND
				(max_pmi.is_miscellaneous_income = 1) AND 
				(max_pmi.received_date > max_sri.date_start) AND
				(NOT max_pmi.payment_id IN (SELECT		--DETERMINE THE PAYMENT THAT WILL BE EXCLUDED OF THE STUDENT THAT HAS AN ENROLMENT LEVEL IN RANGE WITH THE RECEIVED DATE
												DISTINCT ex_pmi.payment_id AS payment_id
											FROM
												ums.student_enrolment_level AS ex_sel
											INNER JOIN ums.student_enrolment_course AS ex_sec ON ex_sec.sysid_enrolmentcourse = ex_sel.sysid_enrolmentcourse
											INNER JOIN @payments_miscellaneous_income AS ex_pmi ON ex_pmi.sysid_student = ex_sec.sysid_student
											INNER JOIN ums.school_fee_level AS ex_sfl ON ex_sfl.sysid_feelevel = ex_sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS ex_yli ON ex_yli.year_level_id = ex_sfl.year_level_id
											INNER JOIN ums.course_group AS ex_cg ON ex_cg.course_group_id = ex_yli.course_group_id
											INNER JOIN ums.semester_information AS ex_sri ON ex_sri.sysid_semester = ex_sel.sysid_semester
											WHERE
												(NOT ex_pmi.sysid_student IS NULL) AND
												(ex_sel.is_marked_deleted = 0) AND
												(ex_cg.is_semestral = 1) AND 
												(NOT ex_sel.sysid_semester IS NULL) AND
												(ex_pmi.is_miscellaneous_income = 1) AND 
												(ex_pmi.received_date BETWEEN ex_sri.date_start AND ex_sri.date_end)))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(sel.is_marked_deleted = 0) AND
			(cg.is_semestral = 1) AND 
			(NOT sel.sysid_semester IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND 
			(NOT pmi.received_date BETWEEN sri.date_start AND sri.date_end)		
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) NO COURSE AND LEVEL
			coa.account_code AS account_code,			
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		LEFT JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND
			(sec.sysid_enrolmentcourse IS NULL)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS STUDENT PAYMENTS AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH DELETED LEVEL
			coa.account_code AS account_code,			--1) WITH COURSE NO YEAR LEVEL 2) WITH COURSE WITH YEAR LEVEL
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED
		(
			SELECT
				del_pmi.sysid_student AS sysid_student,
				MAX(del_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS del_sel
			INNER JOIN ums.student_enrolment_course AS del_sec ON del_sec.sysid_enrolmentcourse = del_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS del_pmi ON del_pmi.sysid_student = del_sec.sysid_student
			WHERE
				(NOT del_pmi.sysid_student IS NULL) AND
				(del_sel.is_marked_deleted = 1) AND
				(del_pmi.is_miscellaneous_income = 1) AND
				(NOT del_pmi.sysid_student IN (SELECT		--TO EXCLUDE THE STUDENT IF HE/SHE HAS AN ENROLMENT LEVEL THAT IS NOT DELETED
													DISTINCT not_pmi.sysid_student AS sysid_student
												FROM
													@payments_miscellaneous_income AS not_pmi
												INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
												INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
												WHERE 
													(not_sel.is_marked_deleted = 0) AND
													(not_pmi.is_miscellaneous_income = 1)))
			GROUP BY
				del_pmi.sysid_student

		) AS deleted_sel ON deleted_sel.enrolment_level_no = sel.enrolment_level_no	
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(pmi.is_miscellaneous_income = 1)
		UNION ALL
		SELECT											--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND A STUDENT THAT HAS 
			coa.sysid_account AS sysid_account,			--A COURSE BUT NO ENROLMENT LEVEL
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		LEFT JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(NOT sec.sysid_enrolmentcourse IS NULL) AND
			(sel.sysid_enrolmentlevel IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND
			(NOT pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										@payments_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
									INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
									INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
									WHERE
										(NOT not_pmi.sysid_student IS NULL) AND
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 0) AND 
										(not_sel.sysid_semester IS NULL) AND
										(not_pmi.is_miscellaneous_income = 1) AND 
										((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
									UNION ALL
									SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
										DISTINCT not_pmi.payment_id AS payment_id
									FROM
										@payments_miscellaneous_income AS not_pmi
									INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
									INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
									INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
									INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
									INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
									INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
									WHERE
										(NOT not_pmi.sysid_student IS NULL) AND
										(not_sel.is_marked_deleted = 0) AND
										(not_cg.is_semestral = 1) AND 
										(NOT not_sel.sysid_semester IS NULL) AND
										(not_pmi.is_miscellaneous_income = 1) AND 
										((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
		UNION ALL
		SELECT													--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME AND THE PAYMENT IS BEFORE THE FIRST COURSE AND YEAR LEVEL HAS BEEN
			coa.sysid_account AS sysid_account,					--DEFINED. EX (Payment Received: OCTOBER  Course and Year Level: NOVEMBER --> This payment is received as
			coa.account_code AS account_code,					--a downpayment for the enrolment for second semester and the student is a new student
			coa.account_name AS account_name,					
			summary_coa.sysid_account AS sysid_account_summary,	
			summary_coa.account_code AS account_code_summary,	
			summary_coa.account_name AS account_name_summary,	
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			ci.course_id AS course_department_id,
			ci.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = pmi.sysid_student
		INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
		INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
		INNER JOIN --GET THE MAXIMUM ENROLMENT LEVEL NO OF THE STUDENT ENROLMENT LEVEL NO THAT HAS BEEN DELETED OR THE FIRST AND ONLY LEVEL CREATED
		(					
			SELECT
				max_pmi.sysid_student AS sysid_student,
				MAX(max_sel.enrolment_level_no) AS enrolment_level_no
			FROM
				ums.student_enrolment_level AS max_sel
			INNER JOIN ums.student_enrolment_course AS max_sec ON max_sec.sysid_enrolmentcourse = max_sel.sysid_enrolmentcourse
			INNER JOIN @payments_miscellaneous_income AS max_pmi ON max_pmi.sysid_student = max_sec.sysid_student
			WHERE
				(max_sel.is_marked_deleted = 0) AND
				(max_pmi.is_miscellaneous_income = 1) AND
				(NOT max_pmi.payment_id IN (SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (YEARLY)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												@payments_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id	
											INNER JOIN ums.school_fee_information AS not_sfi ON not_sfi.sysid_schoolfee = not_sfl.sysid_schoolfee
											INNER JOIN ums.school_year AS not_sy ON not_sy.year_id = not_sfi.year_id
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 0) AND 
												(not_sel.sysid_semester IS NULL) AND
												(not_pmi.is_miscellaneous_income = 1) AND 
												((not_pmi.received_date > not_sy.date_start) OR (not_pmi.received_date BETWEEN not_sy.date_start AND not_sy.date_end))
											UNION ALL
											SELECT		--TO EXCLUDE THE PAYMENTS THAT HAS AN ENROLMENT LEVEL THAT IS NOT MARKED DELETED (SEMESTRAL)
												DISTINCT not_pmi.payment_id AS payment_id
											FROM
												@payments_miscellaneous_income AS not_pmi
											INNER JOIN ums.student_enrolment_course AS not_sec ON not_sec.sysid_student = not_pmi.sysid_student
											INNER JOIN ums.student_enrolment_level AS not_sel ON not_sel.sysid_enrolmentcourse = not_sec.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS not_sfl ON not_sfl.sysid_feelevel = not_sel.sysid_feelevel	
											INNER JOIN ums.year_level_information AS not_yli ON not_yli.year_level_id = not_sfl.year_level_id	
											INNER JOIN ums.course_group AS not_cg ON not_cg.course_group_id = not_yli.course_group_id
											INNER JOIN ums.semester_information AS not_sri ON not_sri.sysid_semester = not_sel.sysid_semester
											WHERE
												(not_sel.is_marked_deleted = 0) AND
												(not_cg.is_semestral = 1) AND 
												(NOT not_sel.sysid_semester IS NULL) AND
												(not_pmi.is_miscellaneous_income = 1) AND 
												((not_pmi.received_date > not_sri.date_start) OR (not_pmi.received_date BETWEEN not_sri.date_start AND not_sri.date_end))))
			GROUP BY
				max_pmi.sysid_student

		) AS maximum_sel ON maximum_sel.enrolment_level_no = sel.enrolment_level_no		
		WHERE
			(NOT pmi.sysid_student IS NULL) AND
			(pmi.is_miscellaneous_income = 1)
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	RELATED TO AN EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_employee AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			di.department_id AS course_department_id,
			di.acronym AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account		
		INNER JOIN ums.salary_information AS si ON si.sysid_employee = pmi.sysid_employee
		INNER JOIN ums.department_information AS di ON di.department_id = si.department_id
		WHERE
			(NOT pmi.sysid_employee IS NULL) AND
			(pmi.is_miscellaneous_income = 1) AND
			(si.effectivity_date = (SELECT MAX(effectivity_date) FROM ums.salary_information WHERE sysid_employee = pmi.sysid_employee AND
												effectivity_date <= pmi.received_date))
		UNION ALL
		SELECT		--PAYMENTS RECEIVED AS MISCELLANEOUS INCOME	NOT RELATED TO A STUDENT OR EMPLOYEE INFORMATION	
			coa.sysid_account AS sysid_account,
			coa.account_code AS account_code,
			coa.account_name AS account_name,	
			summary_coa.sysid_account AS sysid_account_summary,
			summary_coa.account_code AS account_code_summary,
			summary_coa.account_name AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			NULL AS course_department_id,
			NULL AS acronym
		FROM
			ums.chart_of_accounts AS coa
		LEFT JOIN ums.chart_of_accounts AS summary_coa ON summary_coa.sysid_account = coa.summary_account
		INNER JOIN @payments_miscellaneous_income AS pmi ON pmi.sysid_account_credit = coa.sysid_account
		WHERE
			(pmi.sysid_student IS NULL) AND
			(pmi.sysid_employee IS NULL) AND
			(pmi.is_miscellaneous_income = 1)
		UNION ALL
		SELECT		--RECEIPT NO. THAT HAS BEEN CANCELLED	
			NULL AS sysid_account,
			'CANCELLED' AS account_code,
			crn.remarks AS account_name,	
			NULL AS sysid_account_summary,
			NULL AS account_code_summary,
			NULL AS account_name_summary,
			pmi.received_from AS received_from,
			pmi.sysid_student AS sysid_student_employee,	
			pmi.received_date AS received_date,
			pmi.receipt_no AS receipt_no,		
			pmi.amount AS amount,
			pmi.is_miscellaneous_income AS is_miscellaneous_income,		
			'CANCELLED' AS course_department_id,
			'CANCELLED' AS acronym
		FROM
			@payments_miscellaneous_income AS pmi
		INNER JOIN ums.cancelled_receipt_no AS crn ON crn.receipt_no = pmi.receipt_no
		WHERE
			(pmi.is_cancelled_receipt = 1)
		ORDER BY
			pmi.receipt_no ASC, pmi.received_date ASC
	END	
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a miscellaneous income', 'Miscellaneous Income'
	END
	
GO
------------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByQueryStringDateStartEndCashReceiptsQueryStudentPaymentMiscellaneousIncome TO db_umsusers
GO
-------------------------------------------------------------


-- ##############################################END TABLE "miscellaneous_income" OBJECTS######################################################







-- ################################################TABLE "enrolment_course_major" OBJECTS######################################################

--verifies that the trigger "Enrolment_Course_Major_Trigger_Insert" already exist
IF OBJECT_ID ('ums.Enrolment_Course_Major_Trigger_Insert','TR') IS NOT NULL
   DROP TRIGGER ums.Enrolment_Course_Major_Trigger_Insert
GO

CREATE TRIGGER ums.Enrolment_Course_Major_Trigger_Insert
	ON  ums.enrolment_course_major
	FOR INSERT
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE	@course_major_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @major_information_id varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)

	DECLARE @created_by varchar (50)

	DECLARE @year_semester_description varchar (100)
	
	SELECT 
		@course_major_id = i.course_major_id,
		@sysid_enrolmentlevel = i.sysid_enrolmentlevel,
		@major_information_id = i.major_information_id,
		@sysid_semester = sel.sysid_semester,
		@is_semestral = cg.is_semestral,
		@year_id = sfi.year_id,
		@created_by = i.created_by
	FROM INSERTED AS i	
	INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = i.sysid_enrolmentlevel
	INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
	INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
	INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
	INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee

	SET @year_semester_description = ''

	IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
	BEGIN
		SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
	END
	ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
	BEGIN
		SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
		FROM 
			ums.semester_information AS si
		INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
		INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
		WHERE 
			si.sysid_semester = @sysid_semester
	END

	SET @transaction_done = 'CREATED a new student enrolment course major ' + 
							'[Course Major ID: ' + ISNULL(CONVERT(varchar, @course_major_id), '') +
							'][Student ID: ' + ISNULL((SELECT 
															si.student_id 
														FROM 
															ums.student_information AS si 
														INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
														INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
														WHERE 
															(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +
							'][Student Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +
							'][Course Title: ' + ISNULL((SELECT 
																ci.course_title 
															FROM 
																ums.course_information AS ci
															INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +	
							'][Course Major: ' + ISNULL((SELECT
																cmi.course_major_title
															FROM
																ums.course_major_information AS cmi
															WHERE
																(cmi.major_information_id = @major_information_id)), '') +
							'][Course Level: ' + ISNULL((SELECT 
																yli.year_level_description + ' (' + cg.group_description + ')'
															FROM 
																ums.year_level_information AS yli 
															INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
															INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
															WHERE 
																(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +							
							'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
							']'

	IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
	BEGIN
		SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @created_by
	END
			
	EXECUTE ums.InsertTransactionLog @created_by, @network_information, @transaction_done	

GO
-----------------------------------------------------------------

-- verifies that the trigger "Enrolment_Course_Major_Trigger_Instead_Update" already exist
IF OBJECT_ID ('ums.Enrolment_Course_Major_Trigger_Instead_Update','TR') IS NOT NULL
   DROP TRIGGER ums.Enrolment_Course_Major_Trigger_Instead_Update
GO

CREATE TRIGGER ums.Enrolment_Course_Major_Trigger_Instead_Update
	ON  ums.enrolment_course_major
	INSTEAD OF UPDATE
	NOT FOR REPLICATION
AS 

	DECLARE	@course_major_id bigint
	DECLARE @is_current_major bit

	DECLARE @edited_by varchar (50)

	DECLARE enrolment_course_major_update_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT i.course_major_id, i.is_current_major, i.edited_by
				FROM INSERTED AS i

	OPEN enrolment_course_major_update_cursor

	FETCH NEXT FROM enrolment_course_major_update_cursor
		INTO @course_major_id, @is_current_major, @edited_by

	WHILE @@FETCH_STATUS = 0
	BEGIN		

		--used for the delete trigger
		IF NOT @edited_by IS NULL
		BEGIN

			UPDATE ums.enrolment_course_major SET
				is_current_major = @is_current_major,
				edited_on = GETDATE(),
				edited_by = @edited_by
			WHERE
				course_major_id = @course_major_id
		END	
		
		FETCH NEXT FROM enrolment_course_major_update_cursor
			INTO @course_major_id, @is_current_major, @edited_by

	END

	CLOSE enrolment_course_major_update_cursor
	DEALLOCATE enrolment_course_major_update_cursor
	
GO
-------------------------------------------------------------------------

--verifies that the trigger "Enrolment_Course_Major_Trigger_Delete" already exist
IF OBJECT_ID ('ums.Enrolment_Course_Major_Trigger_Delete','TR') IS NOT NULL
   DROP TRIGGER ums.Enrolment_Course_Major_Trigger_Delete
GO

CREATE TRIGGER ums.Enrolment_Course_Major_Trigger_Delete
	ON  ums.enrolment_course_major
	FOR DELETE 
	NOT FOR REPLICATION
AS 

	DECLARE @network_information varchar (MAX)
	DECLARE @transaction_done varchar(MAX)

	DECLARE	@course_major_id bigint
	DECLARE @sysid_enrolmentlevel varchar (50)
	DECLARE @major_information_id varchar (50)

	DECLARE @is_semestral bit	
	DECLARE @year_id varchar (50)
	DECLARE @sysid_semester varchar (50)

	DECLARE @deleted_by varchar (50)

	DECLARE @year_semester_description varchar (100)

	DECLARE enrolment_course_major_delete_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
		FOR SELECT d.course_major_id, d.sysid_enrolmentlevel, d.major_information_id, sel.sysid_semester,
				cg.is_semestral, sfi.year_id, d.edited_by
			FROM DELETED AS d
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = d.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.course_information AS ci ON ci.course_id = sec.course_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = ci.course_group_id
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.school_fee_information AS sfi ON sfi.sysid_schoolfee = sfl.sysid_schoolfee

	OPEN enrolment_course_major_delete_cursor

	FETCH NEXT FROM enrolment_course_major_delete_cursor
		INTO @course_major_id, @sysid_enrolmentlevel, @major_information_id, @sysid_semester,
				@is_semestral, @year_id, @deleted_by

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SET @year_semester_description = ''

		IF (@is_semestral = 0) AND (NOT @year_id IS NULL)
		BEGIN
			SELECT @year_semester_description = year_description FROM ums.school_year WHERE year_id = @year_id
		END
		ELSE IF (@is_semestral = 1) AND (NOT @sysid_semester IS NULL)
		BEGIN
			SELECT @year_semester_description = sy.year_description + ' - ' + ss.semester_description
			FROM 
				ums.semester_information AS si
			INNER JOIN ums.school_year AS sy ON sy.year_id = si.year_id
			INNER JOIN ums.school_semester AS ss ON ss.semester_id = si.semester_id
			WHERE 
				si.sysid_semester = @sysid_semester
		END

		SET @transaction_done = 'DELETED a student enrolment course major ' + 
								'[Course Major ID: ' + ISNULL(CONVERT(varchar, @course_major_id), '') +
								'][Student ID: ' + ISNULL((SELECT 
																si.student_id 
															FROM 
																ums.student_information AS si 
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +
								'][Student Name: ' + ISNULL((SELECT 
																pri.last_name + ', ' + pri.first_name + ' ' + ISNULL(pri.middle_name, '') 
															FROM 
																ums.person_information AS pri
															INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
															INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_student = si.sysid_student
															INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
															WHERE 
																(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +
								'][Course Title: ' + ISNULL((SELECT 
																	ci.course_title 
																FROM 
																	ums.course_information AS ci
																INNER JOIN ums.student_enrolment_course AS sec ON sec.course_id = ci.course_id
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentcourse = sec.sysid_enrolmentcourse
																WHERE 
																	(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +	
								'][Course Major: ' + ISNULL((SELECT
																	cmi.course_major_title
																FROM
																	ums.course_major_information AS cmi
																WHERE
																	(cmi.major_information_id = @major_information_id)), '') +
								'][Course Level: ' + ISNULL((SELECT 
																	yli.year_level_description + ' (' + cg.group_description + ')'
																FROM 
																	ums.year_level_information AS yli 
																INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id	
																INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
																INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel													
																WHERE 
																	(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel)), '') +							
								'][School Year / Semester: ' + ISNULL(@year_semester_description, '') +	
								']'

		IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE NAME = '##ums_network_information_table')
		BEGIN
			SELECT @network_information = network_information FROM ##ums_network_information_table WHERE system_user_id = @deleted_by
		END
				
		EXECUTE ums.InsertTransactionLog @deleted_by, @network_information, @transaction_done	

		FETCH NEXT FROM enrolment_course_major_delete_cursor
			INTO @course_major_id, @sysid_enrolmentlevel, @major_information_id, @sysid_semester,
					@is_semestral, @year_id, @deleted_by
	END

	CLOSE enrolment_course_major_delete_cursor
	DEALLOCATE enrolment_course_major_delete_cursor

GO
-----------------------------------------------------------------
-- ##############################################END TABLE "enrolment_course_major" OBJECTS######################################################





-- ################################################TABLE "campus_access_details" OBJECTS######################################################

-- verifies if the procedure "InsertCampusAccessDetails" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'InsertCampusAccessDetails')
   DROP PROCEDURE ums.InsertCampusAccessDetails
GO

CREATE PROCEDURE ums.InsertCampusAccessDetails

	@sysid_person varchar (50) = '',
	@access_date_time datetime,
	@access_point_id varchar (50) = '',

	@network_information varchar (MAX) = '',
	@created_by varchar (50) = ''	
		
AS

	IF (ums.IsSystemAdminSystemUserInfo(@created_by) = 1) OR (ums.IsGateKeepersSystemUserInfo(@created_by) = 1)
	BEGIN

		INSERT INTO ums.campus_access_details
		(
			sysid_person,
			access_date_time,
			access_point_id,

			created_by
		)
		VALUES
		(
			@sysid_person,
			@access_date_time,
			@access_point_id,

			@created_by
		)	
		
	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Create a new campus access details', 'Campus Access Details'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.InsertCampusAccessDetails TO db_umsusers
GO
-------------------------------------------------------------

-- verifies if the procedure "SelectByPersonSysIDListDateStartEndCampusAccessDetails" exist
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_SCHEMA = N'ums' AND SPECIFIC_NAME = N'SelectByPersonSysIDListDateStartEndCampusAccessDetails')
   DROP PROCEDURE ums.SelectByPersonSysIDListDateStartEndCampusAccessDetails
GO

CREATE PROCEDURE ums.SelectByPersonSysIDListDateStartEndCampusAccessDetails

	@sysid_person_list nvarchar (MAX) = '',
	@date_start datetime,
	@date_end datetime,

	@system_user_id varchar (50) = ''

AS

	IF (ums.IsActiveSystemUserInfo(@system_user_id) = 1)
	BEGIN
		
		SELECT 
			cad.details_id AS details_id,
			cad.access_date_time AS access_date_time,
			api.access_description AS access_description
		FROM 
			ums.campus_access_details AS cad
		INNER JOIN ums.IterateListToTable (@sysid_person_list, ',') AS sp_list ON sp_list.var_str = cad.sysid_person
		INNER JOIN ums.access_point_information AS api ON api.access_point_id = cad.access_point_id
		WHERE
			(cad.access_date_time BETWEEN @date_start AND @date_end)
		ORDER BY
			cad.access_date_time ASC

	END
	ELSE
	BEGIN
		EXECUTE ums.ShowErrorMsg 'Query a campus access details', 'Campus Access Details'
	END
	
GO
---------------------------------------------------------

-- grant permission on the stored procedure
GRANT EXECUTE ON ums.SelectByPersonSysIDListDateStartEndCampusAccessDetails TO db_umsusers
GO
-------------------------------------------------------------

-- ##############################################END TABLE "campus_access_details" OBJECTS######################################################





-- ################################################TABLE "school_fee_details" OBJECTS######################################################


-- verifies if the "GetBySysIDStudentFeeLevelSemesterFeeDetails" function already exist
IF OBJECT_ID (N'ums.GetBySysIDStudentFeeLevelSemesterFeeDetails') IS NOT NULL
   DROP FUNCTION ums.GetBySysIDStudentFeeLevelSemesterFeeDetails
GO

CREATE FUNCTION ums.GetBySysIDStudentFeeLevelSemesterFeeDetails
(	
	@sysid_student varchar (50) = '',
	@sysid_enrolmentlevel varchar (50) = '',
	@sysid_feelevel varchar (50) = '',
	@sysid_semester varchar (50) = '',
	@is_graduate_student bit = 0,
	@is_international bit = 0,		
	@is_enrolled bit = 0,
	@is_marked_deleted bit = 0
) 
RETURNS @return_table TABLE (table_id int IDENTITY(1, 1) NOT NULL PRIMARY KEY,
								sysid_enrolmentlevel varchar (50) NULL,
								sysid_feedetails varchar (50) NULL,
								sysid_feeparticular varchar (50) NOT NULL,
								is_level_increase bit NOT NULL DEFAULT (0),
								is_added_level_fee bit NOT NULL DEFAULT (0),
								amount decimal (12, 2) NOT NULL,
								fee_category_id varchar (50) NOT NULL,
								category_description varchar (100) NOT NULL,
								particular_description varchar (100) NOT NULL,								
								is_office_access bit NOT NULL DEFAULT (0),
								category_no tinyint NOT NULL,
								additional_fee_id bigint NULL,
								optional_fee_id bigint NULL,
								is_additional_fee bit NOT NULL DEFAULT (0),
								is_optional_fee bit NOT NULL DEFAULT (0),
								international_percentage float NULL,
								remarks varchar (100) NULL)
AS
BEGIN
	
	DECLARE @student_enrolment_level TABLE (table_id int IDENTITY(1, 1) NOT NULL PRIMARY KEY,
											sysid_enrolmentlevel varchar (50) NOT NULL, 
											sysid_feelevel varchar (50) NOT NULL, 
											is_entry_level bit NOT NULL DEFAULT (0), 
											enrolment_level_no int NOT NULL, 
											international_percentage float NULL)

	DECLARE @is_entry_level bit
	DECLARE @cursor_sysid_enrolmentlevel varchar (50)
	DECLARE @cursor_sysid_feelevel varchar (50)
	DECLARE @international_percentage float
	DECLARE @semester_id tinyint
	DECLARE @gender_flag tinyint

	-- A - is_enrolled
	-- B - sysid_enrolmentlevel
	-- C - is_marked_deleted

	--	A	B	C
	--	==========
	--	0	0	0	used to get the charges of a level that is candidate for enrolment
	--	0	0	1	NOT INCLUDED
	--	0	1	0	NOT INCLUDED
	--	0	1	1	NOT INCLUDED
	--	1	0	0	NOT INCLUDED
	--	1	0	1	NOT INCLUDED
	--	1	1	0	used to get the current charges of an enrolled level and previous charges of a deleted level
	--	1	1	1	used to get the current charges of a deleted level

	IF (@is_enrolled = 0) AND (ISNULL(@sysid_enrolmentlevel, '') = '') AND (@is_marked_deleted = 0)			-- (000)
	BEGIN		

		--gets the student enrolment levels within a certain course group and with year level no. lesser or equal to the sysid_feelevel parameter
		INSERT INTO @student_enrolment_level(sysid_enrolmentlevel, sysid_feelevel, is_entry_level, enrolment_level_no, international_percentage)
			SELECT
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.is_entry_level AS is_entry_level,
				sel.enrolment_level_no AS enrolment_level_no,
				fs.international_percentage AS international_percentage
			FROM
				ums.student_enrolment_level AS sel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
			WHERE
				(sec.sysid_student = @sysid_student) AND
				(sel.is_marked_deleted = 0) AND
				(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
											yli.year_level_no AS year_level_no
										FROM
											ums.year_level_information AS yli
										INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel)) AND	
				(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
											cg.course_group_id AS course_group_id
										FROM
											ums.course_group AS cg
										INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
										INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel)) AND
				(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
											sfl.fee_level_no AS fee_level_no
										FROM
											ums.school_fee_level AS sfl
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel))

		--gets the international percentage based on the entry level
		SELECT 
			@international_percentage = t_sel.international_percentage
		FROM
			@student_enrolment_level AS t_sel
		WHERE
			(t_sel.enrolment_level_no = (SELECT	--get the entry level
												MAX(t_sel.enrolment_level_no)
											FROM
												@student_enrolment_level AS t_sel
											WHERE
												t_sel.is_entry_level = 1))

		INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
										category_description, particular_description, is_office_access, category_no, international_percentage)
			SELECT 
				sel.sysid_enrolmentlevel,
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT @international_percentage IS NULL) AND
						(NOT @international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (@international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access,
				sfc.category_no,
				@international_percentage
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sel.enrolment_level_no = (SELECT	--get the entry level
												MAX(t_sel.enrolment_level_no)
											FROM
												@student_enrolment_level AS t_sel
											WHERE
												t_sel.is_entry_level = 1)) AND
				(sfd.is_optional = 0) AND
				(sfc.category_no IN (1, 2)) -- TUITION FEES AND MISCELLANEOUS FEES
			ORDER BY
				sfc.category_no, sfp.particular_description ASC			

		--iterates through each student enrolment levels already taken by the student
		DECLARE student_enrolment_level_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
			FOR SELECT
					sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
					sel.sysid_feelevel AS sysid_feelevel
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				WHERE
					(sec.sysid_student = @sysid_student) AND
					(sel.is_marked_deleted = 0) AND
					(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
												yli.year_level_no AS year_level_no
											FROM
												ums.year_level_information AS yli
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND	
					(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
												cg.course_group_id AS course_group_id
											FROM
												ums.course_group AS cg
											INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND
					(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
												sfl.fee_level_no AS fee_level_no
											FROM
												ums.school_fee_level AS sfl
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND
					(sel.enrolment_level_no > (SELECT
													MAX(sel.enrolment_level_no)
												FROM
													ums.student_enrolment_level AS sel
												INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
												INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
												INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
												INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
												WHERE
													(sec.sysid_student = @sysid_student) AND
													(sel.is_marked_deleted = 0) AND
													(sel.is_entry_level = 1) AND			--does not include the entry level
													(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
																				yli.year_level_no AS year_level_no
																			FROM
																				ums.year_level_information AS yli
																			INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel)) AND	
													(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
																				cg.course_group_id AS course_group_id
																			FROM
																				ums.course_group AS cg
																			INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
																			INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel)) AND
													(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
																				sfl.fee_level_no AS fee_level_no
																			FROM
																				ums.school_fee_level AS sfl
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel))))
				ORDER BY
					sel.enrolment_level_no ASC

		OPEN student_enrolment_level_cursor

		FETCH NEXT FROM student_enrolment_level_cursor
			INTO @cursor_sysid_enrolmentlevel, @cursor_sysid_feelevel

		WHILE @@FETCH_STATUS = 0
		BEGIN

			--determine if there is a miscellaneous fee that does not exists in the current entry level or it does not already exists on the 
			--certain level of the student 
			INSERT INTO @return_table(sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee,
									amount, fee_category_id, category_description, particular_description, is_office_access, category_no,
									international_percentage)
				SELECT 
					@cursor_sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular, 
					0,
					1,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END,
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access, 
					sfc.category_no,
					@international_percentage
				FROM 
					
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
					(sfd.is_optional = 0) AND
					(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
					(NOT sfd.sysid_feeparticular IN (SELECT
															sysid_feeparticular
														FROM
															@return_table))
				ORDER BY
					sfc.category_no, sfp.particular_description ASC


			--determine if the miscellaneous fee is a level increase
			UPDATE @return_table SET
				sysid_enrolmentlevel = @cursor_sysid_enrolmentlevel,
				sysid_feedetails = sfd.sysid_feedetails,
				is_level_increase = sfd.is_level_increase,
				is_office_access = sfd.is_office_access,
				amount = CASE WHEN 
								((@is_international = 1) AND
								(NOT @international_percentage IS NULL) AND
								(NOT @international_percentage <= 0))
							THEN
								(sfd.amount * 
								(1 + (@international_percentage / 100)))
							ELSE
								(sfd.amount)
							END		
			FROM
				@return_table AS rt
			INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id				
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
				(sfd.is_optional = 0) AND
				(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
				(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE

			FETCH NEXT FROM student_enrolment_level_cursor
				INTO @cursor_sysid_enrolmentlevel, @cursor_sysid_feelevel

		END

		CLOSE student_enrolment_level_cursor
		DEALLOCATE student_enrolment_level_cursor


		--#########FOR THE NEWLY SELECTED LEVEL AND IT DOES NOT BELONG TO THE LEVELS TAKEN BY THE STUDENT (SAVE NOT COMMITTED)########################
		--determine if there is a miscellaneous fee that does not exists in the current entry level or it does not already exists on the 
		--certain level of the student 
		INSERT INTO @return_table(sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee,
								amount, fee_category_id, category_description, particular_description, is_office_access, category_no,
								international_percentage)
			SELECT 
				@cursor_sysid_enrolmentlevel,
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				1,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT @international_percentage IS NULL) AND
						(NOT @international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (@international_percentage / 100)))
					ELSE
						(sfd.amount)
					END,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access, 
				sfc.category_no,
				@international_percentage
			FROM 
				
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sfl.sysid_feelevel = @sysid_feelevel) AND
				(sfd.is_optional = 0) AND
				(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
				(NOT sfd.sysid_feeparticular IN (SELECT
														sysid_feeparticular
													FROM
														@return_table))
			ORDER BY
				sfc.category_no, sfp.particular_description ASC


		--determine if the miscellaneous fee is a level increase
		UPDATE @return_table SET
			sysid_enrolmentlevel = @cursor_sysid_enrolmentlevel,
			sysid_feedetails = sfd.sysid_feedetails,
			is_level_increase = sfd.is_level_increase,
			is_office_access = sfd.is_office_access,
			amount = CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END		
		FROM
			@return_table AS rt
		INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id				
		WHERE
			(sfd.is_marked_deleted = 0) AND
			(sfl.sysid_feelevel = @sysid_feelevel) AND
			(sfd.is_optional = 0) AND
			(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
			(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE

		--################################################################################################################################################


		--if the school has an instance that higher levels have the tendency to eliminate a school fee based on an entry level
		DELETE FROM @return_table WHERE NOT sysid_feeparticular IN (SELECT 
																		sfd.sysid_feeparticular
																	FROM 
																		
																		ums.school_fee_details AS sfd
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
																	INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
																	INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
																	WHERE
																		(sfd.is_marked_deleted = 0) AND
																		(sfl.sysid_feelevel = @sysid_feelevel) AND
																		(sfd.is_optional = 0) AND
																		(sfc.category_no IN (1, 2))) -- TUITION FEES AND MISCELLANEOUS FEES
		

		--for the other fees, optional fees, and additional fees
		INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
										category_description, particular_description, is_office_access, category_no, additional_fee_id,
										optional_fee_id, is_additional_fee, is_optional_fee, international_percentage)
			SELECT					------------------------------no need for semestral comparison because school fee details is based yearly
				NULL,									----------no optional fee and additional fee because this level is not enrolled yet
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT @international_percentage IS NULL) AND
						(NOT @international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (@international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access,
				sfc.category_no,
				NULL,
				NULL,
				0,
				0,
				@international_percentage
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sfl.sysid_feelevel = @sysid_feelevel) AND
				(sfd.is_optional = 0) AND
				((sfd.is_graduation_fee = 1 AND @is_graduate_student = 1) OR (sfd.is_graduation_fee = 0)) AND
				(sfc.category_no IN (3)) -- OTHER FEES
			ORDER BY
				sfc.category_no, sfp.particular_description ASC

		--determine if the fees are included on a certain semester only
		SELECT 
			@semester_id = sri.semester_id
		FROM
			ums.semester_information AS sri
		WHERE
			sri.sysid_semester = @sysid_semester

		IF (NOT @semester_id IS NULL)
		BEGIN

			DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																			sfd.sysid_feeparticular
																		FROM 																		
																			ums.school_fee_details AS sfd
																		WHERE
																			(sfd.is_marked_deleted = 0) AND
																			(sfd.sysid_feelevel = @sysid_feelevel) AND
																			(((@semester_id = 1) AND (sfd.include_first_semester = 0)) OR
																			((@semester_id = 2) AND (sfd.include_second_semester = 0)) OR
																			((@semester_id = 3) AND (sfd.include_summer = 0))))) AND
											(is_optional_fee = 0) AND
											(is_additional_fee = 0)

		END

		--determine if the fees are for female or for male
		SELECT
			@gender_flag = crf.reference_flag
		FROM
			ums.code_reference AS crf
		INNER JOIN ums.person_information AS pri ON pri.gender_code = crf.code_reference_id
		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
		WHERE
			(si.sysid_student = @sysid_student)

		IF (NOT @gender_flag IS NULL)
		BEGIN

			DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																			sfd.sysid_feeparticular
																		FROM 																			
																			ums.school_fee_details AS sfd
																		WHERE
																			(sfd.is_marked_deleted = 0) AND
																			(sfd.sysid_feelevel = @sysid_feelevel) AND
																			(((@gender_flag = 1) AND (sfd.include_male = 0)) OR			--male
																			((@gender_flag = 2) AND (sfd.include_female = 0))))) AND	--female
											(is_optional_fee = 0) AND
											(is_additional_fee = 0)
		END
	
	END
	ELSE IF (@is_enrolled = 1) AND (NOT ISNULL(@sysid_enrolmentlevel, '') = '') AND (@is_marked_deleted = 0)		--	(110)
	BEGIN

		SELECT @is_entry_level = CASE WHEN ((SELECT 
													cg.is_semestral AS is_semestral
												FROM 
													ums.student_enrolment_level AS sel
												INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
												INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
												INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
												INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
												WHERE 
													(sec.sysid_student = @sysid_student) AND
													(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
													(sel.sysid_feelevel = @sysid_feelevel)) = 0)	-- no marked deleted to get the previous charges of deleted level
										THEN
											(SELECT 
													sel.is_entry_level 
												FROM 
													ums.student_enrolment_level AS sel
												INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
												INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
												INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
												INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
												WHERE 
													(sec.sysid_student = @sysid_student) AND
													(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
													(sel.sysid_feelevel = @sysid_feelevel) AND											
													(cg.is_semestral = 0))			-- no marked deleted to get the previous charges of deleted level
										ELSE
											(SELECT 
													sel.is_entry_level
												FROM 
													ums.student_enrolment_level AS sel
												INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
												INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
												INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
												INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
												WHERE 
													(sec.sysid_student = @sysid_student) AND
													(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
													(sel.sysid_feelevel = @sysid_feelevel) AND
													(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
													(sel.sysid_semester = @sysid_semester) AND
													(cg.is_semestral = 1))			-- no marked deleted to get the previous charges of deleted level
										END
		

		IF (@is_entry_level IS NULL)
		BEGIN
			SET @is_entry_level = 0
		END

		IF (@is_entry_level = 1)
		BEGIN

			INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
											category_description, particular_description, is_office_access, category_no, additional_fee_id,
											optional_fee_id, is_additional_fee, is_optional_fee, international_percentage, remarks)
				SELECT 
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular,
					0, 
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT fs.international_percentage IS NULL) AND
							(NOT fs.international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (fs.international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					NULL,
					0,
					0,
					fs.international_percentage,
					NULL
				FROM 
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					((sfd.is_optional = 1 AND sfd.is_entry_level_included = 1) OR (sfd.is_optional = 0)) AND
					((sfd.is_graduation_fee = 1 AND @is_graduate_student = 1) OR (sfd.is_graduation_fee = 0)) AND
					(cg.is_semestral = 0)		-- no marked deleted to get the previous charges of deleted level		
				UNION ALL
				SELECT 
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular, 
					0,
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT fs.international_percentage IS NULL) AND
							(NOT fs.international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (fs.international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description,  
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					NULL,
					0,
					0,
					fs.international_percentage,
					NULL
				FROM 
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(sel.sysid_semester = @sysid_semester) AND
					((sfd.is_optional = 1 AND sfd.is_entry_level_included = 1) OR (sfd.is_optional = 0)) AND
					((sfd.is_graduation_fee = 1 AND @is_graduate_student = 1) OR (sfd.is_graduation_fee = 0)) AND
					(cg.is_semestral = 1)		-- no marked deleted to get the previous charges of deleted level
				UNION ALL			------------------------------------------------insert the student optional fee
				SELECT
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular,
					0, 
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT fs.international_percentage IS NULL) AND
							(NOT fs.international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (fs.international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					sof.optional_fee_id,
					0,
					1,
					fs.international_percentage,
					NULL
				FROM 
					ums.student_optional_fee AS sof
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feedetails = sof.sysid_feedetails
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id			
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sof.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
				WHERE
					(sof.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(cg.is_semestral = 0)		-- no marked deleted to get the previous charges of deleted level
				UNION ALL
				SELECT
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular,
					0, 
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT fs.international_percentage IS NULL) AND
							(NOT fs.international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (fs.international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					sof.optional_fee_id,
					0,
					1,
					fs.international_percentage,
					NULL
				FROM 
					ums.student_optional_fee AS sof
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feedetails = sof.sysid_feedetails
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id			
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sof.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
				WHERE
					(sof.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(sel.sysid_semester = @sysid_semester) AND
					(cg.is_semestral = 1)		-- no marked deleted to get the previous charges of deleted level
				UNION ALL					---------------------------------------------insert the student additional fee
				SELECT															
					sel.sysid_enrolmentlevel,									
					NULL, 
					sfp.sysid_feeparticular,
					0, 
					0,
					saf.amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfp.is_office_access,
					sfc.category_no,
					saf.additional_fee_id,
					NULL,
					1,
					0,
					NULL AS international_percentage,
					saf.remarks
				FROM
					ums.student_additional_fee AS saf
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				WHERE
					(saf.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(cg.is_semestral = 0)		-- no marked deleted to get the previous charges of deleted level
				UNION ALL
				SELECT
					sel.sysid_enrolmentlevel,
					NULL, 
					sfp.sysid_feeparticular,
					0, 
					0,
					saf.amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfp.is_office_access,
					sfc.category_no,
					saf.additional_fee_id,
					NULL,
					1,
					0,
					NULL AS international_percentage,
					saf.remarks
				FROM
					ums.student_additional_fee AS saf
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				WHERE
					(saf.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(sel.sysid_semester = @sysid_semester) AND
					(cg.is_semestral = 1)		-- no marked deleted to get the previous charges of deleted level			
				ORDER BY
					sfc.category_no, sfp.particular_description ASC				

		END
		ELSE
		BEGIN

			--gets the student enrolment levels within a certain course group and with year level no. lesser or equal to the sysid_feelevel parameter
			INSERT INTO @student_enrolment_level(sysid_enrolmentlevel, sysid_feelevel, is_entry_level, enrolment_level_no, international_percentage)
				SELECT
					sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
					sel.sysid_feelevel AS sysid_feelevel,
					sel.is_entry_level AS is_entry_level,
					sel.enrolment_level_no AS enrolment_level_no,
					fs.international_percentage AS international_percentage
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
				WHERE
					(sec.sysid_student = @sysid_student) AND
					(sel.is_marked_deleted = 0) AND			--with is_marked_deleted to get the current level and the current entry level
					(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
												yli.year_level_no AS year_level_no
											FROM
												ums.year_level_information AS yli
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND	
					(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
												cg.course_group_id AS course_group_id
											FROM
												ums.course_group AS cg
											INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND
					(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
												sfl.fee_level_no AS fee_level_no
											FROM
												ums.school_fee_level AS sfl
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel))

			--gets the international percentage based on the entry level
			SELECT 
				@international_percentage = t_sel.international_percentage
			FROM
				@student_enrolment_level AS t_sel
			WHERE
				(t_sel.enrolment_level_no = (SELECT	--get the entry level
													MAX(t_sel.enrolment_level_no)
												FROM
													@student_enrolment_level AS t_sel
												WHERE
													t_sel.is_entry_level = 1))

			INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
											category_description, particular_description, is_office_access, category_no, international_percentage)
				SELECT 
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular, 
					0,
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount,
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					@international_percentage
				FROM 
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sel.enrolment_level_no = (SELECT	--get the entry level
													MAX(t_sel.enrolment_level_no)
												FROM
													@student_enrolment_level AS t_sel
												WHERE
													t_sel.is_entry_level = 1)) AND
					(sfd.is_optional = 0) AND
					(sfc.category_no IN (1, 2)) -- TUITION FEES AND MISCELLANEOUS FEES
				ORDER BY
					sfc.category_no, sfp.particular_description ASC			

			--iterates through each student enrolment levels already taken by the student
			--which is greater than the entry level specified previously on this code and 
			--lesser than the enrolment no based on the enrolment level that is used as
			--parameter for this function
			DECLARE student_enrolment_level_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
				FOR SELECT
						sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
						sel.sysid_feelevel AS sysid_feelevel
					FROM
						ums.student_enrolment_level AS sel
					INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
					INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
					INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
					WHERE
						(sec.sysid_student = @sysid_student) AND
						(sel.is_marked_deleted = 0) AND				--with is_marked_deleted to get the current level and the current entry level
						(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
													yli.year_level_no AS year_level_no
												FROM
													ums.year_level_information AS yli
												INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
												WHERE
													sfl.sysid_feelevel = @sysid_feelevel)) AND	
						(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
													cg.course_group_id AS course_group_id
												FROM
													ums.course_group AS cg
												INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
												INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
												WHERE
													sfl.sysid_feelevel = @sysid_feelevel)) AND
						(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
													sfl.fee_level_no AS fee_level_no
												FROM
													ums.school_fee_level AS sfl
												WHERE
													sfl.sysid_feelevel = @sysid_feelevel)) AND
						(sel.enrolment_level_no > (SELECT
														MAX(sel.enrolment_level_no)
													FROM
														ums.student_enrolment_level AS sel
													INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
													INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
													INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
													INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
													WHERE
														(sec.sysid_student = @sysid_student) AND
														(sel.is_marked_deleted = 0) AND
														(sel.is_entry_level = 1) AND			--does not include the entry level
														(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
																					yli.year_level_no AS year_level_no
																				FROM
																					ums.year_level_information AS yli
																				INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																				WHERE
																					sfl.sysid_feelevel = @sysid_feelevel)) AND	
														(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
																					cg.course_group_id AS course_group_id
																				FROM
																					ums.course_group AS cg
																				INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
																				INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																				WHERE
																					sfl.sysid_feelevel = @sysid_feelevel)) AND
														(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
																					sfl.fee_level_no AS fee_level_no
																				FROM
																					ums.school_fee_level AS sfl
																				WHERE
																					sfl.sysid_feelevel = @sysid_feelevel))))
					ORDER BY
						sel.enrolment_level_no ASC

			OPEN student_enrolment_level_cursor

			FETCH NEXT FROM student_enrolment_level_cursor
				INTO @cursor_sysid_enrolmentlevel, @cursor_sysid_feelevel

			WHILE @@FETCH_STATUS = 0
			BEGIN

				--determine if there is a miscellaneous fee that does not exists in the current entry level or it does not already exists on the 
				--certain level of the student 
				INSERT INTO @return_table(sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee,
										amount, fee_category_id, category_description, particular_description, is_office_access, category_no,
										international_percentage)
					SELECT 
						@cursor_sysid_enrolmentlevel,
						sfd.sysid_feedetails, 
						sfd.sysid_feeparticular, 
						0,
						1,
						CASE WHEN 
								((@is_international = 1) AND
								(NOT @international_percentage IS NULL) AND
								(NOT @international_percentage <= 0))
							THEN
								(sfd.amount * 
								(1 + (@international_percentage / 100)))
							ELSE
								(sfd.amount)
							END,
						sfp.fee_category_id,
						sfc.category_description, 
						sfp.particular_description, 
						sfd.is_office_access, 
						sfc.category_no,
						@international_percentage
					FROM 
						
						ums.school_fee_details AS sfd
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
					INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
					INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
					WHERE
						(sfd.is_marked_deleted = 0) AND
						(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
						(sfd.is_optional = 0) AND
						(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
						(NOT sfd.sysid_feeparticular IN (SELECT
																sysid_feeparticular
															FROM
																@return_table))
					ORDER BY
						sfc.category_no, sfp.particular_description ASC


				--determine if the miscellaneous fee is a level increase
				UPDATE @return_table SET
					sysid_enrolmentlevel = @cursor_sysid_enrolmentlevel,
					sysid_feedetails = sfd.sysid_feedetails,
					is_level_increase = sfd.is_level_increase,
					is_office_access = sfd.is_office_access,
					amount = CASE WHEN 
									((@is_international = 1) AND
									(NOT @international_percentage IS NULL) AND
									(NOT @international_percentage <= 0))
								THEN
									(sfd.amount * 
									(1 + (@international_percentage / 100)))
								ELSE
									(sfd.amount)
								END		
				FROM
					@return_table AS rt
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id				
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
					(sfd.is_optional = 0) AND
					(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
					(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE

				
				FETCH NEXT FROM student_enrolment_level_cursor
					INTO @cursor_sysid_enrolmentlevel, @cursor_sysid_feelevel

			END

			CLOSE student_enrolment_level_cursor
			DEALLOCATE student_enrolment_level_cursor	

			IF EXISTS (SELECT sysid_enrolmentlevel FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel AND is_marked_deleted = 1)
			BEGIN

				--IF THE LEVEL IS DELETED AND THE FUNCTION IS USED TO GET THE PREVIOUS CHARGES
				--determine if there is a miscellaneous fee that does not exists in the current entry level or it does not already exists on the 
				--certain level of the student 
				INSERT INTO @return_table(sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee,
										amount, fee_category_id, category_description, particular_description, is_office_access, category_no,
										international_percentage)
					SELECT 
						@cursor_sysid_enrolmentlevel,
						sfd.sysid_feedetails, 
						sfd.sysid_feeparticular, 
						0,
						1,
						CASE WHEN 
								((@is_international = 1) AND
								(NOT @international_percentage IS NULL) AND
								(NOT @international_percentage <= 0))
							THEN
								(sfd.amount * 
								(1 + (@international_percentage / 100)))
							ELSE
								(sfd.amount)
							END,
						sfp.fee_category_id,
						sfc.category_description, 
						sfp.particular_description, 
						sfd.is_office_access, 
						sfc.category_no,
						@international_percentage
					FROM 
						
						ums.school_fee_details AS sfd
					INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
					INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
					INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
					WHERE
						(sfd.is_marked_deleted = 0) AND
						(sfl.sysid_feelevel = @sysid_feelevel) AND
						(sfd.is_optional = 0) AND
						(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
						(NOT sfd.sysid_feeparticular IN (SELECT
																sysid_feeparticular
															FROM
																@return_table))
					ORDER BY
						sfc.category_no, sfp.particular_description ASC


				--determine if the miscellaneous fee is a level increase
				UPDATE @return_table SET
					sysid_enrolmentlevel = @cursor_sysid_enrolmentlevel,
					sysid_feedetails = sfd.sysid_feedetails,
					is_level_increase = sfd.is_level_increase,
					is_office_access = sfd.is_office_access,
					amount = CASE WHEN 
									((@is_international = 1) AND
									(NOT @international_percentage IS NULL) AND
									(NOT @international_percentage <= 0))
								THEN
									(sfd.amount * 
									(1 + (@international_percentage / 100)))
								ELSE
									(sfd.amount)
								END		
				FROM
					@return_table AS rt
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id				
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @sysid_feelevel) AND
					(sfd.is_optional = 0) AND
					(sfc.category_no IN (1, 2)) AND -- TUITION FEES AND MISCELLANEOUS FEES
					(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE


			END

			--if the school has an instance that higher levels have the tendency to eliminate a school fee based on an entry level
			DELETE FROM @return_table WHERE NOT sysid_feeparticular IN (SELECT 
																			sfd.sysid_feeparticular
																		FROM 
																			
																			ums.school_fee_details AS sfd
																		INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
																		INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
																		INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
																		WHERE
																			(sfd.is_marked_deleted = 0) AND
																			(sfl.sysid_feelevel = @sysid_feelevel) AND
																			(sfd.is_optional = 0) AND
																			(sfc.category_no IN (1, 2))) -- TUITION FEES AND MISCELLANEOUS FEES

			--for the other fees, optional fees, and additional fees
			INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
											category_description, particular_description, is_office_access, category_no, additional_fee_id,
											optional_fee_id, is_additional_fee, is_optional_fee, international_percentage, remarks)
				SELECT					------------------------------no need for semestral comparison because school fee details is based yearly
					NULL,				
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular, 
					0,
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount,
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					NULL,
					0,
					0,
					@international_percentage,
					NULL
				FROM 
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @sysid_feelevel) AND
					(sfd.is_optional = 0) AND
					((sfd.is_graduation_fee = 1 AND @is_graduate_student = 1) OR (sfd.is_graduation_fee = 0)) AND
					(sfc.category_no IN (3)) -- OTHER FEES
				UNION ALL 			------------------------------------------------insert the student optional fee
				SELECT
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular,
					0, 
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount,
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					sof.optional_fee_id,
					0,
					1,
					@international_percentage,
					NULL
				FROM 
					ums.student_optional_fee AS sof
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feedetails = sof.sysid_feedetails
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id			
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sof.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				WHERE
					(sof.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(cg.is_semestral = 0)			-- no marked deleted to get the previous charges of deleted level
				UNION ALL
				SELECT
					sel.sysid_enrolmentlevel,
					sfd.sysid_feedetails, 
					sfd.sysid_feeparticular,
					0, 
					0,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END AS amount,
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfd.is_office_access,
					sfc.category_no,
					NULL,
					sof.optional_fee_id,
					0,
					1,
					@international_percentage,
					NULL
				FROM 
					ums.student_optional_fee AS sof
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feedetails = sof.sysid_feedetails
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id			
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = sof.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				WHERE
					(sof.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(sel.sysid_semester = @sysid_semester) AND
					(cg.is_semestral = 1)			-- no marked deleted to get the previous charges of deleted level
				UNION ALL					---------------------------------------------insert the student additional fee
				SELECT															
					sel.sysid_enrolmentlevel,									
					NULL, 
					sfp.sysid_feeparticular,
					0, 
					0,
					saf.amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfp.is_office_access,
					sfc.category_no,
					saf.additional_fee_id,
					NULL,
					1,
					0,
					NULL AS international_percentage,
					saf.remarks
				FROM
					ums.student_additional_fee AS saf
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				WHERE
					(saf.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(cg.is_semestral = 0)				-- no marked deleted to get the previous charges of deleted level
				UNION ALL
				SELECT
					sel.sysid_enrolmentlevel,
					NULL, 
					sfp.sysid_feeparticular,
					0, 
					0,
					saf.amount, 
					sfp.fee_category_id,
					sfc.category_description, 
					sfp.particular_description, 
					sfp.is_office_access,
					sfc.category_no,
					saf.additional_fee_id,
					NULL,
					1,
					0,
					NULL AS international_percentage,
					saf.remarks
				FROM
					ums.student_additional_fee AS saf
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
				INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
				WHERE
					(saf.is_for_withdrawn_charge = (SELECT is_marked_deleted FROM ums.student_enrolment_level WHERE sysid_enrolmentlevel = @sysid_enrolmentlevel)) AND
					(sec.sysid_student = @sysid_student) AND
					(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
					(sel.sysid_feelevel = @sysid_feelevel) AND
					(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
					(sel.sysid_semester = @sysid_semester) AND
					(cg.is_semestral = 1)			-- no marked deleted to get the previous charges of deleted level
				ORDER BY
					sfc.category_no, sfp.particular_description ASC

				--determine if the optional fee is a level increase.
				--optional fees are added by the user manually that is why it cannot be iterated with regards to fees based on a level.
				--this is also needed on a scenario where updating a school fee "is_level_increase" will be after a student has already been 
				--loaded with optional fee.
				UPDATE @return_table SET
					sysid_enrolmentlevel = @sysid_enrolmentlevel,
					sysid_feedetails = sfd.sysid_feedetails,
					is_level_increase = sfd.is_level_increase,
					is_office_access = sfd.is_office_access,
					amount = CASE WHEN 
									((@is_international = 1) AND
									(NOT @international_percentage IS NULL) AND
									(NOT @international_percentage <= 0))
								THEN
									(sfd.amount * 
									(1 + (@international_percentage / 100)))
								ELSE
									(sfd.amount)
								END		
				FROM
					@return_table AS rt
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id				
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @sysid_feelevel) AND
					(sfd.is_optional = 1) AND
					(sfc.category_no IN (1, 2, 3, 4)) AND -- TUITION FEES, MISCELLANEOUS FEES, OTHER FEES, AND LABORATORY FEES
					(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE

		END

		--determine if the fees are included on a certain semester only
		SELECT 
			@semester_id = sri.semester_id
		FROM
			ums.semester_information AS sri
		WHERE
			sri.sysid_semester = @sysid_semester

		IF (NOT @semester_id IS NULL)
		BEGIN

			DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																			sfd.sysid_feeparticular
																		FROM 
																			
																			ums.school_fee_details AS sfd
																		WHERE
																			(sfd.is_marked_deleted = 0) AND
																			(sfd.sysid_feelevel = @sysid_feelevel) AND
																			(((@semester_id = 1) AND (sfd.include_first_semester = 0)) OR
																			((@semester_id = 2) AND (sfd.include_second_semester = 0)) OR
																			((@semester_id = 3) AND (sfd.include_summer = 0))))) AND
											(is_optional_fee = 0) AND
											(is_additional_fee = 0)

		END

		--determine if the fees are for female or for male
		SELECT
			@gender_flag = crf.reference_flag
		FROM
			ums.code_reference AS crf
		INNER JOIN ums.person_information AS pri ON pri.gender_code = crf.code_reference_id
		INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
		WHERE
			(si.sysid_student = @sysid_student)

		IF (NOT @gender_flag IS NULL)
		BEGIN

			DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																			sfd.sysid_feeparticular
																		FROM 
																			
																			ums.school_fee_details AS sfd
																		WHERE
																			(sfd.is_marked_deleted = 0) AND
																			(sfd.sysid_feelevel = @sysid_feelevel) AND
																			(((@gender_flag = 1) AND (sfd.include_male = 0)) OR			--male
																			((@gender_flag = 2) AND (sfd.include_female = 0))))) AND	--female
											(is_optional_fee = 0) AND
											(is_additional_fee = 0)
		END

	END
	ELSE IF (@is_enrolled = 1) AND (NOT ISNULL(@sysid_enrolmentlevel, '') = '') AND (@is_marked_deleted = 1)			--- (111)
	BEGIN

		--for the other fees, optional fees, and additional fees
		INSERT INTO @return_table (sysid_enrolmentlevel, sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, 
										category_description, particular_description, is_office_access, category_no, additional_fee_id,
										optional_fee_id, is_additional_fee, is_optional_fee, international_percentage, remarks)			
			SELECT							---------------------------------------------insert the student additional fee													
				sel.sysid_enrolmentlevel,									
				NULL, 
				sfp.sysid_feeparticular,
				0, 
				0,
				saf.amount, 
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfp.is_office_access,
				sfc.category_no,
				saf.additional_fee_id,
				NULL,
				1,
				0,
				NULL AS international_percentage,
				saf.remarks
			FROM
				ums.student_additional_fee AS saf
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
			WHERE
				(saf.is_for_withdrawn_charge = 0) AND
				(sec.sysid_student = @sysid_student) AND
				(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
				(sel.sysid_feelevel = @sysid_feelevel) AND
				(sel.is_marked_deleted = 1) AND
				(cg.is_semestral = 0)				
			UNION ALL
			SELECT
				sel.sysid_enrolmentlevel,
				NULL, 
				sfp.sysid_feeparticular,
				0, 
				0,
				saf.amount, 
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfp.is_office_access,
				sfc.category_no,
				saf.additional_fee_id,
				NULL,
				1,
				0,
				NULL AS international_percentage,
				saf.remarks
			FROM
				ums.student_additional_fee AS saf
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = saf.sysid_feeparticular			
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id	
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_enrolmentlevel = saf.sysid_enrolmentlevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel	
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id	
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id	
			WHERE
				(saf.is_for_withdrawn_charge = 0) AND
				(sec.sysid_student = @sysid_student) AND
				(sel.sysid_enrolmentlevel = @sysid_enrolmentlevel) AND
				(sel.sysid_feelevel = @sysid_feelevel) AND
				(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
				(sel.sysid_semester = @sysid_semester) AND
				(sel.is_marked_deleted = 1) AND
				(cg.is_semestral = 1)			
			ORDER BY
				sfc.category_no, sfp.particular_description ASC

	END

	RETURN 

END
GO
------------------------------------------------------


-- ##############################################END TABLE "school_fee_details" OBJECTS######################################################





-- ################################################TABLE "student_optional_fee" OBJECTS######################################################


-- verifies if the "GetBySysIDStudentFeeLevelSemesterForOptionalFeeDetails" function already exist
IF OBJECT_ID (N'ums.GetBySysIDStudentFeeLevelSemesterForOptionalFeeDetails') IS NOT NULL
   DROP FUNCTION ums.GetBySysIDStudentFeeLevelSemesterForOptionalFeeDetails
GO

CREATE FUNCTION ums.GetBySysIDStudentFeeLevelSemesterForOptionalFeeDetails		
(	
	@sysid_student varchar (50) = '',
	@sysid_feelevel varchar (50) = '',
	@sysid_semester varchar (50) = '',
	@is_international bit = 0
) 
RETURNS @return_table TABLE (table_id int IDENTITY(1, 1) NOT NULL PRIMARY KEY,
								sysid_feedetails varchar (50) NOT NULL,
								sysid_feeparticular varchar (50) NOT NULL,
								is_level_increase bit NOT NULL DEFAULT (0),
								is_added_level_fee bit NOT NULL DEFAULT (0),
								amount decimal (12, 2) NOT NULL,
								fee_category_id varchar (50) NOT NULL,
								category_description varchar (100) NOT NULL,
								particular_description varchar (100) NOT NULL,
								is_office_access bit NOT NULL DEFAULT (0),
								category_no tinyint NOT NULL,
								international_percentage float NULL)
AS
BEGIN

	DECLARE @student_enrolment_level TABLE (table_id int IDENTITY(1, 1) NOT NULL PRIMARY KEY,
											sysid_enrolmentlevel varchar (50) NOT NULL, 
											sysid_feelevel varchar (50) NOT NULL, 
											is_entry_level bit NOT NULL DEFAULT (0), 
											enrolment_level_no int NOT NULL, 
											international_percentage float NULL)
	
	DECLARE @is_entry_level bit
	DECLARE @cursor_sysid_feelevel varchar (50)	
	DECLARE @international_percentage float
	DECLARE @semester_id tinyint
	DECLARE @gender_flag tinyint	

	SELECT @is_entry_level = CASE WHEN ((SELECT TOP 1
												cg.is_semestral AS is_semestral
											FROM 
												ums.student_enrolment_level AS sel
											INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
											INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
											WHERE 
												(sec.sysid_student = @sysid_student) AND
												(sel.sysid_feelevel = @sysid_feelevel) AND
												(sel.is_marked_deleted = 0)
											ORDER BY
												sel.enrolment_level_no DESC) = 0)
									THEN
										(SELECT TOP 1
												sel.is_entry_level 
											FROM 
												ums.student_enrolment_level AS sel
											INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
											INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
											WHERE 
												(sec.sysid_student = @sysid_student) AND
												(sel.sysid_feelevel = @sysid_feelevel) AND
												(sel.is_marked_deleted = 0) AND
												(cg.is_semestral = 0)
											ORDER BY
												sel.enrolment_level_no DESC)
									ELSE
										(SELECT TOP 1
												sel.is_entry_level
											FROM 
												ums.student_enrolment_level AS sel
											INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
											INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
											INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
											INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
											WHERE 
												(sec.sysid_student = @sysid_student) AND
												(sel.sysid_feelevel = @sysid_feelevel) AND
												(sel.is_marked_deleted = 0) AND
												(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
												(sel.sysid_semester = @sysid_semester) AND
												(cg.is_semestral = 1)
											ORDER BY
												sel.enrolment_level_no DESC)
									END
	

	IF (@is_entry_level IS NULL)
	BEGIN
		SET @is_entry_level = 0
	END

	IF (@is_entry_level = 1)
	BEGIN

		INSERT INTO @return_table (sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, category_description, 
											particular_description, is_office_access, category_no, international_percentage)
			SELECT 
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular,
				0, 
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT fs.international_percentage IS NULL) AND
						(NOT fs.international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (fs.international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access,
				sfc.category_no,
				fs.international_percentage
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sec.sysid_student = @sysid_student) AND
				(sel.sysid_feelevel = @sysid_feelevel) AND
				(sel.is_marked_deleted = 0) AND
				(sfd.is_optional = 1) AND
				(cg.is_semestral = 0)				
			UNION ALL
			SELECT 
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT fs.international_percentage IS NULL) AND
						(NOT fs.international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (fs.international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access, 
				sfc.category_no,
				fs.international_percentage	
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sec.sysid_student = @sysid_student) AND
				(sel.sysid_feelevel = @sysid_feelevel) AND
				(sel.is_marked_deleted = 0) AND
				(NOT sel.sysid_semester IS NULL AND NOT sel.sysid_semester = '') AND
				(sel.sysid_semester = @sysid_semester) AND
				(sfd.is_optional = 1) AND
				(cg.is_semestral = 1)
			ORDER BY
				sfc.category_no, sfp.particular_description ASC

	END
	ELSE
	BEGIN

		--gets the student enrolment levels within a certain course group and with year level no. lesser or equal to the sysid_feelevel parameter
		INSERT INTO @student_enrolment_level(sysid_enrolmentlevel, sysid_feelevel, is_entry_level, enrolment_level_no, international_percentage)
			SELECT
				sel.sysid_enrolmentlevel AS sysid_enrolmentlevel,
				sel.sysid_feelevel AS sysid_feelevel,
				sel.is_entry_level AS is_entry_level,
				sel.enrolment_level_no AS enrolment_level_no,
				fs.international_percentage AS international_percentage
			FROM
				ums.student_enrolment_level AS sel
			INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
			INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
			INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
			INNER JOIN ums.finance_standard AS fs ON fs.sysid_financestd = sel.sysid_financestd
			WHERE
				(sec.sysid_student = @sysid_student) AND
				(sel.is_marked_deleted = 0) AND
				(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
											yli.year_level_no AS year_level_no
										FROM
											ums.year_level_information AS yli
										INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel)) AND	
				(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
											cg.course_group_id AS course_group_id
										FROM
											ums.course_group AS cg
										INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
										INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel)) AND
				(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
											sfl.fee_level_no AS fee_level_no
										FROM
											ums.school_fee_level AS sfl
										WHERE
											sfl.sysid_feelevel = @sysid_feelevel))

		--gets the international percentage based on the entry level
		SELECT 
			@international_percentage = t_sel.international_percentage
		FROM
			@student_enrolment_level AS t_sel
		WHERE
			(t_sel.enrolment_level_no = (SELECT	--get the entry level
												MAX(t_sel.enrolment_level_no)
											FROM
												@student_enrolment_level AS t_sel
											WHERE
												t_sel.is_entry_level = 1))

		INSERT INTO @return_table (sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, category_description, 
										particular_description, is_office_access, category_no, international_percentage)
			SELECT 
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT @international_percentage IS NULL) AND
						(NOT @international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (@international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access, 
				sfc.category_no,
				@international_percentage
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.student_enrolment_level AS sel ON sel.sysid_feelevel = sfl.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sel.enrolment_level_no = (SELECT	--get the entry level
												MAX(t_sel.enrolment_level_no)
											FROM
												@student_enrolment_level AS t_sel
											WHERE
												t_sel.is_entry_level = 1)) AND
				(sfd.is_optional = 1) AND
				(sfc.category_no IN (1, 2, 4)) -- TUITION FEES, MISCELLANEOUS, AND LABORATORY FEES
			ORDER BY
				sfc.category_no, sfp.particular_description ASC

		--iterates through each student enrolment levels
		DECLARE student_enrolment_level_cursor CURSOR LOCAL FORWARD_ONLY STATIC READ_ONLY 
			FOR SELECT
					sel.sysid_feelevel AS sysid_feelevel
				FROM
					ums.student_enrolment_level AS sel
				INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
				INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
				INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
				WHERE
					(sec.sysid_student = @sysid_student) AND
					(sel.is_marked_deleted = 0) AND
					(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
												yli.year_level_no AS year_level_no
											FROM
												ums.year_level_information AS yli
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND	
					(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
												cg.course_group_id AS course_group_id
											FROM
												ums.course_group AS cg
											INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
											INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND
					(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
												sfl.fee_level_no AS fee_level_no
											FROM
												ums.school_fee_level AS sfl
											WHERE
												sfl.sysid_feelevel = @sysid_feelevel)) AND
					(sel.enrolment_level_no > (SELECT
													MAX(sel.enrolment_level_no)
												FROM
													ums.student_enrolment_level AS sel
												INNER JOIN ums.student_enrolment_course AS sec ON sec.sysid_enrolmentcourse = sel.sysid_enrolmentcourse
												INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sel.sysid_feelevel
												INNER JOIN ums.year_level_information AS yli ON yli.year_level_id = sfl.year_level_id
												INNER JOIN ums.course_group AS cg ON cg.course_group_id = yli.course_group_id
												WHERE
													(sec.sysid_student = @sysid_student) AND
													(sel.is_marked_deleted = 0) AND
													(sel.is_entry_level = 1) AND			--does not include the entry level
													(yli.year_level_no <= (SELECT		--get the year level that is lesser or equal to the year level no of the sysid_feelevel parameter
																				yli.year_level_no AS year_level_no
																			FROM
																				ums.year_level_information AS yli
																			INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel)) AND	
													(cg.course_group_id = (SELECT		--get the enrolment levels that belongs to the course group the same with the sysid_feelevel parameter
																				cg.course_group_id AS course_group_id
																			FROM
																				ums.course_group AS cg
																			INNER JOIN ums.year_level_information AS yli ON yli.course_group_id = cg.course_group_id
																			INNER JOIN ums.school_fee_level AS sfl ON sfl.year_level_id = yli.year_level_id
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel)) AND
													(sfl.fee_level_no <= (SELECT		--get the school fee level that is lesser or equal to the fee level no of the sysid_feelevel parameter
																				sfl.fee_level_no AS fee_level_no
																			FROM
																				ums.school_fee_level AS sfl
																			WHERE
																				sfl.sysid_feelevel = @sysid_feelevel))))
				ORDER BY
					sel.enrolment_level_no ASC

		OPEN student_enrolment_level_cursor

		FETCH NEXT FROM student_enrolment_level_cursor
			INTO @cursor_sysid_feelevel

		WHILE @@FETCH_STATUS = 0
		BEGIN

			--determine if the miscellaneous fee does not exists in the current entry level
			INSERT INTO @return_table (sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, category_description, 
										particular_description, is_office_access, category_no, international_percentage)
				SELECT
					sfd.sysid_feedetails,
					sfd.sysid_feeparticular,
					0,
					1,
					CASE WHEN 
							((@is_international = 1) AND
							(NOT @international_percentage IS NULL) AND
							(NOT @international_percentage <= 0))
						THEN
							(sfd.amount * 
							(1 + (@international_percentage / 100)))
						ELSE
							(sfd.amount)
						END,
					sfp.fee_category_id,
					sfc.category_description,
					sfp.particular_description,
					sfd.is_office_access,
					sfc.category_no,
					@international_percentage
				FROM 						
					ums.school_fee_details AS sfd
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
					(sfd.is_optional = 1) AND
					(sfc.category_no IN (1, 2, 4)) AND -- TUITION FEES, MISCELLANEOUS, AND LABORATORY FEES
					(NOT sfd.sysid_feeparticular IN (SELECT
															sysid_feeparticular
														FROM
															@return_table))
				ORDER BY
					sfc.category_no, sfp.particular_description ASC

				--determine if the tuition, miscellaneous, and laboratory fee is a level increase
				UPDATE @return_table SET
					sysid_feedetails = sfd.sysid_feedetails,
					is_level_increase = sfd.is_level_increase,
					amount = CASE WHEN 
									((@is_international = 1) AND
									(NOT @international_percentage IS NULL) AND
									(NOT @international_percentage <= 0))
								THEN
									(sfd.amount * 
									(1 + (@international_percentage / 100)))
								ELSE
									(sfd.amount)
								END				

				FROM
					@return_table AS rt
				INNER JOIN ums.school_fee_details AS sfd ON sfd.sysid_feeparticular = rt.sysid_feeparticular
				INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
				INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
				INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
				WHERE
					(sfd.is_marked_deleted = 0) AND
					(sfl.sysid_feelevel = @cursor_sysid_feelevel) AND
					(sfd.is_optional = 1) AND
					(sfc.category_no IN (1, 2, 4)) AND -- TUITION FEES, MISCELLANEOUS, AND LABORATORY FEES
					(sfd.is_level_increase = 1)	--THE FEE IS LEVEL INCREASE
			
			FETCH NEXT FROM student_enrolment_level_cursor
				INTO @cursor_sysid_feelevel

		END

		CLOSE student_enrolment_level_cursor
		DEALLOCATE student_enrolment_level_cursor

		--if the school has an instance that higher levels have the tendency to eliminate a school fee based on an entry level
		DELETE FROM @return_table WHERE NOT sysid_feeparticular IN (SELECT 
																		sfd.sysid_feeparticular
																	FROM 						
																		ums.school_fee_details AS sfd
																	INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
																	INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
																	INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
																	WHERE
																		(sfd.is_marked_deleted = 0) AND
																		(sfl.sysid_feelevel = @sysid_feelevel) AND
																		(sfd.is_optional = 1) AND
																		(sfc.category_no IN (1, 2, 4))) -- TUITION FEES, MISCELLANEOUS, AND LABORATORY FEES


		INSERT INTO @return_table (sysid_feedetails, sysid_feeparticular, is_level_increase, is_added_level_fee, amount, fee_category_id, category_description, 
										particular_description, is_office_access, category_no, international_percentage)
			SELECT 
				sfd.sysid_feedetails, 
				sfd.sysid_feeparticular, 
				0,
				0,
				CASE WHEN 
						((@is_international = 1) AND
						(NOT @international_percentage IS NULL) AND
						(NOT @international_percentage <= 0))
					THEN
						(sfd.amount * 
						(1 + (@international_percentage / 100)))
					ELSE
						(sfd.amount)
					END AS amount,
				sfp.fee_category_id,
				sfc.category_description, 
				sfp.particular_description, 
				sfd.is_office_access,
				sfc.category_no,
				@international_percentage
			FROM 
				ums.school_fee_details AS sfd
			INNER JOIN ums.school_fee_level AS sfl ON sfl.sysid_feelevel = sfd.sysid_feelevel
			INNER JOIN ums.school_fee_particular AS sfp ON sfp.sysid_feeparticular = sfd.sysid_feeparticular
			INNER JOIN ums.school_fee_category AS sfc ON sfc.fee_category_id = sfp.fee_category_id
			WHERE
				(sfd.is_marked_deleted = 0) AND
				(sfl.sysid_feelevel = @sysid_feelevel) AND
				(sfd.is_optional = 1) AND
				(sfc.category_no IN (3)) -- OTHER FEES
			ORDER BY
				sfc.category_no, sfp.particular_description ASC

	END

	--determine if the fees are included on a certain semester only
	SELECT 
		@semester_id = sri.semester_id
	FROM
		ums.semester_information AS sri
	WHERE
		sri.sysid_semester = @sysid_semester

	IF (NOT @semester_id IS NULL)
	BEGIN

		DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																		sfd.sysid_feeparticular
																	FROM 
																		ums.school_fee_details AS sfd
																	WHERE
																		(sfd.is_marked_deleted = 0) AND
																		(sfd.is_optional = 1) AND
																		(sfd.sysid_feelevel = @sysid_feelevel) AND
																		(((@semester_id = 1) AND (sfd.include_first_semester = 0)) OR
																		((@semester_id = 2) AND (sfd.include_second_semester = 0)) OR
																		((@semester_id = 3) AND (sfd.include_summer = 0)))))

	END

	--determine if the fees are for female or for male
	SELECT
		@gender_flag = crf.reference_flag
	FROM
		ums.code_reference AS crf
	INNER JOIN ums.person_information AS pri ON pri.gender_code = crf.code_reference_id
	INNER JOIN ums.student_information AS si ON si.sysid_person = pri.sysid_person
	WHERE
		(si.sysid_student = @sysid_student)

	IF (NOT @gender_flag IS NULL)
	BEGIN

		DELETE FROM @return_table WHERE (sysid_feeparticular IN (SELECT 
																		sfd.sysid_feeparticular
																	FROM 
																		ums.school_fee_details AS sfd
																	WHERE
																		(sfd.is_marked_deleted = 0) AND
																		(sfd.is_optional = 1) AND
																		(sfd.sysid_feelevel = @sysid_feelevel) AND
																		(((@gender_flag = 1) AND (sfd.include_male = 0)) OR			--male
																		((@gender_flag = 2) AND (sfd.include_female = 0)))))		--female
	END

	RETURN 

END
GO
------------------------------------------------------

-- ##############################################END TABLE "student_optional_fee" OBJECTS######################################################







-- ############################################INITIAL DATABASE INFORMATION#############################################################
--ums.relationship_type
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_parent)
	VALUES ('RTID001', 'Father', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_parent)
	VALUES ('RTID002', 'Mother', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_spouse)
	VALUES ('RTID003', 'Husband', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_spouse)
	VALUES ('RTID004', 'Wife', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_sibling)
	VALUES ('RTID005', 'Brother', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_sibling)
	VALUES ('RTID006', 'Sister', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_in_law)
	VALUES ('RTID007', 'Father-in-law', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_in_law)
	VALUES ('RTID008', 'Mother-in-law', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_in_law)
	VALUES ('RTID009', 'Brother-in-law', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_in_law)
	VALUES ('RTID010', 'Sister-in-law', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	VALUES ('RTID011', 'Uncle/Tito', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	VALUES ('RTID012', 'Auntie/Tita', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	VALUES ('RTID013', 'Cousin', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	VALUES ('RTID014', 'Nephew', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_blood_line)
	VALUES ('RTID015', 'Niece', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_friend)
	VALUES ('RTID016', 'Guardian', 1)
INSERT INTO ums.relationship_type(relationship_type_id, relationship_description, is_friend)
	VALUES ('RTID017', 'Family Friend', 1)

-- ##########################################END INITIAL DATABASE INFORMATION#############################################################



-- ########################################FOR CODE DEBUGGING########################################################################

--as administrator
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000001', 'Administrator', 'User Access', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Xdu&3%-<VYzP@1gzO^g3rRpQnM#', 'AdminAccess', '?@ssw0rd', 1, 'SYSPER000000000001', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Xdu&3%-<VYzP@1gzO^g3rRpQnM#', '@c^jy#A*%ke_&yz!Ob0w%Pyg-Rt#l_$qiZ-Qt*m@', 'DEPT001', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as payroll master
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000002', 'Payroll', 'Master', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#H21T*zF^s=TwQerPozQR5ymTq1#', 'Payroll', '?@ssw0rd', 1, 'SYSPER000000000002', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#H21T*zF^s=TwQerPozQR5ymTq1#', '@8se%72jKl$yTb*-!dPqo[zAm<?!#aIqBza#d./@', 'DEPT018', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as college registrar
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000003', 'Registrar', 'College', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#I7a1Qu^e8}sQvXi902Twep+23b#', 'Registrar', '?@ssw0rd', 1, 'SYSPER000000000003', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#I7a1Qu^e8}sQvXi902Twep+23b#', '@4Iw%&z_q${:,tY2*!9eZoY&+|uTqY<.wVx\aDe@', 'DEPT019', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (CBED)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000004', 'Business', 'College', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#PqY6sR23*73BzP01wTuvR972Bc#', 'Business', '?@ssw0rd', 1, 'SYSPER000000000004', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#PqY6sR23*73BzP01wTuvR972Bc#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT003', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (CAED)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000005', 'Arts and Sciences', 'College', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#cT81P:>xdTy^5*334SdBgTnHz9#', 'ArtsAccess', '?@ssw0rd', 1, 'SYSPER000000000005', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#cT81P:>xdTy^5*334SdBgTnHz9#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT002', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (NURSING)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000006', 'Nursing', 'College', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#BMC3481%e=2!sAcpIt5zp03723#', 'Nursing', '?@ssw0rd', 1, 'SYSPER000000000006', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#BMC3481%e=2!sAcpIt5zp03723#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT015', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (HIGH SCHOOL)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000007', 'High School', 'Department', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Tu71@z$7-=T&eTuQezB3429+23#', 'HighAccess', '?@ssw0rd', 1, 'SYSPER000000000007', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Tu71@z$7-=T&eTuQezB3429+23#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT009', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as student's data controller
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000008', 'Data Controller', 'Student', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Gu@3Z8T6y}!t*2E09sByTi8+27#', 'Controller', '?@ssw0rd', 1, 'SYSPER000000000008', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Gu@3Z8T6y}!t*2E09sByTi8+27#', '@b&#jSxI;!^[Gy]wU_<.A*zYp:%$H~aPuE%cM=|@', 'DEPT026', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as id maker
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000009', 'Id', 'Maker', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Bt^2#seUyT8a93tUeO0*@351Xd#', 'MakerAccess', '?@ssw0rd', 1, 'SYSPER000000000009', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Bt^2#seUyT8a93tUeO0*@351Xd#', '@bT7*zi9_!,[QzPeR#=lSi-^38tPwxBm%2yM*yv@', 'DEPT018', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as cashier
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000010', 'Cashier', 'Finance', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Hq3@&^zXgVeI82*%weP&Q@er%g#', 'Cashier', '?@ssw0rd', 1, 'SYSPER000000000010', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Hq3@&^zXgVeI82*%weP&Q@er%g#', '@Lg+zT$`=,#uWb/pQi!2*5Rw4%zPiZ-!3qP:283@', 'DEPT018', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as book keeper
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000011', 'Bookkeeper', 'Finance', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Gu#6QaZi*e@r$8^ePoWR8&wBv1#', 'Bookkeeper', '?@ssw0rd', 1, 'SYSPER000000000011', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Gu#6QaZi*e@r$8^ePoWR8&wBv1#', '@G[23#0zQ>/5TQ2_3R+|~23GbzO967#wT&w32:>@', 'DEPT018', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as VP of Finance Affairs
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000012', 'Finance Affairs', 'VP', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#*Tu%*!@bTyWrzPi&%31aBc+-23#', 'FinanceAffairs', '?@ssw0rd', 1, 'SYSPER000000000012', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#*Tu%*!@bTyWrzPi&%31aBc+-23#', '@3T*7z_23!+Er+=45yUqP>;%*We23tYz0+<23&7@', 'DEPT018', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as Secretary of the VP of Academic Affairs
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000013', 'Secretary', 'VP of Academic Affairs', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#YTu#r%7w*eo0+-235Bt!sePwe$#', 'Secretary', '?@ssw0rd', 1, 'SYSPER000000000013', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#YTu#r%7w*eo0+-235Bt!sePwe$#', '@h74E*,:!#aE43Bm|~*gHaQp,Z*_=$^`;gcZm&9@', 'DEPT017', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as VP of Academic Affairs
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000014', 'Academic Affairs', 'VP', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Gt^3$5zBe309TQwR923+-=56Wq#', 'AcademicAffairs', '?@ssw0rd', 1, 'SYSPER000000000014', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Gt^3$5zBe309TQwR923+-=56Wq#', '@oRwPc_+=tY/~\#zQ58!*$cPa:+Zy829xz;%^aG@', 'DEPT025', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (GRADE SCHOOL)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000015', 'Grade School', 'Children', 'Testing', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#Ut%23bRt&:.\\3<seqZer84@834#', 'GradeSchool', '?@ssw0rd', 1, 'SYSPER000000000015', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#Ut%23bRt&:.\\3<seqZer84@834#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT008', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--as office user (GRADUATE SCHOOL)
INSERT INTO ums.person_information(sysid_person, last_name, first_name, middle_name, for_login, created_by) 
	VALUES ('SYSPER000000000016', 'Graduate School', 'Doctorate', 'Masteral', 1, '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.system_user_info(system_user_id, system_user_name, system_user_password, system_user_status, sysid_person, created_by)
	VALUES ('#35Yt723UTe$83z2se&qz09PiwIw#', 'Graduate', '?@ssw0rd', 1, 'SYSPER000000000016', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')
INSERT INTO ums.access_rights_granted(system_user_id, access_rights, department_id, created_by)
	VALUES ('#35Yt723UTe$83z2se&qz09PiwIw#', '@7W_*xAuIz%qTm^rYmq!a38&z#s{>zX2*pUw[#Z@', 'DEPT016', '#Tuy@i*2sz@kUw-2!us%WBxYzwP#')

--#######################################END FOR CODE DEBUGGING########################################################################






