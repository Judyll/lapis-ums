CACHED DATA

	==> instantiate from RemCntCashieringManager
	call the function GetDataSetForCashiering(CommonExchange.SysAccess userInfo, String serverDateTime)

	this will return a DATASET which contains the following table:
	
	Table Name: SchoolFeeParticularTable

				sysid_feeparticular				String	'SYSFPR***'
            	fee_category_id					String	'FCID**'
				particular_description			String
				is_optional						Boolean
				is_office_access				Boolean
				is_entry_level_included			Boolean
				is_graduation_fee				Boolean
				category_description			String
            	category_no						Byte	'1, 2, 3, 4, 5....'
            	
	Table Name: ForAdditionalFeeSchoolFeeParticularTable

				sysid_feeparticular				String	'SYSFPR***'
            	fee_category_id					String	'FCID**'
				particular_description			String
				is_optional						Boolean
				is_office_access				Boolean
				is_entry_level_included			Boolean
				is_graduation_fee				Boolean
				category_description			String
            	category_no						Byte	'1, 2, 3, 4, 5....'
            	
	Table Name: SchoolFeeInformationTable

				sysid_schoolfee					String		'SYSSCF***'
            	year_id 						String		'SY********'
            	year_description				String
            	date_start						String
            	date_end						String
				is_summer						Boolean
	
	Table Name: SemesterInformationTable

            	sysid_semester					String		'SYSSEM****'
            	year_id							String 		'SY********'
				semester_id						Byte
           		date_start						String
            	date_end						String
            	year_description				String
            	semester_description			String
            	
	Table Name: SchoolFeeCategoryTable

				fee_category_id					String		'FCID**'
				category_description			String
				category_no						Byte
				
	Table Name: YearLevelInformationTable

				year_level_id					String		'YRLV**'
				year_level_description			String
				acronym							String
				id_prefix						String
				year_level_no					Int16
				course_group_id					String		'CG**'
				group_no						Byte		'1, 2, 3, 4, 5...'
				group_description				String
				is_semestral					Boolean
				is_per_unit						Boolean
            	
	
            	
TO GET THE STUDENT PAYMENTS AND DISCOUNTS BY DATE START END AND STUDENT LIST (USED FOR STUDENT LOADING IN THE CHARGES LIST AND FINANCE CASHIERING)

	==> instantiate from RemCntCashieringManager
	call the function SelectBySysIDStudentListDateStartEndStudentPaymentsDiscountsReimbursement(CommonExchange.SysAccess userInfo, String studentSysIdList,
            String dateStart, String dateEnd, Boolean includeDiscount, String serverDateTime)
            
	this will return a DATATABLE which contains the following field:

				payment_discount_reimbursement_id			Int64
				sysid_student								String		'SYSSTD*********'
				payment_discount_reimbursement_date			String
				receipt_no									String
				remarks_discount_reimbursement_description	String
				amount										Decimal
				is_payment									Boolean
				is_discount									Boolean
				is_reimbursement							Boolean
				
TO GET THE STUDENT SCHOLARSHIP WITH DISCOUNTS (USED FOR THE FINANCE CASHIERING AND SCHOLARSHIP MANAGER)

	==> instantiate from RemCntScholarshipManager
	call the function SelectBySysIDEnrolmentLevelStudentScholarship(CommonExchange.SysAccess userInfo, String enrolmentLevelSysId, String serverDateTime)
            
	this will return a DATATABLE which contains the following field:

				sysid_studentscholarship					String		'SYSSSC*********'
				sysid_student								String		'SYSSTD*********'
				sysid_scholarship							String		'SYSSPI***'
				scholarship_description						String
				is_non_academic								Boolean
				department_name								String
				department_acronym							String
				discount_id									Int64
				discount_date								String
				remarks										String
				amount										String
				
TO GET THE SCHOOL FEE DETAILS BY SYSTEM ID OF STUDENT, FEE LEVEL, SEMESTER, AND IS GRADUATING STUDENT (USED FOR STUDENT LOADING IN THE CHARGES LIST AND FINANCE CASHIERING)

	==> instantiate from RemCntStudentLoadingManager
	call the function SelectBySysIDStudentFeeLevelSemesterSchoolFeeDetailsStudentLoad(CommonExchange.SysAccess userInfo, String studentSysId,
            String enrolmentLevelSysId, String feeLevelSysId, String semesterSysId, Boolean isGraduateStudent, Boolean isInternational,
            Boolean isEnrolled, Boolean isMarkedDeleted, Boolean isPreviousCharge)

	this will return a DATATABLE which contains the following field:

				table_id									Int32
				sysid_student								String		'SYSSTD*********'
				sysid_enrolmentlevel						String		'SYSELV*********'
				sysid_feedetails							String		'SYSFDL*********'
				sysid_feeparticular							String		'SYSFPR***'
				is_level_increase							Boolean	
				is_added_level_fee							Boolean	
				amount										Decimal
				fee_category_id								String		'FCID**'
				category_description						String
				particular_description						String
				is_office_access							Boolean
				category_no									String
				additional_fee_id							Int64
				optional_fee_id								Int64
				is_additional_fee							Boolean
				is_optional_fee								Boolean
				is_per_year_tuition_fee						Boolean
				is_per_unit_tuition_fee						Boolean
				is_fixed_amount_tuition_fee					Boolean
				is_special_class_tuition_fee				Boolean
				international_percentage					Single
				
	Query possibilities:
	
		-- A - is_enrolled
		-- B - sysid_enrolmentlevel
		-- C - is_marked_deleted
		-- D - is_previous_charge

		--	A	B	C	D
		--	==============
		--	0	0	0	0	used to get the charges of a level that is candidate for enrolment
		--	0	0	0	1	NOT INCLUDED
		--	0	0	1	0	NOT INCLUDED
		--	0	0	1	1	NOT INCLUDED
		--	0	1	0	0	NOT INCLUDED
		--	0	1	0	1	NOT INCLUDED
		--	0	1	1	0	NOT INCLUDED
		--	0	1	1	1	NOT INCLUDED
		--	1	0	0	0	NOT INCLUDED
		--	1	0	0	1	NOT INCLUDED
		--	1	0	1	0	NOT INCLUDED
		--	1	0	1	1	NOT INCLUDED
		--	1	1	0	0	used to get the current charges of an enrolled level
		--	1	1	0	1	used to get the previous charges of an enrolled level and deleted level
		--	1	1	1	0	used to get the current charges of a deleted level
		--	1	1	1	1	NOT INCLUDED
				
TO GET THE STUDENT ENROLMENT COURSE BY STUDENT SYSTEM ID DATE START AND DATE END (USED BY THE OFFICE USERS FOR ENROLMENT)

	==> instantiate from RemCntStudentEnrolmentManager
	call the function SelectBySysIDStudentDateStartEndStudentEnrolmentCourse(CommonExchange.SysAccess userInfo, String studentSysId, 
            String dateStart, String dateEnd)

	this will return a DATATABLE which contains the following field:

				sysid_enrolmentcourse						String		'SYSECR*********'
				sysid_student								String 		'SYSSTD*******'
				course_id									String		'CRSE**'
				sysid_schoolfee								String		'SYSSCF***'
				sysid_semester								String		'SYSSEM****'
				is_current_course							Boolean
				course_group_id								String		'CG**'
				course_title								String
				course_acronym								String
				group_description							String
				is_semestral								Boolean
				last_semester_enrolled						String		'SYSSEM****'
				
TO GET THE STUDENT ENROLMENT LEVEL BY STUDENT SYSTEM ID YEAR ID AND SEMESTER SYSTEM ID (USED BY THE OFFICE USERS FOR ENROLMENT AND FINANCE FOR CASHIERING)

	==> instantiate from RemCntStudentEnrolmentManager
	call the function SelectBySysIDStudentYearIDSemesterStudentEnrolmentLevel(CommonExchange.SysAccess userInfo, String studentSysId, 
            String yearId, String semesterSysId, String enrolmentCourseSysId, Boolean includeNotEnrolled, Boolean includeMarkedDeleted)

	this will return a DATATABLE which contains the following field:

				sysid_enrolmentlevel						String 		'SYSELV*********'
				sysid_enrolmentcourse						String		'SYSECR*********'
				sysid_feelevel								String 		'SYSFLV******'
				sysid_semester								String		'SYSSEM****'
				level_section								String
				is_entry_level								Boolean
				is_marked_deleted							Boolean
				is_graduate_student							Boolean
				is_international							Boolean
				enrolment_level_no							Int32
				course_id									String		'CRSE**'
				sysid_schoolfee								String		'SYSSCF***'
				year_level_id								String 		'YRLV**'				
				year_level_description						String
				year_level_no								Int16
				is_graduate_level							Boolean
				course_group_id								String		'CG**'
				group_description							String
				is_semestral								Boolean
				is_enrolled									Boolean
				
TO GET THE SUBJECT SCHEDULE BY DATE START END AND BY STUDENT ENROLMENT LEVEL

	==> instantiate from RemCntStudentLoadingManager
	call the function SelectBySysIDEnrolmentLevelDateStartEndSubjectScheduleStudentLoad(CommonExchange.SysAccess userInfo, String studentSysId, 
            String enrolmentLevelSysId, String feeLevelSysId, String semesterSysId, Boolean isGraduateStudent, Boolean isInternational,
            Boolean isEnrolled, String dateStart, String dateEnd, String serverDateTime)

	this will return a DATATABLE which contains the following field:

	   
				sysid_schedule								String		'SYSCH*********'
				sysid_subject								String		'SYSSBJ******'
				year_semester_id							String
				is_team_teaching							Boolean
				is_fixed_amount								Boolean
				amount										Decimal
				subject_code								String
				descriptive_title							String
				subject_lecture_units						Byte
				subject_lab_units							Byte
				subject_no_hours							String	
				department_name								String
				is_semestral								Boolean
				group_no									Byte		GraduateSchoolDoctorate = 1,
        																College = 2,
        																HighSchool = 3,
        																GradeSchool = 4
				load_id										Int64
				load_date									String
				deload_date									String
				load_lecture_units							Byte
				load_lab_units								Byte
				load_no_hours								String	
				is_premature_deloaded						Boolean
				is_loaded_to_student						Boolean
				slots_available								Int16		if the value is -1, it means the schedule is a field room. if the value is 0, it means there are
																		no more slots available.
				subject_amount								Decimal

	call this function evertime the user selects an enrolment level
	
TO INSERT A STUDENT PAYMENTS

	==> instantiate from RemCntCashieringManager
	call the function InsertStudentPayments(CommonExchange.SysAccess userInfo, CommonExchange.StudentPayments studentPayments)

	this will need the following CommonExchange.StudentPayments struct value:

				studentPayments.StudentSysId
                studentPayments.PaymentDate
                studentPayments.ReceiptNo
                studentPayments.Remarks
                studentPayments.Amount
                
TO UPDATE A STUDENT PAYMENTS

	==> instantiate from RemCntCashieringManager
	call the function UpdateStudentPayments(CommonExchange.SysAccess userInfo, CommonExchange.StudentPayments studentPayments)

	this will need the following CommonExchange.StudentPayments struct value:

				studentPayments.PaymentId
                studentPayments.PaymentDate
                studentPayments.ReceiptNo
                studentPayments.Remarks
                studentPayments.Amount
                
TO DELETE A STUDENT PAYMENTS

	==> instantiate from RemCntCashieringManager
	call the function DeleteStudentPayments(CommonExchange.SysAccess userInfo, CommonExchange.StudentPayments studentPayments)

	this will need the following CommonExchange.StudentPayments struct value:

				studentPayments.PaymentId
				
TO INSERT A STUDENT DISCOUNTS

	==> instantiate from RemCntCashieringManager
	call the function InsertStudentDiscounts(CommonExchange.SysAccess userInfo, CommonExchange.StudentDiscounts studentDiscounts)

	this will need the following CommonExchange.StudentDiscounts struct value:

				 studentDiscounts.StudentScholarshipSysId
                 studentDiscounts.DiscountDate
                 studentDiscounts.Remarks
                 studentDiscounts.Amount
				
TO UPDATE A STUDENT DISCOUNTS

	==> instantiate from RemCntCashieringManager
	call the function UpdateStudentDiscounts(CommonExchange.SysAccess userInfo, CommonExchange.StudentDiscounts studentDiscounts)

	this will need the following CommonExchange.StudentDiscounts struct value:

				studentDiscounts.DiscountId
                studentDiscounts.DiscountDate
                studentDiscounts.Remarks
                studentDiscounts.Amount
                
TO DELETE A STUDENT DISCOUNTS

	==> instantiate from RemCntCashieringManager
	call the function DeleteStudentDiscounts(CommonExchange.SysAccess userInfo, CommonExchange.StudentDiscounts studentDiscounts)

	this will need the following CommonExchange.StudentDiscounts struct value:

				studentDiscounts.DiscountId
                 
TO INSERT A STUDENT REIMBURSEMENTS

	==> instantiate from RemCntCashieringManager
	call the function InsertStudentReimbursements(CommonExchange.SysAccess userInfo, CommonExchange.StudentReimbursements studentReimbursements)

	this will need the following CommonExchange.StudentReimbursements struct value:

				studentReimbursements.StudentSysId
                studentReimbursements.ReimbursementDate
                studentReimbursements.Remarks
                studentReimbursements.Amount
                
TO UPDATE A STUDENT REIMBURSEMENTS

	==> instantiate from RemCntCashieringManager
	call the function UpdateStudentReimbursements(CommonExchange.SysAccess userInfo, CommonExchange.StudentReimbursements studentReimbursements)

	this will need the following CommonExchange.StudentReimbursements struct value:

				studentReimbursements.ReimbursementId
                studentReimbursements.ReimbursementDate
                studentReimbursements.Remarks
                studentReimbursements.Amount
                
TO DELETE A STUDENT REIMBURSEMENTS

	==> instantiate from RemCntCashieringManager
	call the function DeleteStudentReimbursements(CommonExchange.SysAccess userInfo, CommonExchange.StudentReimbursements studentReimbursements)

	this will need the following CommonExchange.StudentReimbursements struct value:

				studentReimbursements.ReimbursementId
				
TO INSERT A STUDENT ADDITIONAL SCHOOL FEE

	==> instantiate from RemCntSchoolFeeManager
	call the procedue InsertStudentAdditionalFee(CommonExchange.SysAccess userInfo, CommonExchange.StudentAdditionalFee additionalFee)

	this will need the following CommonExchange.StudentAdditionalFee struct value:
	
				additionalFee.EnrolmentLevelSysId
                additionalFee.FeeParticularSysId
                additionalFee.Amount
                
TO UPDATE A STUDENT ADDITIONAL SCHOOL FEE

	==> instantiate from RemCntSchoolFeeManager
	call the procedue UpdateStudentAdditionalFee(CommonExchange.SysAccess userInfo, CommonExchange.StudentAdditionalFee additionalFee)

	this will need the following CommonExchange.StudentAdditionalFee struct value:
	
				additionalFee.AdditionalFeeId
                additionalFee.FeeParticularSysId
                additionalFee.Amount
                
TO DELETE A STUDENT ADDITIONAL SCHOOL FEE

	==> instantiate from RemCntSchoolFeeManager
	call the procedue DeleteStudentAdditionalFee(CommonExchange.SysAccess userInfo, CommonExchange.StudentAdditionalFee additionalFee)

	this will need the following CommonExchange.StudentAdditionalFee struct value:
	
				additionalFee.AdditionalFeeId